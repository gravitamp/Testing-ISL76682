
Pin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f3c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800a1d4  0800a1d4  0001a1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a230  0800a230  0001a230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a234  0800a234  0001a234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800a238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003c8  24000010  0800a248  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240003d8  0800a248  000203d8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000284c3  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004851  00000000  00000000  00048501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d78  00000000  00000000  0004cd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b50  00000000  00000000  0004ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003da68  00000000  00000000  00050620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00027333  00000000  00000000  0008e088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00182fcc  00000000  00000000  000b53bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00238387  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007da0  00000000  00000000  002383d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a1bc 	.word	0x0800a1bc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800a1bc 	.word	0x0800a1bc

080002d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ea:	463b      	mov	r3, r7
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
 80002f8:	615a      	str	r2, [r3, #20]
 80002fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fc:	4b2f      	ldr	r3, [pc, #188]	; (80003bc <MX_ADC1_Init+0xe4>)
 80002fe:	4a30      	ldr	r2, [pc, #192]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000300:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000302:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000308:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <MX_ADC1_Init+0xe4>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030e:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000314:	4b29      	ldr	r3, [pc, #164]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000316:	2204      	movs	r2, #4
 8000318:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800031a:	4b28      	ldr	r3, [pc, #160]	; (80003bc <MX_ADC1_Init+0xe4>)
 800031c:	2200      	movs	r2, #0
 800031e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000320:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000322:	2200      	movs	r2, #0
 8000324:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000326:	4b25      	ldr	r3, [pc, #148]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000328:	2201      	movs	r2, #1
 800032a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032c:	4b23      	ldr	r3, [pc, #140]	; (80003bc <MX_ADC1_Init+0xe4>)
 800032e:	2200      	movs	r2, #0
 8000330:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000334:	2200      	movs	r2, #0
 8000336:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_ADC1_Init+0xe4>)
 800033a:	2200      	movs	r2, #0
 800033c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000340:	2200      	movs	r2, #0
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000346:	2200      	movs	r2, #0
 8000348:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_ADC1_Init+0xe4>)
 800034c:	2200      	movs	r2, #0
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000352:	2200      	movs	r2, #0
 8000354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000358:	4818      	ldr	r0, [pc, #96]	; (80003bc <MX_ADC1_Init+0xe4>)
 800035a:	f001 fdbb 	bl	8001ed4 <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000364:	f001 f850 	bl	8001408 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	4619      	mov	r1, r3
 8000372:	4812      	ldr	r0, [pc, #72]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000374:	f002 fbd0 	bl	8002b18 <HAL_ADCEx_MultiModeConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800037e:	f001 f843 	bl	8001408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <MX_ADC1_Init+0xec>)
 8000384:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000386:	2306      	movs	r3, #6
 8000388:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_ADC1_Init+0xf0>)
 8000390:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000392:	2304      	movs	r3, #4
 8000394:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039e:	463b      	mov	r3, r7
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <MX_ADC1_Init+0xe4>)
 80003a4:	f001 ff38 	bl	8002218 <HAL_ADC_ConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80003ae:	f001 f82b 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	3728      	adds	r7, #40	; 0x28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	2400002c 	.word	0x2400002c
 80003c0:	40022000 	.word	0x40022000
 80003c4:	10c00010 	.word	0x10c00010
 80003c8:	47ff0000 	.word	0x47ff0000

080003cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	; 0x28
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a18      	ldr	r2, [pc, #96]	; (800044c <HAL_ADC_MspInit+0x80>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d129      	bne.n	8000442 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <HAL_ADC_MspInit+0x84>)
 80003f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80003f4:	4a16      	ldr	r2, [pc, #88]	; (8000450 <HAL_ADC_MspInit+0x84>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <HAL_ADC_MspInit+0x84>)
 8000400:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000404:	f003 0320 	and.w	r3, r3, #32
 8000408:	613b      	str	r3, [r7, #16]
 800040a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <HAL_ADC_MspInit+0x84>)
 800040e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <HAL_ADC_MspInit+0x84>)
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_ADC_MspInit+0x84>)
 800041e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000422:	f003 0304 	and.w	r3, r3, #4
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = TEMP1_Pin|TEMP2_Pin;
 800042a:	2330      	movs	r3, #48	; 0x30
 800042c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800042e:	2303      	movs	r3, #3
 8000430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <HAL_ADC_MspInit+0x88>)
 800043e:	f003 fd9d 	bl	8003f7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000442:	bf00      	nop
 8000444:	3728      	adds	r7, #40	; 0x28
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40022000 	.word	0x40022000
 8000450:	58024400 	.word	0x58024400
 8000454:	58020800 	.word	0x58020800

08000458 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800045c:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <MX_CRC_Init+0x3c>)
 800045e:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <MX_CRC_Init+0x40>)
 8000460:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_CRC_Init+0x3c>)
 8000464:	2200      	movs	r2, #0
 8000466:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_CRC_Init+0x3c>)
 800046a:	2200      	movs	r2, #0
 800046c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_CRC_Init+0x3c>)
 8000470:	2200      	movs	r2, #0
 8000472:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <MX_CRC_Init+0x3c>)
 8000476:	2200      	movs	r2, #0
 8000478:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_CRC_Init+0x3c>)
 800047c:	2201      	movs	r2, #1
 800047e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_CRC_Init+0x3c>)
 8000482:	f002 fd07 	bl	8002e94 <HAL_CRC_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800048c:	f000 ffbc 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	24000090 	.word	0x24000090
 8000498:	58024c00 	.word	0x58024c00

0800049c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <HAL_CRC_MspInit+0x3c>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d10e      	bne.n	80004cc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <HAL_CRC_MspInit+0x40>)
 80004b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b4:	4a09      	ldr	r2, [pc, #36]	; (80004dc <HAL_CRC_MspInit+0x40>)
 80004b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <HAL_CRC_MspInit+0x40>)
 80004c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	58024c00 	.word	0x58024c00
 80004dc:	58024400 	.word	0x58024400

080004e0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80004e4:	4b19      	ldr	r3, [pc, #100]	; (800054c <MX_DMA2D_Init+0x6c>)
 80004e6:	4a1a      	ldr	r2, [pc, #104]	; (8000550 <MX_DMA2D_Init+0x70>)
 80004e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <MX_DMA2D_Init+0x6c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <MX_DMA2D_Init+0x6c>)
 80004f2:	2202      	movs	r2, #2
 80004f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <MX_DMA2D_Init+0x6c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <MX_DMA2D_Init+0x6c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <MX_DMA2D_Init+0x6c>)
 8000504:	2202      	movs	r2, #2
 8000506:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <MX_DMA2D_Init+0x6c>)
 800050a:	2200      	movs	r2, #0
 800050c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <MX_DMA2D_Init+0x6c>)
 8000510:	2200      	movs	r2, #0
 8000512:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <MX_DMA2D_Init+0x6c>)
 8000516:	2200      	movs	r2, #0
 8000518:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_DMA2D_Init+0x6c>)
 800051c:	2200      	movs	r2, #0
 800051e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <MX_DMA2D_Init+0x6c>)
 8000522:	2200      	movs	r2, #0
 8000524:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000526:	4809      	ldr	r0, [pc, #36]	; (800054c <MX_DMA2D_Init+0x6c>)
 8000528:	f002 fd9e 	bl	8003068 <HAL_DMA2D_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000532:	f000 ff69 	bl	8001408 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000536:	2101      	movs	r1, #1
 8000538:	4804      	ldr	r0, [pc, #16]	; (800054c <MX_DMA2D_Init+0x6c>)
 800053a:	f002 fdf9 	bl	8003130 <HAL_DMA2D_ConfigLayer>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000544:	f000 ff60 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	240000b4 	.word	0x240000b4
 8000550:	52001000 	.word	0x52001000

08000554 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <HAL_DMA2D_MspInit+0x3c>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d10e      	bne.n	8000584 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <HAL_DMA2D_MspInit+0x40>)
 8000568:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800056c:	4a09      	ldr	r2, [pc, #36]	; (8000594 <HAL_DMA2D_MspInit+0x40>)
 800056e:	f043 0310 	orr.w	r3, r3, #16
 8000572:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <HAL_DMA2D_MspInit+0x40>)
 8000578:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800057c:	f003 0310 	and.w	r3, r3, #16
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	52001000 	.word	0x52001000
 8000594:	58024400 	.word	0x58024400

08000598 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800059c:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 800059e:	4a2f      	ldr	r2, [pc, #188]	; (800065c <MX_FDCAN1_Init+0xc4>)
 80005a0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005a8:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005b4:	4b28      	ldr	r3, [pc, #160]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80005ba:	4b27      	ldr	r3, [pc, #156]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005c2:	2204      	movs	r2, #4
 80005c4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 26;
 80005c6:	4b24      	ldr	r3, [pc, #144]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005c8:	221a      	movs	r2, #26
 80005ca:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 4;
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005ce:	2204      	movs	r2, #4
 80005d0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005d4:	2203      	movs	r2, #3
 80005d6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 6;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005da:	2206      	movs	r2, #6
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005e6:	2202      	movs	r2, #2
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005ec:	2205      	movs	r2, #5
 80005ee:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 80005fe:	2200      	movs	r2, #0
 8000600:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000604:	2220      	movs	r2, #32
 8000606:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 800060a:	2205      	movs	r2, #5
 800060c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000610:	2220      	movs	r2, #32
 8000612:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_12;
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000616:	2205      	movs	r2, #5
 8000618:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 800061c:	2220      	movs	r2, #32
 800061e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_12;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000622:	2205      	movs	r2, #5
 8000624:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000628:	2200      	movs	r2, #0
 800062a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 800062e:	2200      	movs	r2, #0
 8000630:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000634:	2220      	movs	r2, #32
 8000636:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 800063a:	2200      	movs	r2, #0
 800063c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000640:	2205      	movs	r2, #5
 8000642:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_FDCAN1_Init+0xc0>)
 8000646:	f002 fe21 	bl	800328c <HAL_FDCAN_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000650:	f000 feda 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	2400011c 	.word	0x2400011c
 800065c:	4000a000 	.word	0x4000a000

08000660 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0b8      	sub	sp, #224	; 0xe0
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	22bc      	movs	r2, #188	; 0xbc
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f009 fd93 	bl	800a1ac <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a29      	ldr	r2, [pc, #164]	; (8000730 <HAL_FDCAN_MspInit+0xd0>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d14a      	bne.n	8000726 <HAL_FDCAN_MspInit+0xc6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000694:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000696:	2300      	movs	r3, #0
 8000698:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 f8de 	bl	8006860 <HAL_RCCEx_PeriphCLKConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 80006aa:	f000 fead 	bl	8001408 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <HAL_FDCAN_MspInit+0xd4>)
 80006b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80006b4:	4a1f      	ldr	r2, [pc, #124]	; (8000734 <HAL_FDCAN_MspInit+0xd4>)
 80006b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ba:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <HAL_FDCAN_MspInit+0xd4>)
 80006c0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80006c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <HAL_FDCAN_MspInit+0xd4>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d2:	4a18      	ldr	r2, [pc, #96]	; (8000734 <HAL_FDCAN_MspInit+0xd4>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_FDCAN_MspInit+0xd4>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000704:	2309      	movs	r3, #9
 8000706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800070e:	4619      	mov	r1, r3
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <HAL_FDCAN_MspInit+0xd8>)
 8000712:	f003 fc33 	bl	8003f7c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2013      	movs	r0, #19
 800071c:	f002 fb92 	bl	8002e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000720:	2013      	movs	r0, #19
 8000722:	f002 fba9 	bl	8002e78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000726:	bf00      	nop
 8000728:	37e0      	adds	r7, #224	; 0xe0
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	4000a000 	.word	0x4000a000
 8000734:	58024400 	.word	0x58024400
 8000738:	58020000 	.word	0x58020000

0800073c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]
 8000752:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_FMC_Init+0x9c>)
 8000756:	4a21      	ldr	r2, [pc, #132]	; (80007dc <MX_FMC_Init+0xa0>)
 8000758:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_FMC_Init+0x9c>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_FMC_Init+0x9c>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_FMC_Init+0x9c>)
 8000768:	2204      	movs	r2, #4
 800076a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_FMC_Init+0x9c>)
 800076e:	2210      	movs	r2, #16
 8000770:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_FMC_Init+0x9c>)
 8000774:	2240      	movs	r2, #64	; 0x40
 8000776:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_FMC_Init+0x9c>)
 800077a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_FMC_Init+0x9c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_FMC_Init+0x9c>)
 8000788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800078c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_FMC_Init+0x9c>)
 8000790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_FMC_Init+0x9c>)
 8000798:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80007a2:	2309      	movs	r3, #9
 80007a4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80007a6:	2306      	movs	r3, #6
 80007a8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 8;
 80007aa:	2308      	movs	r3, #8
 80007ac:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <MX_FMC_Init+0x9c>)
 80007c0:	f008 f9da 	bl	8008b78 <HAL_SDRAM_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 80007ca:	f000 fe1d 	bl	8001408 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	240001bc 	.word	0x240001bc
 80007dc:	52004140 	.word	0x52004140

080007e0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80007f4:	4b40      	ldr	r3, [pc, #256]	; (80008f8 <HAL_FMC_MspInit+0x118>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d178      	bne.n	80008ee <HAL_FMC_MspInit+0x10e>
    return;
  }
  FMC_Initialized = 1;
 80007fc:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <HAL_FMC_MspInit+0x118>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000802:	4b3e      	ldr	r3, [pc, #248]	; (80008fc <HAL_FMC_MspInit+0x11c>)
 8000804:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000808:	4a3c      	ldr	r2, [pc, #240]	; (80008fc <HAL_FMC_MspInit+0x11c>)
 800080a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800080e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000812:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <HAL_FMC_MspInit+0x11c>)
 8000814:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000820:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000824:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000832:	230c      	movs	r3, #12
 8000834:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4831      	ldr	r0, [pc, #196]	; (8000900 <HAL_FMC_MspInit+0x120>)
 800083c:	f003 fb9e 	bl	8003f7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000840:	230c      	movs	r3, #12
 8000842:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000850:	230c      	movs	r3, #12
 8000852:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	482a      	ldr	r0, [pc, #168]	; (8000904 <HAL_FMC_MspInit+0x124>)
 800085a:	f003 fb8f 	bl	8003f7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800086e:	230c      	movs	r3, #12
 8000870:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4824      	ldr	r0, [pc, #144]	; (8000908 <HAL_FMC_MspInit+0x128>)
 8000878:	f003 fb80 	bl	8003f7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800087c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000880:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800088e:	230c      	movs	r3, #12
 8000890:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	481d      	ldr	r0, [pc, #116]	; (800090c <HAL_FMC_MspInit+0x12c>)
 8000898:	f003 fb70 	bl	8003f7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800089c:	f64f 7383 	movw	r3, #65411	; 0xff83
 80008a0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ae:	230c      	movs	r3, #12
 80008b0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	4816      	ldr	r0, [pc, #88]	; (8000910 <HAL_FMC_MspInit+0x130>)
 80008b8:	f003 fb60 	bl	8003f7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80008bc:	f24c 7303 	movw	r3, #50947	; 0xc703
 80008c0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ce:	230c      	movs	r3, #12
 80008d0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	4619      	mov	r1, r3
 80008d6:	480f      	ldr	r0, [pc, #60]	; (8000914 <HAL_FMC_MspInit+0x134>)
 80008d8:	f003 fb50 	bl	8003f7c <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	2030      	movs	r0, #48	; 0x30
 80008e2:	f002 faaf 	bl	8002e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 80008e6:	2030      	movs	r0, #48	; 0x30
 80008e8:	f002 fac6 	bl	8002e78 <HAL_NVIC_EnableIRQ>
 80008ec:	e000      	b.n	80008f0 <HAL_FMC_MspInit+0x110>
    return;
 80008ee:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	240001f0 	.word	0x240001f0
 80008fc:	58024400 	.word	0x58024400
 8000900:	58021400 	.word	0x58021400
 8000904:	58020800 	.word	0x58020800
 8000908:	58020000 	.word	0x58020000
 800090c:	58021800 	.word	0x58021800
 8000910:	58021000 	.word	0x58021000
 8000914:	58020c00 	.word	0x58020c00

08000918 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000920:	f7ff ff5e 	bl	80007e0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000942:	4b63      	ldr	r3, [pc, #396]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000948:	4a61      	ldr	r2, [pc, #388]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000952:	4b5f      	ldr	r3, [pc, #380]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000958:	f003 0310 	and.w	r3, r3, #16
 800095c:	623b      	str	r3, [r7, #32]
 800095e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000960:	4b5b      	ldr	r3, [pc, #364]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000966:	4a5a      	ldr	r2, [pc, #360]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000968:	f043 0320 	orr.w	r3, r3, #32
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000970:	4b57      	ldr	r3, [pc, #348]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000976:	f003 0320 	and.w	r3, r3, #32
 800097a:	61fb      	str	r3, [r7, #28]
 800097c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	4b54      	ldr	r3, [pc, #336]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000984:	4a52      	ldr	r2, [pc, #328]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098e:	4b50      	ldr	r3, [pc, #320]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	4b4c      	ldr	r3, [pc, #304]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a2:	4a4b      	ldr	r2, [pc, #300]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ac:	4b48      	ldr	r3, [pc, #288]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b45      	ldr	r3, [pc, #276]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	4a43      	ldr	r2, [pc, #268]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ca:	4b41      	ldr	r3, [pc, #260]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d8:	4b3d      	ldr	r3, [pc, #244]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	4a3c      	ldr	r2, [pc, #240]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e8:	4b39      	ldr	r3, [pc, #228]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f6:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	4a34      	ldr	r2, [pc, #208]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 80009fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a06:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a14:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	4a2d      	ldr	r2, [pc, #180]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a24:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_TPS_Pin|ISEL_TPS_Pin|EN_MT3608_Pin|ERROR_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a38:	4826      	ldr	r0, [pc, #152]	; (8000ad4 <MX_GPIO_Init+0x1a8>)
 8000a3a:	f003 fc4f 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HVR_GPIO_Port, HVR_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a44:	4824      	ldr	r0, [pc, #144]	; (8000ad8 <MX_GPIO_Init+0x1ac>)
 8000a46:	f003 fc49 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_EN_Pin|SHTDN_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 8000a50:	4822      	ldr	r0, [pc, #136]	; (8000adc <MX_GPIO_Init+0x1b0>)
 8000a52:	f003 fc43 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP1_Pin;
 8000a56:	2310      	movs	r3, #16
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TEMP1_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	4619      	mov	r1, r3
 8000a68:	481d      	ldr	r0, [pc, #116]	; (8000ae0 <MX_GPIO_Init+0x1b4>)
 8000a6a:	f003 fa87 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EN_TPS_Pin|ISEL_TPS_Pin|EN_MT3608_Pin|ERROR_Pin;
 8000a6e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <MX_GPIO_Init+0x1a8>)
 8000a88:	f003 fa78 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HVR_Pin;
 8000a8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HVR_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <MX_GPIO_Init+0x1ac>)
 8000aa6:	f003 fa69 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BL_EN_Pin|SHTDN_Pin;
 8000aaa:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <MX_GPIO_Init+0x1b0>)
 8000ac4:	f003 fa5a 	bl	8003f7c <HAL_GPIO_Init>

}
 8000ac8:	bf00      	nop
 8000aca:	3738      	adds	r7, #56	; 0x38
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	58024400 	.word	0x58024400
 8000ad4:	58020400 	.word	0x58020400
 8000ad8:	58020c00 	.word	0x58020c00
 8000adc:	58020000 	.word	0x58020000
 8000ae0:	58020800 	.word	0x58020800

08000ae4 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <MX_I2C4_Init+0x78>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00B03FDB;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <MX_I2C4_Init+0x7c>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b1e:	480e      	ldr	r0, [pc, #56]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b20:	f003 fbf6 	bl	8004310 <HAL_I2C_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b2a:	f000 fc6d 	bl	8001408 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b32:	f004 fa73 	bl	800501c <HAL_I2CEx_ConfigAnalogFilter>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b3c:	f000 fc64 	bl	8001408 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b44:	f004 fab5 	bl	80050b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 fc5b 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	240001f4 	.word	0x240001f4
 8000b5c:	58001c00 	.word	0x58001c00
 8000b60:	00b03fdb 	.word	0x00b03fdb

08000b64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0b8      	sub	sp, #224	; 0xe0
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	22bc      	movs	r2, #188	; 0xbc
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f009 fb11 	bl	800a1ac <memset>
  if(i2cHandle->Instance==I2C4)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a29      	ldr	r2, [pc, #164]	; (8000c34 <HAL_I2C_MspInit+0xd0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d14a      	bne.n	8000c2a <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000b94:	2310      	movs	r3, #16
 8000b96:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f005 fe5c 	bl	8006860 <HAL_RCCEx_PeriphCLKConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bae:	f000 fc2b 	bl	8001408 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <HAL_I2C_MspInit+0xd4>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <HAL_I2C_MspInit+0xd4>)
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <HAL_I2C_MspInit+0xd4>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	f003 0308 	and.w	r3, r3, #8
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000bd0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd8:	2312      	movs	r3, #18
 8000bda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000bea:	2304      	movs	r3, #4
 8000bec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4811      	ldr	r0, [pc, #68]	; (8000c3c <HAL_I2C_MspInit+0xd8>)
 8000bf8:	f003 f9c0 	bl	8003f7c <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_I2C_MspInit+0xd4>)
 8000bfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c02:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_I2C_MspInit+0xd4>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_I2C_MspInit+0xd4>)
 8000c0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	205f      	movs	r0, #95	; 0x5f
 8000c20:	f002 f910 	bl	8002e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8000c24:	205f      	movs	r0, #95	; 0x5f
 8000c26:	f002 f927 	bl	8002e78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	37e0      	adds	r7, #224	; 0xe0
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	58001c00 	.word	0x58001c00
 8000c38:	58024400 	.word	0x58024400
 8000c3c:	58020c00 	.word	0x58020c00

08000c40 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2234      	movs	r2, #52	; 0x34
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f009 faad 	bl	800a1ac <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c52:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c54:	4a3a      	ldr	r2, [pc, #232]	; (8000d40 <MX_LTDC_Init+0x100>)
 8000c56:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c58:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c6a:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 32;
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c72:	2220      	movs	r2, #32
 8000c74:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 5;
 8000c76:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c78:	2205      	movs	r2, #5
 8000c7a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 112;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c7e:	2270      	movs	r2, #112	; 0x70
 8000c80:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 18;
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c84:	2212      	movs	r2, #18
 8000c86:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1392;
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c8a:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 738;
 8000c90:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c92:	f240 22e2 	movw	r2, #738	; 0x2e2
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1440;
 8000c98:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c9a:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 741;
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000ca2:	f240 22e5 	movw	r2, #741	; 0x2e5
 8000ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cc0:	481e      	ldr	r0, [pc, #120]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000cc2:	f004 fa43 	bl	800514c <HAL_LTDC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ccc:	f000 fb9c 	bl	8001408 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1280;
 8000cd4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000cd8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 720;
 8000cde:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8000ce2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ce8:	23ff      	movs	r3, #255	; 0xff
 8000cea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1280;
 8000cfe:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 720;
 8000d04:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000d24:	f004 fba4 	bl	8005470 <HAL_LTDC_ConfigLayer>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000d2e:	f000 fb6b 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	3738      	adds	r7, #56	; 0x38
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000240 	.word	0x24000240
 8000d40:	50001000 	.word	0x50001000

08000d44 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0be      	sub	sp, #248	; 0xf8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d60:	22bc      	movs	r2, #188	; 0xbc
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f009 fa21 	bl	800a1ac <memset>
  if(ltdcHandle->Instance==LTDC)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4ad9      	ldr	r2, [pc, #868]	; (80010d4 <HAL_LTDC_MspInit+0x390>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	f040 81aa 	bne.w	80010ca <HAL_LTDC_MspInit+0x386>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d76:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3N = 32;
 8000d80:	2320      	movs	r3, #32
 8000d82:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000d90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d94:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	4618      	mov	r0, r3
 8000da4:	f005 fd5c 	bl	8006860 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000dae:	f000 fb2b 	bl	8001408 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000db2:	4bc9      	ldr	r3, [pc, #804]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000db4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000db8:	4ac7      	ldr	r2, [pc, #796]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000dc2:	4bc5      	ldr	r3, [pc, #788]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000dc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd0:	4bc1      	ldr	r3, [pc, #772]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	4ac0      	ldr	r2, [pc, #768]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de0:	4bbd      	ldr	r3, [pc, #756]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dee:	4bba      	ldr	r3, [pc, #744]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	4ab8      	ldr	r2, [pc, #736]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000df6:	f043 0320 	orr.w	r3, r3, #32
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfe:	4bb6      	ldr	r3, [pc, #728]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	f003 0320 	and.w	r3, r3, #32
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0c:	4bb2      	ldr	r3, [pc, #712]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	4ab1      	ldr	r2, [pc, #708]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1c:	4bae      	ldr	r3, [pc, #696]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4bab      	ldr	r3, [pc, #684]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	4aa9      	ldr	r2, [pc, #676]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3a:	4ba7      	ldr	r3, [pc, #668]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4ba3      	ldr	r3, [pc, #652]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	4aa2      	ldr	r2, [pc, #648]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e58:	4b9f      	ldr	r3, [pc, #636]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e66:	4b9c      	ldr	r3, [pc, #624]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	4a9a      	ldr	r2, [pc, #616]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e76:	4b98      	ldr	r3, [pc, #608]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e84:	4b94      	ldr	r3, [pc, #592]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8a:	4a93      	ldr	r2, [pc, #588]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e94:	4b90      	ldr	r3, [pc, #576]	; (80010d8 <HAL_LTDC_MspInit+0x394>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ea2:	2370      	movs	r3, #112	; 0x70
 8000ea4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eba:	230e      	movs	r3, #14
 8000ebc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4885      	ldr	r0, [pc, #532]	; (80010dc <HAL_LTDC_MspInit+0x398>)
 8000ec8:	f003 f858 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ee6:	230e      	movs	r3, #14
 8000ee8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	487b      	ldr	r0, [pc, #492]	; (80010e0 <HAL_LTDC_MspInit+0x39c>)
 8000ef4:	f003 f842 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000ef8:	f240 43c1 	movw	r3, #1217	; 0x4c1
 8000efc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f12:	230e      	movs	r3, #14
 8000f14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4871      	ldr	r0, [pc, #452]	; (80010e4 <HAL_LTDC_MspInit+0x3a0>)
 8000f20:	f003 f82c 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000f24:	f240 437c 	movw	r3, #1148	; 0x47c
 8000f28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f3e:	230e      	movs	r3, #14
 8000f40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4867      	ldr	r0, [pc, #412]	; (80010e8 <HAL_LTDC_MspInit+0x3a4>)
 8000f4c:	f003 f816 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f50:	2303      	movs	r3, #3
 8000f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f68:	2309      	movs	r3, #9
 8000f6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f72:	4619      	mov	r1, r3
 8000f74:	485d      	ldr	r0, [pc, #372]	; (80010ec <HAL_LTDC_MspInit+0x3a8>)
 8000f76:	f003 f801 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000f7a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f94:	230e      	movs	r3, #14
 8000f96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4852      	ldr	r0, [pc, #328]	; (80010ec <HAL_LTDC_MspInit+0x3a8>)
 8000fa2:	f002 ffeb 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_13;
 8000fa6:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fc0:	230e      	movs	r3, #14
 8000fc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fc6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4848      	ldr	r0, [pc, #288]	; (80010f0 <HAL_LTDC_MspInit+0x3ac>)
 8000fce:	f002 ffd5 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fea:	230e      	movs	r3, #14
 8000fec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ff0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	483e      	ldr	r0, [pc, #248]	; (80010f0 <HAL_LTDC_MspInit+0x3ac>)
 8000ff8:	f002 ffc0 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
 8001016:	230a      	movs	r3, #10
 8001018:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001020:	4619      	mov	r1, r3
 8001022:	4830      	ldr	r0, [pc, #192]	; (80010e4 <HAL_LTDC_MspInit+0x3a0>)
 8001024:	f002 ffaa 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001042:	230d      	movs	r3, #13
 8001044:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800104c:	4619      	mov	r1, r3
 800104e:	4826      	ldr	r0, [pc, #152]	; (80010e8 <HAL_LTDC_MspInit+0x3a4>)
 8001050:	f002 ff94 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001054:	2348      	movs	r3, #72	; 0x48
 8001056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800106c:	230e      	movs	r3, #14
 800106e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001072:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001076:	4619      	mov	r1, r3
 8001078:	481e      	ldr	r0, [pc, #120]	; (80010f4 <HAL_LTDC_MspInit+0x3b0>)
 800107a:	f002 ff7f 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800107e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001098:	2309      	movs	r3, #9
 800109a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4812      	ldr	r0, [pc, #72]	; (80010f0 <HAL_LTDC_MspInit+0x3ac>)
 80010a6:	f002 ff69 	bl	8003f7c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	2058      	movs	r0, #88	; 0x58
 80010b0:	f001 fec8 	bl	8002e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010b4:	2058      	movs	r0, #88	; 0x58
 80010b6:	f001 fedf 	bl	8002e78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2059      	movs	r0, #89	; 0x59
 80010c0:	f001 fec0 	bl	8002e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80010c4:	2059      	movs	r0, #89	; 0x59
 80010c6:	f001 fed7 	bl	8002e78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80010ca:	bf00      	nop
 80010cc:	37f8      	adds	r7, #248	; 0xf8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	50001000 	.word	0x50001000
 80010d8:	58024400 	.word	0x58024400
 80010dc:	58021000 	.word	0x58021000
 80010e0:	58021400 	.word	0x58021400
 80010e4:	58020800 	.word	0x58020800
 80010e8:	58020000 	.word	0x58020000
 80010ec:	58020400 	.word	0x58020400
 80010f0:	58021800 	.word	0x58021800
 80010f4:	58020c00 	.word	0x58020c00

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80010fe:	4b45      	ldr	r3, [pc, #276]	; (8001214 <main+0x11c>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d11b      	bne.n	8001142 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800110a:	f3bf 8f4f 	dsb	sy
}
 800110e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001110:	f3bf 8f6f 	isb	sy
}
 8001114:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001116:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <main+0x11c>)
 8001118:	2200      	movs	r2, #0
 800111a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800111e:	f3bf 8f4f 	dsb	sy
}
 8001122:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001124:	f3bf 8f6f 	isb	sy
}
 8001128:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800112a:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <main+0x11c>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	4a39      	ldr	r2, [pc, #228]	; (8001214 <main+0x11c>)
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001136:	f3bf 8f4f 	dsb	sy
}
 800113a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800113c:	f3bf 8f6f 	isb	sy
}
 8001140:	e000      	b.n	8001144 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001142:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001144:	4b33      	ldr	r3, [pc, #204]	; (8001214 <main+0x11c>)
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d138      	bne.n	80011c2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <main+0x11c>)
 8001152:	2200      	movs	r2, #0
 8001154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001158:	f3bf 8f4f 	dsb	sy
}
 800115c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <main+0x11c>)
 8001160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001164:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	0b5b      	lsrs	r3, r3, #13
 800116a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800116e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	08db      	lsrs	r3, r3, #3
 8001174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001178:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	015a      	lsls	r2, r3, #5
 800117e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001182:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001188:	4922      	ldr	r1, [pc, #136]	; (8001214 <main+0x11c>)
 800118a:	4313      	orrs	r3, r2
 800118c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	1e5a      	subs	r2, r3, #1
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1ef      	bne.n	800117a <main+0x82>
    } while(sets-- != 0U);
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1e5a      	subs	r2, r3, #1
 800119e:	60ba      	str	r2, [r7, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1e5      	bne.n	8001170 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80011a4:	f3bf 8f4f 	dsb	sy
}
 80011a8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <main+0x11c>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a19      	ldr	r2, [pc, #100]	; (8001214 <main+0x11c>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011b6:	f3bf 8f4f 	dsb	sy
}
 80011ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011bc:	f3bf 8f6f 	isb	sy
}
 80011c0:	e000      	b.n	80011c4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80011c2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f000 fc6e 	bl	8001aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f828 	bl	800121c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011cc:	f000 f8dc 	bl	8001388 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d0:	f7ff fbac 	bl	800092c <MX_GPIO_Init>
  MX_CRC_Init();
 80011d4:	f7ff f940 	bl	8000458 <MX_CRC_Init>
  MX_FMC_Init();
 80011d8:	f7ff fab0 	bl	800073c <MX_FMC_Init>
  MX_LTDC_Init();
 80011dc:	f7ff fd30 	bl	8000c40 <MX_LTDC_Init>
  MX_DMA2D_Init();
 80011e0:	f7ff f97e 	bl	80004e0 <MX_DMA2D_Init>
  MX_ADC1_Init();
 80011e4:	f7ff f878 	bl	80002d8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80011e8:	f000 fa96 	bl	8001718 <MX_TIM2_Init>
  MX_FDCAN1_Init();
 80011ec:	f7ff f9d4 	bl	8000598 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 80011f0:	f7ff fc78 	bl	8000ae4 <MX_I2C4_Init>
  MX_TIM3_Init();
 80011f4:	f000 fb14 	bl	8001820 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  isl76682_init(0x44 << 1);
 80011f8:	2088      	movs	r0, #136	; 0x88
 80011fa:	f008 ff21 	bl	800a040 <isl76682_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status = isl76682_read(0x44 << 1);
 80011fe:	2088      	movs	r0, #136	; 0x88
 8001200:	f008 ff56 	bl	800a0b0 <isl76682_read>
 8001204:	4603      	mov	r3, r0
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <main+0x120>)
 8001208:	6013      	str	r3, [r2, #0]

	  HAL_Delay(1000);
 800120a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120e:	f000 fca5 	bl	8001b5c <HAL_Delay>
	  status = isl76682_read(0x44 << 1);
 8001212:	e7f4      	b.n	80011fe <main+0x106>
 8001214:	e000ed00 	.word	0xe000ed00
 8001218:	240002e8 	.word	0x240002e8

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b09e      	sub	sp, #120	; 0x78
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001226:	224c      	movs	r2, #76	; 0x4c
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f008 ffbe 	bl	800a1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2220      	movs	r2, #32
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f008 ffb7 	bl	800a1ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800123e:	2002      	movs	r0, #2
 8001240:	f004 faee 	bl	8005820 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	4b4c      	ldr	r3, [pc, #304]	; (800137c <SystemClock_Config+0x160>)
 800124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124c:	4a4b      	ldr	r2, [pc, #300]	; (800137c <SystemClock_Config+0x160>)
 800124e:	f023 0301 	bic.w	r3, r3, #1
 8001252:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001254:	4b49      	ldr	r3, [pc, #292]	; (800137c <SystemClock_Config+0x160>)
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b48      	ldr	r3, [pc, #288]	; (8001380 <SystemClock_Config+0x164>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4a47      	ldr	r2, [pc, #284]	; (8001380 <SystemClock_Config+0x164>)
 8001264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001268:	6193      	str	r3, [r2, #24]
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <SystemClock_Config+0x164>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001276:	bf00      	nop
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <SystemClock_Config+0x164>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001284:	d1f8      	bne.n	8001278 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <SystemClock_Config+0x168>)
 8001288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800128c:	4a3d      	ldr	r2, [pc, #244]	; (8001384 <SystemClock_Config+0x168>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <SystemClock_Config+0x168>)
 8001298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	4b35      	ldr	r3, [pc, #212]	; (8001380 <SystemClock_Config+0x164>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a34      	ldr	r2, [pc, #208]	; (8001380 <SystemClock_Config+0x164>)
 80012ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b32      	ldr	r3, [pc, #200]	; (8001380 <SystemClock_Config+0x164>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <SystemClock_Config+0x160>)
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	4a2e      	ldr	r2, [pc, #184]	; (800137c <SystemClock_Config+0x160>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80012ca:	4b2c      	ldr	r3, [pc, #176]	; (800137c <SystemClock_Config+0x160>)
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012d6:	bf00      	nop
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <SystemClock_Config+0x164>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012e4:	d1f8      	bne.n	80012d8 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <SystemClock_Config+0x168>)
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	4a25      	ldr	r2, [pc, #148]	; (8001384 <SystemClock_Config+0x168>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f6:	2301      	movs	r3, #1
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	2302      	movs	r3, #2
 8001302:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001304:	2302      	movs	r3, #2
 8001306:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001308:	2301      	movs	r3, #1
 800130a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 800130c:	2378      	movs	r3, #120	; 0x78
 800130e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001310:	2302      	movs	r3, #2
 8001312:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001318:	2302      	movs	r3, #2
 800131a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800131c:	230c      	movs	r3, #12
 800131e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001320:	2300      	movs	r3, #0
 8001322:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fab1 	bl	8005894 <HAL_RCC_OscConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001338:	f000 f866 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133c:	233f      	movs	r3, #63	; 0x3f
 800133e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001340:	2303      	movs	r3, #3
 8001342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001348:	2308      	movs	r3, #8
 800134a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800134c:	2340      	movs	r3, #64	; 0x40
 800134e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001350:	2340      	movs	r3, #64	; 0x40
 8001352:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800135a:	2340      	movs	r3, #64	; 0x40
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2104      	movs	r1, #4
 8001364:	4618      	mov	r0, r3
 8001366:	f004 fec3 	bl	80060f0 <HAL_RCC_ClockConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8001370:	f000 f84a 	bl	8001408 <Error_Handler>
  }
}
 8001374:	bf00      	nop
 8001376:	3778      	adds	r7, #120	; 0x78
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	58000400 	.word	0x58000400
 8001380:	58024800 	.word	0x58024800
 8001384:	58024400 	.word	0x58024400

08001388 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b0b0      	sub	sp, #192	; 0xc0
 800138c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	22bc      	movs	r2, #188	; 0xbc
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f008 ff09 	bl	800a1ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_ADC;
 800139a:	f04f 7384 	mov.w	r3, #17301504	; 0x1080000
 800139e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 133;
 80013a4:	2385      	movs	r3, #133	; 0x85
 80013a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80013a8:	2304      	movs	r3, #4
 80013aa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 8;
 80013ac:	2308      	movs	r3, #8
 80013ae:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4618      	mov	r0, r3
 80013ce:	f005 fa47 	bl	8006860 <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80013d8:	f000 f816 	bl	8001408 <Error_Handler>
  }
}
 80013dc:	bf00      	nop
 80013de:	37c0      	adds	r7, #192	; 0xc0
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013f6:	f000 fb91 	bl	8001b1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40010000 	.word	0x40010000

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	e7fe      	b.n	8001410 <Error_Handler+0x8>
	...

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_MspInit+0x3c>)
 800141c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001420:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <HAL_MspInit+0x3c>)
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_MspInit+0x3c>)
 800142c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	2005      	movs	r0, #5
 800143e:	f001 fd01 	bl	8002e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001442:	2005      	movs	r0, #5
 8001444:	f001 fd18 	bl	8002e78 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	58024400 	.word	0x58024400

08001454 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	d844      	bhi.n	80014ec <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001462:	2200      	movs	r2, #0
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	2019      	movs	r0, #25
 8001468:	f001 fcec 	bl	8002e44 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800146c:	2019      	movs	r0, #25
 800146e:	f001 fd03 	bl	8002e78 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001472:	4a24      	ldr	r2, [pc, #144]	; (8001504 <HAL_InitTick+0xb0>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_InitTick+0xb4>)
 800147a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800147e:	4a22      	ldr	r2, [pc, #136]	; (8001508 <HAL_InitTick+0xb4>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <HAL_InitTick+0xb4>)
 800148a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001496:	f107 020c 	add.w	r2, r7, #12
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f005 f99b 	bl	80067dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80014a6:	f005 f983 	bl	80067b0 <HAL_RCC_GetPCLK2Freq>
 80014aa:	4603      	mov	r3, r0
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b2:	4a16      	ldr	r2, [pc, #88]	; (800150c <HAL_InitTick+0xb8>)
 80014b4:	fba2 2303 	umull	r2, r3, r2, r3
 80014b8:	0c9b      	lsrs	r3, r3, #18
 80014ba:	3b01      	subs	r3, #1
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_InitTick+0xbc>)
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <HAL_InitTick+0xc0>)
 80014c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_InitTick+0xbc>)
 80014c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ca:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014cc:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_InitTick+0xbc>)
 80014ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_InitTick+0xbc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_InitTick+0xbc>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <HAL_InitTick+0xbc>)
 80014e0:	f007 fbaa 	bl	8008c38 <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d107      	bne.n	80014fa <HAL_InitTick+0xa6>
 80014ea:	e001      	b.n	80014f0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e005      	b.n	80014fc <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <HAL_InitTick+0xbc>)
 80014f2:	f007 fbf9 	bl	8008ce8 <HAL_TIM_Base_Start_IT>
 80014f6:	4603      	mov	r3, r0
 80014f8:	e000      	b.n	80014fc <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3738      	adds	r7, #56	; 0x38
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	24000008 	.word	0x24000008
 8001508:	58024400 	.word	0x58024400
 800150c:	431bde83 	.word	0x431bde83
 8001510:	240002ec 	.word	0x240002ec
 8001514:	40010000 	.word	0x40010000

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <FDCAN1_IT0_IRQHandler+0x10>)
 8001582:	f002 f861 	bl	8003648 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2400011c 	.word	0x2400011c

08001590 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM1_UP_IRQHandler+0x10>)
 8001596:	f007 fc80 	bl	8008e9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	240002ec 	.word	0x240002ec

080015a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM2_IRQHandler+0x10>)
 80015aa:	f007 fc76 	bl	8008e9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	24000338 	.word	0x24000338

080015b8 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <FMC_IRQHandler+0x10>)
 80015be:	f007 fb17 	bl	8008bf0 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	240001bc 	.word	0x240001bc

080015cc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <LTDC_IRQHandler+0x10>)
 80015d2:	f003 fe8b 	bl	80052ec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	24000240 	.word	0x24000240

080015e0 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <LTDC_ER_IRQHandler+0x10>)
 80015e6:	f003 fe81 	bl	80052ec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	24000240 	.word	0x24000240

080015f4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <I2C4_EV_IRQHandler+0x10>)
 80015fa:	f003 fa4f 	bl	8004a9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	240001f4 	.word	0x240001f4

08001608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800160c:	4b37      	ldr	r3, [pc, #220]	; (80016ec <SystemInit+0xe4>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a36      	ldr	r2, [pc, #216]	; (80016ec <SystemInit+0xe4>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800161c:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <SystemInit+0xe8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	2b06      	cmp	r3, #6
 8001626:	d807      	bhi.n	8001638 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001628:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <SystemInit+0xe8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f023 030f 	bic.w	r3, r3, #15
 8001630:	4a2f      	ldr	r2, [pc, #188]	; (80016f0 <SystemInit+0xe8>)
 8001632:	f043 0307 	orr.w	r3, r3, #7
 8001636:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <SystemInit+0xec>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <SystemInit+0xec>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <SystemInit+0xec>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800164a:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <SystemInit+0xec>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4929      	ldr	r1, [pc, #164]	; (80016f4 <SystemInit+0xec>)
 8001650:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <SystemInit+0xf0>)
 8001652:	4013      	ands	r3, r2
 8001654:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <SystemInit+0xe8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d007      	beq.n	8001672 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <SystemInit+0xe8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 030f 	bic.w	r3, r3, #15
 800166a:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <SystemInit+0xe8>)
 800166c:	f043 0307 	orr.w	r3, r3, #7
 8001670:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <SystemInit+0xec>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <SystemInit+0xec>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <SystemInit+0xec>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <SystemInit+0xec>)
 8001686:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <SystemInit+0xf4>)
 8001688:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <SystemInit+0xec>)
 800168c:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <SystemInit+0xf8>)
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <SystemInit+0xec>)
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <SystemInit+0xfc>)
 8001694:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <SystemInit+0xec>)
 8001698:	2200      	movs	r2, #0
 800169a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <SystemInit+0xec>)
 800169e:	4a19      	ldr	r2, [pc, #100]	; (8001704 <SystemInit+0xfc>)
 80016a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <SystemInit+0xec>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <SystemInit+0xec>)
 80016aa:	4a16      	ldr	r2, [pc, #88]	; (8001704 <SystemInit+0xfc>)
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <SystemInit+0xec>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <SystemInit+0xec>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <SystemInit+0xec>)
 80016ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <SystemInit+0xec>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <SystemInit+0x100>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <SystemInit+0x104>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016d2:	d202      	bcs.n	80016da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <SystemInit+0x108>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <SystemInit+0x10c>)
 80016dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00
 80016f0:	52002000 	.word	0x52002000
 80016f4:	58024400 	.word	0x58024400
 80016f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80016fc:	02020200 	.word	0x02020200
 8001700:	01ff0000 	.word	0x01ff0000
 8001704:	01010280 	.word	0x01010280
 8001708:	5c001000 	.word	0x5c001000
 800170c:	ffff0000 	.word	0xffff0000
 8001710:	51008108 	.word	0x51008108
 8001714:	52004000 	.word	0x52004000

08001718 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08e      	sub	sp, #56	; 0x38
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001738:	463b      	mov	r3, r7
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	615a      	str	r2, [r3, #20]
 8001748:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800174a:	4b34      	ldr	r3, [pc, #208]	; (800181c <MX_TIM2_Init+0x104>)
 800174c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001750:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001752:	4b32      	ldr	r3, [pc, #200]	; (800181c <MX_TIM2_Init+0x104>)
 8001754:	22ef      	movs	r2, #239	; 0xef
 8001756:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b30      	ldr	r3, [pc, #192]	; (800181c <MX_TIM2_Init+0x104>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 800175e:	4b2f      	ldr	r3, [pc, #188]	; (800181c <MX_TIM2_Init+0x104>)
 8001760:	f241 3287 	movw	r2, #4999	; 0x1387
 8001764:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <MX_TIM2_Init+0x104>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <MX_TIM2_Init+0x104>)
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001772:	482a      	ldr	r0, [pc, #168]	; (800181c <MX_TIM2_Init+0x104>)
 8001774:	f007 fa60 	bl	8008c38 <HAL_TIM_Base_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800177e:	f7ff fe43 	bl	8001408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178c:	4619      	mov	r1, r3
 800178e:	4823      	ldr	r0, [pc, #140]	; (800181c <MX_TIM2_Init+0x104>)
 8001790:	f007 fdb6 	bl	8009300 <HAL_TIM_ConfigClockSource>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800179a:	f7ff fe35 	bl	8001408 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800179e:	481f      	ldr	r0, [pc, #124]	; (800181c <MX_TIM2_Init+0x104>)
 80017a0:	f007 fb1a 	bl	8008dd8 <HAL_TIM_PWM_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80017aa:	f7ff fe2d 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80017ae:	2310      	movs	r3, #16
 80017b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	4619      	mov	r1, r3
 80017bc:	4817      	ldr	r0, [pc, #92]	; (800181c <MX_TIM2_Init+0x104>)
 80017be:	f008 facd 	bl	8009d5c <HAL_TIMEx_MasterConfigSynchronization>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80017c8:	f7ff fe1e 	bl	8001408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017cc:	2360      	movs	r3, #96	; 0x60
 80017ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	480e      	ldr	r0, [pc, #56]	; (800181c <MX_TIM2_Init+0x104>)
 80017e4:	f007 fc78 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80017ee:	f7ff fe0b 	bl	8001408 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80017f2:	2304      	movs	r3, #4
 80017f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f6:	463b      	mov	r3, r7
 80017f8:	2204      	movs	r2, #4
 80017fa:	4619      	mov	r1, r3
 80017fc:	4807      	ldr	r0, [pc, #28]	; (800181c <MX_TIM2_Init+0x104>)
 80017fe:	f007 fc6b 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8001808:	f7ff fdfe 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <MX_TIM2_Init+0x104>)
 800180e:	f000 f8bd 	bl	800198c <HAL_TIM_MspPostInit>

}
 8001812:	bf00      	nop
 8001814:	3738      	adds	r7, #56	; 0x38
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	24000338 	.word	0x24000338

08001820 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001840:	463b      	mov	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	615a      	str	r2, [r3, #20]
 8001850:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <MX_TIM3_Init+0xe8>)
 8001854:	4a2d      	ldr	r2, [pc, #180]	; (800190c <MX_TIM3_Init+0xec>)
 8001856:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <MX_TIM3_Init+0xe8>)
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <MX_TIM3_Init+0xe8>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001864:	4b28      	ldr	r3, [pc, #160]	; (8001908 <MX_TIM3_Init+0xe8>)
 8001866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800186a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b26      	ldr	r3, [pc, #152]	; (8001908 <MX_TIM3_Init+0xe8>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <MX_TIM3_Init+0xe8>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001878:	4823      	ldr	r0, [pc, #140]	; (8001908 <MX_TIM3_Init+0xe8>)
 800187a:	f007 f9dd 	bl	8008c38 <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001884:	f7ff fdc0 	bl	8001408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800188e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001892:	4619      	mov	r1, r3
 8001894:	481c      	ldr	r0, [pc, #112]	; (8001908 <MX_TIM3_Init+0xe8>)
 8001896:	f007 fd33 	bl	8009300 <HAL_TIM_ConfigClockSource>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80018a0:	f7ff fdb2 	bl	8001408 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018a4:	4818      	ldr	r0, [pc, #96]	; (8001908 <MX_TIM3_Init+0xe8>)
 80018a6:	f007 fa97 	bl	8008dd8 <HAL_TIM_PWM_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80018b0:	f7ff fdaa 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	4811      	ldr	r0, [pc, #68]	; (8001908 <MX_TIM3_Init+0xe8>)
 80018c4:	f008 fa4a 	bl	8009d5c <HAL_TIMEx_MasterConfigSynchronization>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018ce:	f7ff fd9b 	bl	8001408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d2:	2360      	movs	r3, #96	; 0x60
 80018d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	2208      	movs	r2, #8
 80018e6:	4619      	mov	r1, r3
 80018e8:	4807      	ldr	r0, [pc, #28]	; (8001908 <MX_TIM3_Init+0xe8>)
 80018ea:	f007 fbf5 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80018f4:	f7ff fd88 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018f8:	4803      	ldr	r0, [pc, #12]	; (8001908 <MX_TIM3_Init+0xe8>)
 80018fa:	f000 f847 	bl	800198c <HAL_TIM_MspPostInit>

}
 80018fe:	bf00      	nop
 8001900:	3738      	adds	r7, #56	; 0x38
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	24000384 	.word	0x24000384
 800190c:	40000400 	.word	0x40000400

08001910 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001920:	d117      	bne.n	8001952 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_TIM_Base_MspInit+0x74>)
 8001924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001928:	4a16      	ldr	r2, [pc, #88]	; (8001984 <HAL_TIM_Base_MspInit+0x74>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_TIM_Base_MspInit+0x74>)
 8001934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	201c      	movs	r0, #28
 8001946:	f001 fa7d 	bl	8002e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800194a:	201c      	movs	r0, #28
 800194c:	f001 fa94 	bl	8002e78 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001950:	e013      	b.n	800197a <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM3)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <HAL_TIM_Base_MspInit+0x78>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d10e      	bne.n	800197a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_TIM_Base_MspInit+0x74>)
 800195e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_TIM_Base_MspInit+0x74>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_TIM_Base_MspInit+0x74>)
 800196e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	58024400 	.word	0x58024400
 8001988:	40000400 	.word	0x40000400

0800198c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ac:	d11f      	bne.n	80019ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_TIM_MspPostInit+0xb4>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b4:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <HAL_TIM_MspPostInit+0xb4>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_TIM_MspPostInit+0xb4>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LED_KIRI_Pin|LED_KANAN_Pin;
 80019cc:	2303      	movs	r3, #3
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	4817      	ldr	r0, [pc, #92]	; (8001a44 <HAL_TIM_MspPostInit+0xb8>)
 80019e8:	f002 fac8 	bl	8003f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019ec:	e024      	b.n	8001a38 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <HAL_TIM_MspPostInit+0xbc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d11f      	bne.n	8001a38 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_TIM_MspPostInit+0xb4>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_TIM_MspPostInit+0xb4>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a08:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_TIM_MspPostInit+0xb4>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BL_DIM_Pin;
 8001a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BL_DIM_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	4806      	ldr	r0, [pc, #24]	; (8001a4c <HAL_TIM_MspPostInit+0xc0>)
 8001a34:	f002 faa2 	bl	8003f7c <HAL_GPIO_Init>
}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	58024400 	.word	0x58024400
 8001a44:	58020000 	.word	0x58020000
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	58020800 	.word	0x58020800

08001a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a54:	f7ff fdd8 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a5a:	490d      	ldr	r1, [pc, #52]	; (8001a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a60:	e002      	b.n	8001a68 <LoopCopyDataInit>

08001a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a66:	3304      	adds	r3, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a6c:	d3f9      	bcc.n	8001a62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a70:	4c0a      	ldr	r4, [pc, #40]	; (8001a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a74:	e001      	b.n	8001a7a <LoopFillZerobss>

08001a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a78:	3204      	adds	r2, #4

08001a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a7c:	d3fb      	bcc.n	8001a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a7e:	f008 fb63 	bl	800a148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a82:	f7ff fb39 	bl	80010f8 <main>
  bx  lr
 8001a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a88:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a90:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001a94:	0800a238 	.word	0x0800a238
  ldr r2, =_sbss
 8001a98:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001a9c:	240003d8 	.word	0x240003d8

08001aa0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC3_IRQHandler>
	...

08001aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aaa:	2003      	movs	r0, #3
 8001aac:	f001 f9bf 	bl	8002e2e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ab0:	f004 fcd4 	bl	800645c <HAL_RCC_GetSysClockFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_Init+0x68>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	4913      	ldr	r1, [pc, #76]	; (8001b10 <HAL_Init+0x6c>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_Init+0x68>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <HAL_Init+0x6c>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <HAL_Init+0x70>)
 8001ae6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <HAL_Init+0x74>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aee:	200f      	movs	r0, #15
 8001af0:	f7ff fcb0 	bl	8001454 <HAL_InitTick>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e002      	b.n	8001b04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001afe:	f7ff fc89 	bl	8001414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	58024400 	.word	0x58024400
 8001b10:	0800a220 	.word	0x0800a220
 8001b14:	24000004 	.word	0x24000004
 8001b18:	24000000 	.word	0x24000000

08001b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x20>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_IncTick+0x24>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_IncTick+0x24>)
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	2400000c 	.word	0x2400000c
 8001b40:	240003d0 	.word	0x240003d0

08001b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_GetTick+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	240003d0 	.word	0x240003d0

08001b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff ffee 	bl	8001b44 <HAL_GetTick>
 8001b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d005      	beq.n	8001b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_Delay+0x44>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b82:	bf00      	nop
 8001b84:	f7ff ffde 	bl	8001b44 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d8f7      	bhi.n	8001b84 <HAL_Delay+0x28>
  {
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2400000c 	.word	0x2400000c

08001ba4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_GetREVID+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0c1b      	lsrs	r3, r3, #16
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	5c001000 	.word	0x5c001000

08001bbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3360      	adds	r3, #96	; 0x60
 8001c36:	461a      	mov	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	430b      	orrs	r3, r1
 8001c52:	431a      	orrs	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001c58:	bf00      	nop
 8001c5a:	371c      	adds	r7, #28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	431a      	orrs	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	611a      	str	r2, [r3, #16]
}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b087      	sub	sp, #28
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3360      	adds	r3, #96	; 0x60
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	601a      	str	r2, [r3, #0]
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3330      	adds	r3, #48	; 0x30
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	4413      	add	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	211f      	movs	r1, #31
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	0e9b      	lsrs	r3, r3, #26
 8001d04:	f003 011f 	and.w	r1, r3, #31
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	431a      	orrs	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d18:	bf00      	nop
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3314      	adds	r3, #20
 8001d34:	461a      	mov	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	0e5b      	lsrs	r3, r3, #25
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	4413      	add	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	0d1b      	lsrs	r3, r3, #20
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2107      	movs	r1, #7
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	401a      	ands	r2, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	0d1b      	lsrs	r3, r3, #20
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d6e:	bf00      	nop
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d94:	43db      	mvns	r3, r3
 8001d96:	401a      	ands	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0318 	and.w	r3, r3, #24
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001da0:	40d9      	lsrs	r1, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	400b      	ands	r3, r1
 8001da6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001daa:	431a      	orrs	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	000fffff 	.word	0x000fffff

08001dc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6093      	str	r3, [r2, #8]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	5fffffc0 	.word	0x5fffffc0

08001de8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dfc:	d101      	bne.n	8001e02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	6fffffc0 	.word	0x6fffffc0

08001e38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e4c:	d101      	bne.n	8001e52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <LL_ADC_IsEnabled+0x18>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <LL_ADC_IsEnabled+0x1a>
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d101      	bne.n	8001e9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d101      	bne.n	8001ec4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e18f      	b.n	800220e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7fe fa65 	bl	80003cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff67 	bl	8001de8 <LL_ADC_IsDeepPowerDownEnabled>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d004      	beq.n	8001f2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff4d 	bl	8001dc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff82 	bl	8001e38 <LL_ADC_IsInternalRegulatorEnabled>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d114      	bne.n	8001f64 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff66 	bl	8001e10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f44:	4b87      	ldr	r3, [pc, #540]	; (8002164 <HAL_ADC_Init+0x290>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	099b      	lsrs	r3, r3, #6
 8001f4a:	4a87      	ldr	r2, [pc, #540]	; (8002168 <HAL_ADC_Init+0x294>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	099b      	lsrs	r3, r3, #6
 8001f52:	3301      	adds	r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f56:	e002      	b.n	8001f5e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f9      	bne.n	8001f58 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff65 	bl	8001e38 <LL_ADC_IsInternalRegulatorEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10d      	bne.n	8001f90 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f043 0210 	orr.w	r2, r3, #16
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff76 	bl	8001e86 <LL_ADC_REG_IsConversionOngoing>
 8001f9a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f040 8129 	bne.w	80021fc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 8125 	bne.w	80021fc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fba:	f043 0202 	orr.w	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff4a 	bl	8001e60 <LL_ADC_IsEnabled>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d136      	bne.n	8002040 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a65      	ldr	r2, [pc, #404]	; (800216c <HAL_ADC_Init+0x298>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d004      	beq.n	8001fe6 <HAL_ADC_Init+0x112>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a63      	ldr	r2, [pc, #396]	; (8002170 <HAL_ADC_Init+0x29c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10e      	bne.n	8002004 <HAL_ADC_Init+0x130>
 8001fe6:	4861      	ldr	r0, [pc, #388]	; (800216c <HAL_ADC_Init+0x298>)
 8001fe8:	f7ff ff3a 	bl	8001e60 <LL_ADC_IsEnabled>
 8001fec:	4604      	mov	r4, r0
 8001fee:	4860      	ldr	r0, [pc, #384]	; (8002170 <HAL_ADC_Init+0x29c>)
 8001ff0:	f7ff ff36 	bl	8001e60 <LL_ADC_IsEnabled>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4323      	orrs	r3, r4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	e008      	b.n	8002016 <HAL_ADC_Init+0x142>
 8002004:	485b      	ldr	r0, [pc, #364]	; (8002174 <HAL_ADC_Init+0x2a0>)
 8002006:	f7ff ff2b 	bl	8001e60 <LL_ADC_IsEnabled>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d012      	beq.n	8002040 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a53      	ldr	r2, [pc, #332]	; (800216c <HAL_ADC_Init+0x298>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d004      	beq.n	800202e <HAL_ADC_Init+0x15a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a51      	ldr	r2, [pc, #324]	; (8002170 <HAL_ADC_Init+0x29c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_ADC_Init+0x15e>
 800202e:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_ADC_Init+0x2a4>)
 8002030:	e000      	b.n	8002034 <HAL_ADC_Init+0x160>
 8002032:	4a52      	ldr	r2, [pc, #328]	; (800217c <HAL_ADC_Init+0x2a8>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4619      	mov	r1, r3
 800203a:	4610      	mov	r0, r2
 800203c:	f7ff fdbe 	bl	8001bbc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002040:	f7ff fdb0 	bl	8001ba4 <HAL_GetREVID>
 8002044:	4603      	mov	r3, r0
 8002046:	f241 0203 	movw	r2, #4099	; 0x1003
 800204a:	4293      	cmp	r3, r2
 800204c:	d914      	bls.n	8002078 <HAL_ADC_Init+0x1a4>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b10      	cmp	r3, #16
 8002054:	d110      	bne.n	8002078 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7d5b      	ldrb	r3, [r3, #21]
 800205a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002060:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002066:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7f1b      	ldrb	r3, [r3, #28]
 800206c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800206e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002070:	f043 030c 	orr.w	r3, r3, #12
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	e00d      	b.n	8002094 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7d5b      	ldrb	r3, [r3, #21]
 800207c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002082:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002088:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7f1b      	ldrb	r3, [r3, #28]
 800208e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7f1b      	ldrb	r3, [r3, #28]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d106      	bne.n	80020aa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	045b      	lsls	r3, r3, #17
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d009      	beq.n	80020c6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <HAL_ADC_Init+0x2ac>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	69b9      	ldr	r1, [r7, #24]
 80020d6:	430b      	orrs	r3, r1
 80020d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fed1 	bl	8001e86 <LL_ADC_REG_IsConversionOngoing>
 80020e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fede 	bl	8001eac <LL_ADC_INJ_IsConversionOngoing>
 80020f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d15f      	bne.n	80021b8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d15c      	bne.n	80021b8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7d1b      	ldrb	r3, [r3, #20]
 8002102:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_ADC_Init+0x2b0>)
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	69b9      	ldr	r1, [r7, #24]
 800211c:	430b      	orrs	r3, r1
 800211e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002126:	2b01      	cmp	r3, #1
 8002128:	d130      	bne.n	800218c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_ADC_Init+0x2b4>)
 8002138:	4013      	ands	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800213e:	3a01      	subs	r2, #1
 8002140:	0411      	lsls	r1, r2, #16
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800214c:	4311      	orrs	r1, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002152:	430a      	orrs	r2, r1
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	611a      	str	r2, [r3, #16]
 8002160:	e01c      	b.n	800219c <HAL_ADC_Init+0x2c8>
 8002162:	bf00      	nop
 8002164:	24000000 	.word	0x24000000
 8002168:	053e2d63 	.word	0x053e2d63
 800216c:	40022000 	.word	0x40022000
 8002170:	40022100 	.word	0x40022100
 8002174:	58026000 	.word	0x58026000
 8002178:	40022300 	.word	0x40022300
 800217c:	58026300 	.word	0x58026300
 8002180:	fff0c003 	.word	0xfff0c003
 8002184:	ffffbffc 	.word	0xffffbffc
 8002188:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fb80 	bl	80028b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10c      	bne.n	80021da <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f023 010f 	bic.w	r1, r3, #15
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	1e5a      	subs	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
 80021d8:	e007      	b.n	80021ea <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 020f 	bic.w	r2, r2, #15
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54
 80021fa:	e007      	b.n	800220c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	f043 0210 	orr.w	r2, r3, #16
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800220c:	7ffb      	ldrb	r3, [r7, #31]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd90      	pop	{r4, r7, pc}
 8002216:	bf00      	nop

08002218 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b0a1      	sub	sp, #132	; 0x84
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a9d      	ldr	r2, [pc, #628]	; (80024a8 <HAL_ADC_ConfigChannel+0x290>)
 8002232:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x2a>
 800223e:	2302      	movs	r3, #2
 8002240:	e321      	b.n	8002886 <HAL_ADC_ConfigChannel+0x66e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fe19 	bl	8001e86 <LL_ADC_REG_IsConversionOngoing>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 8306 	bne.w	8002868 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002264:	2b00      	cmp	r3, #0
 8002266:	d108      	bne.n	800227a <HAL_ADC_ConfigChannel+0x62>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0e9b      	lsrs	r3, r3, #26
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2201      	movs	r2, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	e016      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x90>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800228a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800228c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002292:	2320      	movs	r3, #32
 8002294:	e003      	b.n	800229e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002296:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	2201      	movs	r2, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	69d1      	ldr	r1, [r2, #28]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	430b      	orrs	r3, r1
 80022b4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6859      	ldr	r1, [r3, #4]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	f7ff fd02 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fdda 	bl	8001e86 <LL_ADC_REG_IsConversionOngoing>
 80022d2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fde7 	bl	8001eac <LL_ADC_INJ_IsConversionOngoing>
 80022de:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 80b3 	bne.w	800244e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 80af 	bne.w	800244e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6819      	ldr	r1, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	461a      	mov	r2, r3
 80022fe:	f7ff fd11 	bl	8001d24 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002302:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <HAL_ADC_ConfigChannel+0x294>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800230a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800230e:	d10b      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x110>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	e01d      	b.n	8002364 <HAL_ADC_ConfigChannel+0x14c>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10b      	bne.n	800234e <HAL_ADC_ConfigChannel+0x136>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	e00a      	b.n	8002364 <HAL_ADC_ConfigChannel+0x14c>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b04      	cmp	r3, #4
 800236c:	d027      	beq.n	80023be <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6919      	ldr	r1, [r3, #16]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800237c:	f7ff fc52 	bl	8001c24 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6919      	ldr	r1, [r3, #16]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	7e5b      	ldrb	r3, [r3, #25]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d102      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x17e>
 8002390:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002394:	e000      	b.n	8002398 <HAL_ADC_ConfigChannel+0x180>
 8002396:	2300      	movs	r3, #0
 8002398:	461a      	mov	r2, r3
 800239a:	f7ff fc7c 	bl	8001c96 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6919      	ldr	r1, [r3, #16]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	7e1b      	ldrb	r3, [r3, #24]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d102      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x19c>
 80023ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023b2:	e000      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x19e>
 80023b4:	2300      	movs	r3, #0
 80023b6:	461a      	mov	r2, r3
 80023b8:	f7ff fc54 	bl	8001c64 <LL_ADC_SetDataRightShift>
 80023bc:	e047      	b.n	800244e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	069b      	lsls	r3, r3, #26
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d107      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023e0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	069b      	lsls	r3, r3, #26
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d107      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002404:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800240c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	069b      	lsls	r3, r3, #26
 8002416:	429a      	cmp	r2, r3
 8002418:	d107      	bne.n	800242a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002428:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002430:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	069b      	lsls	r3, r3, #26
 800243a:	429a      	cmp	r2, r3
 800243c:	d107      	bne.n	800244e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800244c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fd04 	bl	8001e60 <LL_ADC_IsEnabled>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 820d 	bne.w	800287a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6819      	ldr	r1, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	461a      	mov	r2, r3
 800246e:	f7ff fc85 	bl	8001d7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <HAL_ADC_ConfigChannel+0x290>)
 8002478:	4293      	cmp	r3, r2
 800247a:	f040 8133 	bne.w	80026e4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800248a:	2b00      	cmp	r3, #0
 800248c:	d110      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x298>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0e9b      	lsrs	r3, r3, #26
 8002494:	3301      	adds	r3, #1
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	2b09      	cmp	r3, #9
 800249c:	bf94      	ite	ls
 800249e:	2301      	movls	r3, #1
 80024a0:	2300      	movhi	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	e01e      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x2cc>
 80024a6:	bf00      	nop
 80024a8:	47ff0000 	.word	0x47ff0000
 80024ac:	5c001000 	.word	0x5c001000
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80024be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80024c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e003      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80024cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2b09      	cmp	r3, #9
 80024dc:	bf94      	ite	ls
 80024de:	2301      	movls	r3, #1
 80024e0:	2300      	movhi	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d079      	beq.n	80025dc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d107      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x2ec>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0e9b      	lsrs	r3, r3, #26
 80024fa:	3301      	adds	r3, #1
 80024fc:	069b      	lsls	r3, r3, #26
 80024fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002502:	e015      	b.n	8002530 <HAL_ADC_ConfigChannel+0x318>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002514:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800251c:	2320      	movs	r3, #32
 800251e:	e003      	b.n	8002528 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	3301      	adds	r3, #1
 800252a:	069b      	lsls	r3, r3, #26
 800252c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x338>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	3301      	adds	r3, #1
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	2101      	movs	r1, #1
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	e017      	b.n	8002580 <HAL_ADC_ConfigChannel+0x368>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800255e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002560:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002568:	2320      	movs	r3, #32
 800256a:	e003      	b.n	8002574 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800256c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	3301      	adds	r3, #1
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	ea42 0103 	orr.w	r1, r2, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x38e>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	3301      	adds	r3, #1
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	051b      	lsls	r3, r3, #20
 80025a4:	e018      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x3c0>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80025b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e003      	b.n	80025ca <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d8:	430b      	orrs	r3, r1
 80025da:	e07e      	b.n	80026da <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d107      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x3e0>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	069b      	lsls	r3, r3, #26
 80025f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f6:	e015      	b.n	8002624 <HAL_ADC_ConfigChannel+0x40c>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002610:	2320      	movs	r3, #32
 8002612:	e003      	b.n	800261c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3301      	adds	r3, #1
 800261e:	069b      	lsls	r3, r3, #26
 8002620:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x42c>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0e9b      	lsrs	r3, r3, #26
 8002636:	3301      	adds	r3, #1
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	e017      	b.n	8002674 <HAL_ADC_ConfigChannel+0x45c>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	61bb      	str	r3, [r7, #24]
  return result;
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800265c:	2320      	movs	r3, #32
 800265e:	e003      	b.n	8002668 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3301      	adds	r3, #1
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	ea42 0103 	orr.w	r1, r2, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10d      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x488>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0e9b      	lsrs	r3, r3, #26
 800268a:	3301      	adds	r3, #1
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	3b1e      	subs	r3, #30
 8002698:	051b      	lsls	r3, r3, #20
 800269a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800269e:	e01b      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x4c0>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	60fb      	str	r3, [r7, #12]
  return result;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80026b8:	2320      	movs	r3, #32
 80026ba:	e003      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	f003 021f 	and.w	r2, r3, #31
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	3b1e      	subs	r3, #30
 80026d2:	051b      	lsls	r3, r3, #20
 80026d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d8:	430b      	orrs	r3, r1
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	6892      	ldr	r2, [r2, #8]
 80026de:	4619      	mov	r1, r3
 80026e0:	f7ff fb20 	bl	8001d24 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f280 80c6 	bge.w	800287a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a67      	ldr	r2, [pc, #412]	; (8002890 <HAL_ADC_ConfigChannel+0x678>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d004      	beq.n	8002702 <HAL_ADC_ConfigChannel+0x4ea>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a65      	ldr	r2, [pc, #404]	; (8002894 <HAL_ADC_ConfigChannel+0x67c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x4ee>
 8002702:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_ADC_ConfigChannel+0x680>)
 8002704:	e000      	b.n	8002708 <HAL_ADC_ConfigChannel+0x4f0>
 8002706:	4b65      	ldr	r3, [pc, #404]	; (800289c <HAL_ADC_ConfigChannel+0x684>)
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fa7d 	bl	8001c08 <LL_ADC_GetCommonPathInternalCh>
 800270e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a5e      	ldr	r2, [pc, #376]	; (8002890 <HAL_ADC_ConfigChannel+0x678>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_ADC_ConfigChannel+0x50c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a5d      	ldr	r2, [pc, #372]	; (8002894 <HAL_ADC_ConfigChannel+0x67c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d10e      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x52a>
 8002724:	485a      	ldr	r0, [pc, #360]	; (8002890 <HAL_ADC_ConfigChannel+0x678>)
 8002726:	f7ff fb9b 	bl	8001e60 <LL_ADC_IsEnabled>
 800272a:	4604      	mov	r4, r0
 800272c:	4859      	ldr	r0, [pc, #356]	; (8002894 <HAL_ADC_ConfigChannel+0x67c>)
 800272e:	f7ff fb97 	bl	8001e60 <LL_ADC_IsEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	4323      	orrs	r3, r4
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	e008      	b.n	8002754 <HAL_ADC_ConfigChannel+0x53c>
 8002742:	4857      	ldr	r0, [pc, #348]	; (80028a0 <HAL_ADC_ConfigChannel+0x688>)
 8002744:	f7ff fb8c 	bl	8001e60 <LL_ADC_IsEnabled>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	bf0c      	ite	eq
 800274e:	2301      	moveq	r3, #1
 8002750:	2300      	movne	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d07d      	beq.n	8002854 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a51      	ldr	r2, [pc, #324]	; (80028a4 <HAL_ADC_ConfigChannel+0x68c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d130      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x5ac>
 8002762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d12b      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a4b      	ldr	r2, [pc, #300]	; (80028a0 <HAL_ADC_ConfigChannel+0x688>)
 8002772:	4293      	cmp	r3, r2
 8002774:	f040 8081 	bne.w	800287a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a44      	ldr	r2, [pc, #272]	; (8002890 <HAL_ADC_ConfigChannel+0x678>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_ADC_ConfigChannel+0x574>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a43      	ldr	r2, [pc, #268]	; (8002894 <HAL_ADC_ConfigChannel+0x67c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x578>
 800278c:	4a42      	ldr	r2, [pc, #264]	; (8002898 <HAL_ADC_ConfigChannel+0x680>)
 800278e:	e000      	b.n	8002792 <HAL_ADC_ConfigChannel+0x57a>
 8002790:	4a42      	ldr	r2, [pc, #264]	; (800289c <HAL_ADC_ConfigChannel+0x684>)
 8002792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002794:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f7ff fa21 	bl	8001be2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_ADC_ConfigChannel+0x690>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	4a41      	ldr	r2, [pc, #260]	; (80028ac <HAL_ADC_ConfigChannel+0x694>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	3301      	adds	r3, #1
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027b4:	e002      	b.n	80027bc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f9      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027c2:	e05a      	b.n	800287a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a39      	ldr	r2, [pc, #228]	; (80028b0 <HAL_ADC_ConfigChannel+0x698>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d11e      	bne.n	800280c <HAL_ADC_ConfigChannel+0x5f4>
 80027ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d119      	bne.n	800280c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a30      	ldr	r2, [pc, #192]	; (80028a0 <HAL_ADC_ConfigChannel+0x688>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d14b      	bne.n	800287a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2a      	ldr	r2, [pc, #168]	; (8002890 <HAL_ADC_ConfigChannel+0x678>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d004      	beq.n	80027f6 <HAL_ADC_ConfigChannel+0x5de>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a28      	ldr	r2, [pc, #160]	; (8002894 <HAL_ADC_ConfigChannel+0x67c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x5e2>
 80027f6:	4a28      	ldr	r2, [pc, #160]	; (8002898 <HAL_ADC_ConfigChannel+0x680>)
 80027f8:	e000      	b.n	80027fc <HAL_ADC_ConfigChannel+0x5e4>
 80027fa:	4a28      	ldr	r2, [pc, #160]	; (800289c <HAL_ADC_ConfigChannel+0x684>)
 80027fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f7ff f9ec 	bl	8001be2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800280a:	e036      	b.n	800287a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <HAL_ADC_ConfigChannel+0x69c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d131      	bne.n	800287a <HAL_ADC_ConfigChannel+0x662>
 8002816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d12c      	bne.n	800287a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1e      	ldr	r2, [pc, #120]	; (80028a0 <HAL_ADC_ConfigChannel+0x688>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d127      	bne.n	800287a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a18      	ldr	r2, [pc, #96]	; (8002890 <HAL_ADC_ConfigChannel+0x678>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d004      	beq.n	800283e <HAL_ADC_ConfigChannel+0x626>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a16      	ldr	r2, [pc, #88]	; (8002894 <HAL_ADC_ConfigChannel+0x67c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x62a>
 800283e:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_ADC_ConfigChannel+0x680>)
 8002840:	e000      	b.n	8002844 <HAL_ADC_ConfigChannel+0x62c>
 8002842:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_ADC_ConfigChannel+0x684>)
 8002844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f7ff f9c8 	bl	8001be2 <LL_ADC_SetCommonPathInternalCh>
 8002852:	e012      	b.n	800287a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	f043 0220 	orr.w	r2, r3, #32
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002866:	e008      	b.n	800287a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002882:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002886:	4618      	mov	r0, r3
 8002888:	3784      	adds	r7, #132	; 0x84
 800288a:	46bd      	mov	sp, r7
 800288c:	bd90      	pop	{r4, r7, pc}
 800288e:	bf00      	nop
 8002890:	40022000 	.word	0x40022000
 8002894:	40022100 	.word	0x40022100
 8002898:	40022300 	.word	0x40022300
 800289c:	58026300 	.word	0x58026300
 80028a0:	58026000 	.word	0x58026000
 80028a4:	cb840000 	.word	0xcb840000
 80028a8:	24000000 	.word	0x24000000
 80028ac:	053e2d63 	.word	0x053e2d63
 80028b0:	c7520000 	.word	0xc7520000
 80028b4:	cfb80000 	.word	0xcfb80000

080028b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a79      	ldr	r2, [pc, #484]	; (8002aac <ADC_ConfigureBoostMode+0x1f4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d004      	beq.n	80028d4 <ADC_ConfigureBoostMode+0x1c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a78      	ldr	r2, [pc, #480]	; (8002ab0 <ADC_ConfigureBoostMode+0x1f8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d109      	bne.n	80028e8 <ADC_ConfigureBoostMode+0x30>
 80028d4:	4b77      	ldr	r3, [pc, #476]	; (8002ab4 <ADC_ConfigureBoostMode+0x1fc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	e008      	b.n	80028fa <ADC_ConfigureBoostMode+0x42>
 80028e8:	4b73      	ldr	r3, [pc, #460]	; (8002ab8 <ADC_ConfigureBoostMode+0x200>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf14      	ite	ne
 80028f4:	2301      	movne	r3, #1
 80028f6:	2300      	moveq	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01c      	beq.n	8002938 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80028fe:	f003 ff27 	bl	8006750 <HAL_RCC_GetHCLKFreq>
 8002902:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800290c:	d010      	beq.n	8002930 <ADC_ConfigureBoostMode+0x78>
 800290e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002912:	d871      	bhi.n	80029f8 <ADC_ConfigureBoostMode+0x140>
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d002      	beq.n	8002920 <ADC_ConfigureBoostMode+0x68>
 800291a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800291e:	d16b      	bne.n	80029f8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	60fb      	str	r3, [r7, #12]
        break;
 800292e:	e066      	b.n	80029fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	60fb      	str	r3, [r7, #12]
        break;
 8002936:	e062      	b.n	80029fe <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002938:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800293c:	f004 fed6 	bl	80076ec <HAL_RCCEx_GetPeriphCLKFreq>
 8002940:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800294a:	d051      	beq.n	80029f0 <ADC_ConfigureBoostMode+0x138>
 800294c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002950:	d854      	bhi.n	80029fc <ADC_ConfigureBoostMode+0x144>
 8002952:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002956:	d047      	beq.n	80029e8 <ADC_ConfigureBoostMode+0x130>
 8002958:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800295c:	d84e      	bhi.n	80029fc <ADC_ConfigureBoostMode+0x144>
 800295e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002962:	d03d      	beq.n	80029e0 <ADC_ConfigureBoostMode+0x128>
 8002964:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002968:	d848      	bhi.n	80029fc <ADC_ConfigureBoostMode+0x144>
 800296a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800296e:	d033      	beq.n	80029d8 <ADC_ConfigureBoostMode+0x120>
 8002970:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002974:	d842      	bhi.n	80029fc <ADC_ConfigureBoostMode+0x144>
 8002976:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800297a:	d029      	beq.n	80029d0 <ADC_ConfigureBoostMode+0x118>
 800297c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002980:	d83c      	bhi.n	80029fc <ADC_ConfigureBoostMode+0x144>
 8002982:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002986:	d01a      	beq.n	80029be <ADC_ConfigureBoostMode+0x106>
 8002988:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800298c:	d836      	bhi.n	80029fc <ADC_ConfigureBoostMode+0x144>
 800298e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002992:	d014      	beq.n	80029be <ADC_ConfigureBoostMode+0x106>
 8002994:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002998:	d830      	bhi.n	80029fc <ADC_ConfigureBoostMode+0x144>
 800299a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800299e:	d00e      	beq.n	80029be <ADC_ConfigureBoostMode+0x106>
 80029a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029a4:	d82a      	bhi.n	80029fc <ADC_ConfigureBoostMode+0x144>
 80029a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029aa:	d008      	beq.n	80029be <ADC_ConfigureBoostMode+0x106>
 80029ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029b0:	d824      	bhi.n	80029fc <ADC_ConfigureBoostMode+0x144>
 80029b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029b6:	d002      	beq.n	80029be <ADC_ConfigureBoostMode+0x106>
 80029b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029bc:	d11e      	bne.n	80029fc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	0c9b      	lsrs	r3, r3, #18
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	60fb      	str	r3, [r7, #12]
        break;
 80029ce:	e016      	b.n	80029fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	60fb      	str	r3, [r7, #12]
        break;
 80029d6:	e012      	b.n	80029fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	60fb      	str	r3, [r7, #12]
        break;
 80029de:	e00e      	b.n	80029fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	099b      	lsrs	r3, r3, #6
 80029e4:	60fb      	str	r3, [r7, #12]
        break;
 80029e6:	e00a      	b.n	80029fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	09db      	lsrs	r3, r3, #7
 80029ec:	60fb      	str	r3, [r7, #12]
        break;
 80029ee:	e006      	b.n	80029fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	60fb      	str	r3, [r7, #12]
        break;
 80029f6:	e002      	b.n	80029fe <ADC_ConfigureBoostMode+0x146>
        break;
 80029f8:	bf00      	nop
 80029fa:	e000      	b.n	80029fe <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80029fc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80029fe:	f7ff f8d1 	bl	8001ba4 <HAL_GetREVID>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d815      	bhi.n	8002a38 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a2b      	ldr	r2, [pc, #172]	; (8002abc <ADC_ConfigureBoostMode+0x204>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d908      	bls.n	8002a26 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a22:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a24:	e03e      	b.n	8002aa4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a34:	609a      	str	r2, [r3, #8]
}
 8002a36:	e035      	b.n	8002aa4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	085b      	lsrs	r3, r3, #1
 8002a3c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <ADC_ConfigureBoostMode+0x208>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d808      	bhi.n	8002a58 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a54:	609a      	str	r2, [r3, #8]
}
 8002a56:	e025      	b.n	8002aa4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a1a      	ldr	r2, [pc, #104]	; (8002ac4 <ADC_ConfigureBoostMode+0x20c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d80a      	bhi.n	8002a76 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a72:	609a      	str	r2, [r3, #8]
}
 8002a74:	e016      	b.n	8002aa4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <ADC_ConfigureBoostMode+0x210>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d80a      	bhi.n	8002a94 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a90:	609a      	str	r2, [r3, #8]
}
 8002a92:	e007      	b.n	8002aa4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40022000 	.word	0x40022000
 8002ab0:	40022100 	.word	0x40022100
 8002ab4:	40022300 	.word	0x40022300
 8002ab8:	58026300 	.word	0x58026300
 8002abc:	01312d00 	.word	0x01312d00
 8002ac0:	005f5e10 	.word	0x005f5e10
 8002ac4:	00bebc20 	.word	0x00bebc20
 8002ac8:	017d7840 	.word	0x017d7840

08002acc <LL_ADC_IsEnabled>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <LL_ADC_IsEnabled+0x18>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <LL_ADC_IsEnabled+0x1a>
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d101      	bne.n	8002b0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b09f      	sub	sp, #124	; 0x7c
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e0be      	b.n	8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a5c      	ldr	r2, [pc, #368]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d102      	bne.n	8002b56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b50:	4b5b      	ldr	r3, [pc, #364]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	e001      	b.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e09d      	b.n	8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ffb9 	bl	8002af2 <LL_ADC_REG_IsConversionOngoing>
 8002b80:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ffb3 	bl	8002af2 <LL_ADC_REG_IsConversionOngoing>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d17f      	bne.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d17c      	bne.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a47      	ldr	r2, [pc, #284]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a46      	ldr	r2, [pc, #280]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002bac:	4b45      	ldr	r3, [pc, #276]	; (8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002bae:	e000      	b.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002bb0:	4b45      	ldr	r3, [pc, #276]	; (8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002bb2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d039      	beq.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bcc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a3a      	ldr	r2, [pc, #232]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a38      	ldr	r2, [pc, #224]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d10e      	bne.n	8002c00 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002be2:	4836      	ldr	r0, [pc, #216]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002be4:	f7ff ff72 	bl	8002acc <LL_ADC_IsEnabled>
 8002be8:	4604      	mov	r4, r0
 8002bea:	4835      	ldr	r0, [pc, #212]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bec:	f7ff ff6e 	bl	8002acc <LL_ADC_IsEnabled>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4323      	orrs	r3, r4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e008      	b.n	8002c12 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002c00:	4832      	ldr	r0, [pc, #200]	; (8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c02:	f7ff ff63 	bl	8002acc <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d047      	beq.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	6811      	ldr	r1, [r2, #0]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	6892      	ldr	r2, [r2, #8]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c2e:	e03a      	b.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1e      	ldr	r2, [pc, #120]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10e      	bne.n	8002c6e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002c50:	481a      	ldr	r0, [pc, #104]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c52:	f7ff ff3b 	bl	8002acc <LL_ADC_IsEnabled>
 8002c56:	4604      	mov	r4, r0
 8002c58:	4819      	ldr	r0, [pc, #100]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c5a:	f7ff ff37 	bl	8002acc <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4323      	orrs	r3, r4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	e008      	b.n	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002c6e:	4817      	ldr	r0, [pc, #92]	; (8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c70:	f7ff ff2c 	bl	8002acc <LL_ADC_IsEnabled>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bf0c      	ite	eq
 8002c7a:	2301      	moveq	r3, #1
 8002c7c:	2300      	movne	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d010      	beq.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c8e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c90:	e009      	b.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f043 0220 	orr.w	r2, r3, #32
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ca4:	e000      	b.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ca6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cb0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	377c      	adds	r7, #124	; 0x7c
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	40022000 	.word	0x40022000
 8002cc0:	40022100 	.word	0x40022100
 8002cc4:	40022300 	.word	0x40022300
 8002cc8:	58026300 	.word	0x58026300
 8002ccc:	58026000 	.word	0x58026000
 8002cd0:	fffff0e0 	.word	0xfffff0e0

08002cd4 <__NVIC_SetPriorityGrouping>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <__NVIC_SetPriorityGrouping+0x40>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <__NVIC_SetPriorityGrouping+0x44>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d02:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <__NVIC_SetPriorityGrouping+0x40>)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	60d3      	str	r3, [r2, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00
 8002d18:	05fa0000 	.word	0x05fa0000

08002d1c <__NVIC_GetPriorityGrouping>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d20:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <__NVIC_GetPriorityGrouping+0x18>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	f003 0307 	and.w	r3, r3, #7
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <__NVIC_EnableIRQ>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db0b      	blt.n	8002d62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	4907      	ldr	r1, [pc, #28]	; (8002d70 <__NVIC_EnableIRQ+0x38>)
 8002d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <__NVIC_SetPriority>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	6039      	str	r1, [r7, #0]
 8002d7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	db0a      	blt.n	8002d9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	490c      	ldr	r1, [pc, #48]	; (8002dc0 <__NVIC_SetPriority+0x4c>)
 8002d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	440b      	add	r3, r1
 8002d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d9c:	e00a      	b.n	8002db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4908      	ldr	r1, [pc, #32]	; (8002dc4 <__NVIC_SetPriority+0x50>)
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	3b04      	subs	r3, #4
 8002dac:	0112      	lsls	r2, r2, #4
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	440b      	add	r3, r1
 8002db2:	761a      	strb	r2, [r3, #24]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000e100 	.word	0xe000e100
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <NVIC_EncodePriority>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	; 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f1c3 0307 	rsb	r3, r3, #7
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	bf28      	it	cs
 8002de6:	2304      	movcs	r3, #4
 8002de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d902      	bls.n	8002df8 <NVIC_EncodePriority+0x30>
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3b03      	subs	r3, #3
 8002df6:	e000      	b.n	8002dfa <NVIC_EncodePriority+0x32>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	43d9      	mvns	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	4313      	orrs	r3, r2
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3724      	adds	r7, #36	; 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ff4c 	bl	8002cd4 <__NVIC_SetPriorityGrouping>
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e52:	f7ff ff63 	bl	8002d1c <__NVIC_GetPriorityGrouping>
 8002e56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	6978      	ldr	r0, [r7, #20]
 8002e5e:	f7ff ffb3 	bl	8002dc8 <NVIC_EncodePriority>
 8002e62:	4602      	mov	r2, r0
 8002e64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff82 	bl	8002d74 <__NVIC_SetPriority>
}
 8002e70:	bf00      	nop
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff ff56 	bl	8002d38 <__NVIC_EnableIRQ>
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e054      	b.n	8002f50 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7f5b      	ldrb	r3, [r3, #29]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d105      	bne.n	8002ebc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fd faf0 	bl	800049c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	791b      	ldrb	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <HAL_CRC_Init+0xc4>)
 8002ed0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0218 	bic.w	r2, r2, #24
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	e00c      	b.n	8002efe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6899      	ldr	r1, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	461a      	mov	r2, r3
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f834 	bl	8002f5c <HAL_CRCEx_Polynomial_Set>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e028      	b.n	8002f50 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	795b      	ldrb	r3, [r3, #5]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d105      	bne.n	8002f12 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0e:	611a      	str	r2, [r3, #16]
 8002f10:	e004      	b.n	8002f1c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6912      	ldr	r2, [r2, #16]
 8002f1a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	04c11db7 	.word	0x04c11db7

08002f5c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002f6c:	231f      	movs	r3, #31
 8002f6e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002f70:	bf00      	nop
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1e5a      	subs	r2, r3, #1
 8002f76:	613a      	str	r2, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d009      	beq.n	8002f90 <HAL_CRCEx_Polynomial_Set+0x34>
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b18      	cmp	r3, #24
 8002f94:	d846      	bhi.n	8003024 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002f96:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	0800302b 	.word	0x0800302b
 8002fa0:	08003025 	.word	0x08003025
 8002fa4:	08003025 	.word	0x08003025
 8002fa8:	08003025 	.word	0x08003025
 8002fac:	08003025 	.word	0x08003025
 8002fb0:	08003025 	.word	0x08003025
 8002fb4:	08003025 	.word	0x08003025
 8002fb8:	08003025 	.word	0x08003025
 8002fbc:	08003019 	.word	0x08003019
 8002fc0:	08003025 	.word	0x08003025
 8002fc4:	08003025 	.word	0x08003025
 8002fc8:	08003025 	.word	0x08003025
 8002fcc:	08003025 	.word	0x08003025
 8002fd0:	08003025 	.word	0x08003025
 8002fd4:	08003025 	.word	0x08003025
 8002fd8:	08003025 	.word	0x08003025
 8002fdc:	0800300d 	.word	0x0800300d
 8002fe0:	08003025 	.word	0x08003025
 8002fe4:	08003025 	.word	0x08003025
 8002fe8:	08003025 	.word	0x08003025
 8002fec:	08003025 	.word	0x08003025
 8002ff0:	08003025 	.word	0x08003025
 8002ff4:	08003025 	.word	0x08003025
 8002ff8:	08003025 	.word	0x08003025
 8002ffc:	08003001 	.word	0x08003001
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b06      	cmp	r3, #6
 8003004:	d913      	bls.n	800302e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800300a:	e010      	b.n	800302e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b07      	cmp	r3, #7
 8003010:	d90f      	bls.n	8003032 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003016:	e00c      	b.n	8003032 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	d90b      	bls.n	8003036 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003022:	e008      	b.n	8003036 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
      break;
 8003028:	e006      	b.n	8003038 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800302a:	bf00      	nop
 800302c:	e004      	b.n	8003038 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800302e:	bf00      	nop
 8003030:	e002      	b.n	8003038 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003032:	bf00      	nop
 8003034:	e000      	b.n	8003038 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003036:	bf00      	nop
  }
  if (status == HAL_OK)
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10d      	bne.n	800305a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f023 0118 	bic.w	r1, r3, #24
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800305a:	7dfb      	ldrb	r3, [r7, #23]
}
 800305c:	4618      	mov	r0, r3
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e04f      	b.n	800311a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd fa60 	bl	8000554 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_DMA2D_Init+0xbc>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6851      	ldr	r1, [r2, #4]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	69d2      	ldr	r2, [r2, #28]
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030be:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <HAL_DMA2D_Init+0xc0>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6891      	ldr	r1, [r2, #8]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6992      	ldr	r2, [r2, #24]
 80030ca:	4311      	orrs	r1, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_DMA2D_Init+0xc4>)
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68d1      	ldr	r1, [r2, #12]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	430b      	orrs	r3, r1
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	051a      	lsls	r2, r3, #20
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	055b      	lsls	r3, r3, #21
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	fff8ffbf 	.word	0xfff8ffbf
 8003128:	fffffef8 	.word	0xfffffef8
 800312c:	ffff0000 	.word	0xffff0000

08003130 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_DMA2D_ConfigLayer+0x24>
 8003150:	2302      	movs	r3, #2
 8003152:	e092      	b.n	800327a <HAL_DMA2D_ConfigLayer+0x14a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	3328      	adds	r3, #40	; 0x28
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003188:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003194:	4b3c      	ldr	r3, [pc, #240]	; (8003288 <HAL_DMA2D_ConfigLayer+0x158>)
 8003196:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b0a      	cmp	r3, #10
 800319e:	d003      	beq.n	80031a8 <HAL_DMA2D_ConfigLayer+0x78>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b09      	cmp	r3, #9
 80031a6:	d107      	bne.n	80031b8 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	e005      	b.n	80031c4 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d120      	bne.n	800320c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	ea02 0103 	and.w	r1, r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	430a      	orrs	r2, r1
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b0a      	cmp	r3, #10
 80031f2:	d003      	beq.n	80031fc <HAL_DMA2D_ConfigLayer+0xcc>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b09      	cmp	r3, #9
 80031fa:	d135      	bne.n	8003268 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003208:	629a      	str	r2, [r3, #40]	; 0x28
 800320a:	e02d      	b.n	8003268 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b0b      	cmp	r3, #11
 8003212:	d109      	bne.n	8003228 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	049b      	lsls	r3, r3, #18
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8003226:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	43db      	mvns	r3, r3
 8003232:	ea02 0103 	and.w	r1, r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	430a      	orrs	r2, r1
 800323e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b0a      	cmp	r3, #10
 8003250:	d003      	beq.n	800325a <HAL_DMA2D_ConfigLayer+0x12a>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b09      	cmp	r3, #9
 8003258:	d106      	bne.n	8003268 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003266:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	ff33000f 	.word	0xff33000f

0800328c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b098      	sub	sp, #96	; 0x60
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003294:	4a84      	ldr	r2, [pc, #528]	; (80034a8 <HAL_FDCAN_Init+0x21c>)
 8003296:	f107 030c 	add.w	r3, r7, #12
 800329a:	4611      	mov	r1, r2
 800329c:	224c      	movs	r2, #76	; 0x4c
 800329e:	4618      	mov	r0, r3
 80032a0:	f006 ff76 	bl	800a190 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e1c6      	b.n	800363c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a7e      	ldr	r2, [pc, #504]	; (80034ac <HAL_FDCAN_Init+0x220>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d106      	bne.n	80032c6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032c0:	461a      	mov	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd f9c0 	bl	8000660 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0210 	bic.w	r2, r2, #16
 80032ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032f0:	f7fe fc28 	bl	8001b44 <HAL_GetTick>
 80032f4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80032f6:	e014      	b.n	8003322 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80032f8:	f7fe fc24 	bl	8001b44 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b0a      	cmp	r3, #10
 8003304:	d90d      	bls.n	8003322 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800330c:	f043 0201 	orr.w	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2203      	movs	r2, #3
 800331a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e18c      	b.n	800363c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b08      	cmp	r3, #8
 800332e:	d0e3      	beq.n	80032f8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003340:	f7fe fc00 	bl	8001b44 <HAL_GetTick>
 8003344:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003346:	e014      	b.n	8003372 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003348:	f7fe fbfc 	bl	8001b44 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b0a      	cmp	r3, #10
 8003354:	d90d      	bls.n	8003372 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800335c:	f043 0201 	orr.w	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2203      	movs	r2, #3
 800336a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e164      	b.n	800363c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0e3      	beq.n	8003348 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0202 	orr.w	r2, r2, #2
 800338e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	7c1b      	ldrb	r3, [r3, #16]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d108      	bne.n	80033aa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a6:	619a      	str	r2, [r3, #24]
 80033a8:	e007      	b.n	80033ba <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	7c5b      	ldrb	r3, [r3, #17]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d108      	bne.n	80033d4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699a      	ldr	r2, [r3, #24]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033d0:	619a      	str	r2, [r3, #24]
 80033d2:	e007      	b.n	80033e4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7c9b      	ldrb	r3, [r3, #18]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d108      	bne.n	80033fe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033fa:	619a      	str	r2, [r3, #24]
 80033fc:	e007      	b.n	800340e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800340c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003432:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0210 	bic.w	r2, r2, #16
 8003442:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d108      	bne.n	800345e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0204 	orr.w	r2, r2, #4
 800345a:	619a      	str	r2, [r3, #24]
 800345c:	e030      	b.n	80034c0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d02c      	beq.n	80034c0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d020      	beq.n	80034b0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699a      	ldr	r2, [r3, #24]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800347c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0210 	orr.w	r2, r2, #16
 800348c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d114      	bne.n	80034c0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0220 	orr.w	r2, r2, #32
 80034a4:	619a      	str	r2, [r3, #24]
 80034a6:	e00b      	b.n	80034c0 <HAL_FDCAN_Init+0x234>
 80034a8:	0800a1d4 	.word	0x0800a1d4
 80034ac:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0220 	orr.w	r2, r2, #32
 80034be:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034d0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80034d8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80034e8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034ea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f4:	d115      	bne.n	8003522 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	3b01      	subs	r3, #1
 8003502:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003504:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	3b01      	subs	r3, #1
 800350c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800350e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	3b01      	subs	r3, #1
 8003518:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800351e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003520:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003548:	4413      	add	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d011      	beq.n	8003572 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003556:	f023 0107 	bic.w	r1, r3, #7
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	3360      	adds	r3, #96	; 0x60
 8003562:	443b      	add	r3, r7
 8003564:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d011      	beq.n	800359e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003582:	f023 0107 	bic.w	r1, r3, #7
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	3360      	adds	r3, #96	; 0x60
 800358e:	443b      	add	r3, r7
 8003590:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d012      	beq.n	80035cc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80035ae:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	3360      	adds	r3, #96	; 0x60
 80035ba:	443b      	add	r3, r7
 80035bc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80035c0:	011a      	lsls	r2, r3, #4
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d012      	beq.n	80035fa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80035dc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	3360      	adds	r3, #96	; 0x60
 80035e8:	443b      	add	r3, r7
 80035ea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80035ee:	021a      	lsls	r2, r3, #8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a11      	ldr	r2, [pc, #68]	; (8003644 <HAL_FDCAN_Init+0x3b8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d107      	bne.n	8003614 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f022 0203 	bic.w	r2, r2, #3
 8003612:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fb1f 	bl	8003c70 <FDCAN_CalcultateRamBlockAddresses>
 8003632:	4603      	mov	r3, r0
 8003634:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003638:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800363c:	4618      	mov	r0, r3
 800363e:	3760      	adds	r7, #96	; 0x60
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	4000a000 	.word	0x4000a000

08003648 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b096      	sub	sp, #88	; 0x58
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003650:	4b9a      	ldr	r3, [pc, #616]	; (80038bc <HAL_FDCAN_IRQHandler+0x274>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	079b      	lsls	r3, r3, #30
 8003656:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003658:	4b98      	ldr	r3, [pc, #608]	; (80038bc <HAL_FDCAN_IRQHandler+0x274>)
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	079b      	lsls	r3, r3, #30
 800365e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003660:	4013      	ands	r3, r2
 8003662:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800366e:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003678:	4013      	ands	r3, r2
 800367a:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003690:	4013      	ands	r3, r2
 8003692:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800369e:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036a8:	4013      	ands	r3, r2
 80036aa:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80036b6:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036c0:	4013      	ands	r3, r2
 80036c2:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ca:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80036ce:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036d8:	4013      	ands	r3, r2
 80036da:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80036ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d010      	beq.n	800371a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800370c:	651a      	str	r2, [r3, #80]	; 0x50
 800370e:	4b6b      	ldr	r3, [pc, #428]	; (80038bc <HAL_FDCAN_IRQHandler+0x274>)
 8003710:	2200      	movs	r2, #0
 8003712:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fa5f 	bl	8003bd8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800371a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371c:	0a9b      	lsrs	r3, r3, #10
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01d      	beq.n	8003762 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	0a9b      	lsrs	r3, r3, #10
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d017      	beq.n	8003762 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800373a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003746:	4013      	ands	r3, r2
 8003748:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003752:	651a      	str	r2, [r3, #80]	; 0x50
 8003754:	4b59      	ldr	r3, [pc, #356]	; (80038bc <HAL_FDCAN_IRQHandler+0x274>)
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800375a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fa12 	bl	8003b86 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00d      	beq.n	8003784 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800376e:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <HAL_FDCAN_IRQHandler+0x278>)
 8003770:	400b      	ands	r3, r1
 8003772:	6513      	str	r3, [r2, #80]	; 0x50
 8003774:	4a51      	ldr	r2, [pc, #324]	; (80038bc <HAL_FDCAN_IRQHandler+0x274>)
 8003776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003778:	0f9b      	lsrs	r3, r3, #30
 800377a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800377c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f9c0 	bl	8003b04 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00d      	beq.n	80037a6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003790:	4b4b      	ldr	r3, [pc, #300]	; (80038c0 <HAL_FDCAN_IRQHandler+0x278>)
 8003792:	400b      	ands	r3, r1
 8003794:	6513      	str	r3, [r2, #80]	; 0x50
 8003796:	4a49      	ldr	r2, [pc, #292]	; (80038bc <HAL_FDCAN_IRQHandler+0x274>)
 8003798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800379a:	0f9b      	lsrs	r3, r3, #30
 800379c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800379e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f9ba 	bl	8003b1a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80037a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00d      	beq.n	80037c8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80037b2:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <HAL_FDCAN_IRQHandler+0x278>)
 80037b4:	400b      	ands	r3, r1
 80037b6:	6513      	str	r3, [r2, #80]	; 0x50
 80037b8:	4a40      	ldr	r2, [pc, #256]	; (80038bc <HAL_FDCAN_IRQHandler+0x274>)
 80037ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037bc:	0f9b      	lsrs	r3, r3, #30
 80037be:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80037c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f9b4 	bl	8003b30 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80037c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80037d4:	4b3a      	ldr	r3, [pc, #232]	; (80038c0 <HAL_FDCAN_IRQHandler+0x278>)
 80037d6:	400b      	ands	r3, r1
 80037d8:	6513      	str	r3, [r2, #80]	; 0x50
 80037da:	4a38      	ldr	r2, [pc, #224]	; (80038bc <HAL_FDCAN_IRQHandler+0x274>)
 80037dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037de:	0f9b      	lsrs	r3, r3, #30
 80037e0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80037e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f9ae 	bl	8003b46 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80037ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ec:	0adb      	lsrs	r3, r3, #11
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d010      	beq.n	8003818 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	0adb      	lsrs	r3, r3, #11
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800380a:	651a      	str	r2, [r3, #80]	; 0x50
 800380c:	4b2b      	ldr	r3, [pc, #172]	; (80038bc <HAL_FDCAN_IRQHandler+0x274>)
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f9a2 	bl	8003b5c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381a:	0a5b      	lsrs	r3, r3, #9
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01d      	beq.n	8003860 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003826:	0a5b      	lsrs	r3, r3, #9
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003844:	4013      	ands	r3, r2
 8003846:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003850:	651a      	str	r2, [r3, #80]	; 0x50
 8003852:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <HAL_FDCAN_IRQHandler+0x274>)
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003858:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f988 	bl	8003b70 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003862:	0cdb      	lsrs	r3, r3, #19
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d010      	beq.n	800388e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	0cdb      	lsrs	r3, r3, #19
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003880:	651a      	str	r2, [r3, #80]	; 0x50
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <HAL_FDCAN_IRQHandler+0x274>)
 8003884:	2200      	movs	r2, #0
 8003886:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f987 	bl	8003b9c <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800388e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d016      	beq.n	80038c8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800389a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389c:	0c1b      	lsrs	r3, r3, #16
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d010      	beq.n	80038c8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038ae:	651a      	str	r2, [r3, #80]	; 0x50
 80038b0:	4b02      	ldr	r3, [pc, #8]	; (80038bc <HAL_FDCAN_IRQHandler+0x274>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	e004      	b.n	80038c4 <HAL_FDCAN_IRQHandler+0x27c>
 80038ba:	bf00      	nop
 80038bc:	4000a800 	.word	0x4000a800
 80038c0:	3fcfffff 	.word	0x3fcfffff
 80038c4:	f000 f974 	bl	8003bb0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	0c9b      	lsrs	r3, r3, #18
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d010      	beq.n	80038f6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	0c9b      	lsrs	r3, r3, #18
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80038e8:	651a      	str	r2, [r3, #80]	; 0x50
 80038ea:	4b83      	ldr	r3, [pc, #524]	; (8003af8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f967 	bl	8003bc4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80038f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f8:	0c5b      	lsrs	r3, r3, #17
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d015      	beq.n	800392e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	0c5b      	lsrs	r3, r3, #17
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00f      	beq.n	800392e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003916:	651a      	str	r2, [r3, #80]	; 0x50
 8003918:	4b77      	ldr	r3, [pc, #476]	; (8003af8 <HAL_FDCAN_IRQHandler+0x4b0>)
 800391a:	2200      	movs	r2, #0
 800391c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003924:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800392e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00d      	beq.n	8003950 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800393a:	4b70      	ldr	r3, [pc, #448]	; (8003afc <HAL_FDCAN_IRQHandler+0x4b4>)
 800393c:	400b      	ands	r3, r1
 800393e:	6513      	str	r3, [r2, #80]	; 0x50
 8003940:	4a6d      	ldr	r2, [pc, #436]	; (8003af8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003944:	0f9b      	lsrs	r3, r3, #30
 8003946:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003948:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f958 	bl	8003c00 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003952:	2b00      	cmp	r3, #0
 8003954:	d011      	beq.n	800397a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800395c:	4b67      	ldr	r3, [pc, #412]	; (8003afc <HAL_FDCAN_IRQHandler+0x4b4>)
 800395e:	400b      	ands	r3, r1
 8003960:	6513      	str	r3, [r2, #80]	; 0x50
 8003962:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003966:	0f9b      	lsrs	r3, r3, #30
 8003968:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a60      	ldr	r2, [pc, #384]	; (8003b00 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	f040 80ac 	bne.w	8003ade <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80a4 	beq.w	8003ade <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039aa:	4013      	ands	r3, r2
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039b8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c2:	4013      	ands	r3, r2
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	4013      	ands	r3, r2
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80039e8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	6a3a      	ldr	r2, [r7, #32]
 80039f2:	4013      	ands	r3, r2
 80039f4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8003a00:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003a2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8f1 	bl	8003c16 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a40:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f8f1 	bl	8003c2c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01a      	beq.n	8003a8c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d014      	beq.n	8003a8c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a78:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2240      	movs	r2, #64	; 0x40
 8003a80:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	6939      	ldr	r1, [r7, #16]
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8db 	bl	8003c42 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003a9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f8dc 	bl	8003c5a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00b      	beq.n	8003ac0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f87f 	bl	8003bec <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003aee:	bf00      	nop
 8003af0:	3758      	adds	r7, #88	; 0x58
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	4000a800 	.word	0x4000a800
 8003afc:	3fcfffff 	.word	0x3fcfffff
 8003b00:	4000a000 	.word	0x4000a000

08003b04 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003c86:	4ba7      	ldr	r3, [pc, #668]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	0091      	lsls	r1, r2, #2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	430b      	orrs	r3, r1
 8003c94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	041a      	lsls	r2, r3, #16
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	4413      	add	r3, r2
 8003cbc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cc6:	4b97      	ldr	r3, [pc, #604]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	0091      	lsls	r1, r2, #2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	041a      	lsls	r2, r3, #16
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003d08:	4b86      	ldr	r3, [pc, #536]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	0091      	lsls	r1, r2, #2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	430b      	orrs	r3, r1
 8003d16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d22:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	041a      	lsls	r2, r3, #16
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4413      	add	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d50:	4b74      	ldr	r3, [pc, #464]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	0091      	lsls	r1, r2, #2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d6a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d72:	041a      	lsls	r2, r3, #16
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d98:	4b62      	ldr	r3, [pc, #392]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	0091      	lsls	r1, r2, #2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	430b      	orrs	r3, r1
 8003da6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	4413      	add	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003dc4:	4b57      	ldr	r3, [pc, #348]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	0091      	lsls	r1, r2, #2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dde:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de6:	041a      	lsls	r2, r3, #16
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e06:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	0091      	lsls	r1, r2, #2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	430b      	orrs	r3, r1
 8003e14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e20:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	041a      	lsls	r2, r3, #16
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e3c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e44:	061a      	lsls	r2, r3, #24
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e54:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003e56:	4413      	add	r3, r2
 8003e58:	009a      	lsls	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	441a      	add	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	441a      	add	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003eba:	fb01 f303 	mul.w	r3, r1, r3
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	441a      	add	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	441a      	add	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	441a      	add	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	441a      	add	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d915      	bls.n	8003f4c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003f20:	e006      	b.n	8003f30 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003f22:	bf00      	nop
 8003f24:	ffff0003 	.word	0xffff0003
 8003f28:	10002b00 	.word	0x10002b00
 8003f2c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f36:	f043 0220 	orr.w	r2, r3, #32
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2203      	movs	r2, #3
 8003f44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e010      	b.n	8003f6e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e005      	b.n	8003f60 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3f3      	bcc.n	8003f54 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop

08003f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f8a:	4b89      	ldr	r3, [pc, #548]	; (80041b0 <HAL_GPIO_Init+0x234>)
 8003f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f8e:	e194      	b.n	80042ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	2101      	movs	r1, #1
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8186 	beq.w	80042b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d005      	beq.n	8003fc0 <HAL_GPIO_Init+0x44>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d130      	bne.n	8004022 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	2203      	movs	r2, #3
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	091b      	lsrs	r3, r3, #4
 800400c:	f003 0201 	and.w	r2, r3, #1
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4313      	orrs	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b03      	cmp	r3, #3
 800402c:	d017      	beq.n	800405e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	2203      	movs	r2, #3
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d123      	bne.n	80040b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	08da      	lsrs	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3208      	adds	r2, #8
 8004072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	220f      	movs	r2, #15
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	08da      	lsrs	r2, r3, #3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3208      	adds	r2, #8
 80040ac:	69b9      	ldr	r1, [r7, #24]
 80040ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	2203      	movs	r2, #3
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0203 	and.w	r2, r3, #3
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4313      	orrs	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80e0 	beq.w	80042b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040f4:	4b2f      	ldr	r3, [pc, #188]	; (80041b4 <HAL_GPIO_Init+0x238>)
 80040f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040fa:	4a2e      	ldr	r2, [pc, #184]	; (80041b4 <HAL_GPIO_Init+0x238>)
 80040fc:	f043 0302 	orr.w	r3, r3, #2
 8004100:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004104:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <HAL_GPIO_Init+0x238>)
 8004106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004112:	4a29      	ldr	r2, [pc, #164]	; (80041b8 <HAL_GPIO_Init+0x23c>)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	3302      	adds	r3, #2
 800411a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	220f      	movs	r2, #15
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a20      	ldr	r2, [pc, #128]	; (80041bc <HAL_GPIO_Init+0x240>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d052      	beq.n	80041e4 <HAL_GPIO_Init+0x268>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <HAL_GPIO_Init+0x244>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d031      	beq.n	80041aa <HAL_GPIO_Init+0x22e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_GPIO_Init+0x248>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d02b      	beq.n	80041a6 <HAL_GPIO_Init+0x22a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <HAL_GPIO_Init+0x24c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d025      	beq.n	80041a2 <HAL_GPIO_Init+0x226>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <HAL_GPIO_Init+0x250>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01f      	beq.n	800419e <HAL_GPIO_Init+0x222>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a1b      	ldr	r2, [pc, #108]	; (80041d0 <HAL_GPIO_Init+0x254>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d019      	beq.n	800419a <HAL_GPIO_Init+0x21e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a1a      	ldr	r2, [pc, #104]	; (80041d4 <HAL_GPIO_Init+0x258>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_GPIO_Init+0x21a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a19      	ldr	r2, [pc, #100]	; (80041d8 <HAL_GPIO_Init+0x25c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00d      	beq.n	8004192 <HAL_GPIO_Init+0x216>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a18      	ldr	r2, [pc, #96]	; (80041dc <HAL_GPIO_Init+0x260>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d007      	beq.n	800418e <HAL_GPIO_Init+0x212>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <HAL_GPIO_Init+0x264>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <HAL_GPIO_Init+0x20e>
 8004186:	2309      	movs	r3, #9
 8004188:	e02d      	b.n	80041e6 <HAL_GPIO_Init+0x26a>
 800418a:	230a      	movs	r3, #10
 800418c:	e02b      	b.n	80041e6 <HAL_GPIO_Init+0x26a>
 800418e:	2308      	movs	r3, #8
 8004190:	e029      	b.n	80041e6 <HAL_GPIO_Init+0x26a>
 8004192:	2307      	movs	r3, #7
 8004194:	e027      	b.n	80041e6 <HAL_GPIO_Init+0x26a>
 8004196:	2306      	movs	r3, #6
 8004198:	e025      	b.n	80041e6 <HAL_GPIO_Init+0x26a>
 800419a:	2305      	movs	r3, #5
 800419c:	e023      	b.n	80041e6 <HAL_GPIO_Init+0x26a>
 800419e:	2304      	movs	r3, #4
 80041a0:	e021      	b.n	80041e6 <HAL_GPIO_Init+0x26a>
 80041a2:	2303      	movs	r3, #3
 80041a4:	e01f      	b.n	80041e6 <HAL_GPIO_Init+0x26a>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e01d      	b.n	80041e6 <HAL_GPIO_Init+0x26a>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e01b      	b.n	80041e6 <HAL_GPIO_Init+0x26a>
 80041ae:	bf00      	nop
 80041b0:	58000080 	.word	0x58000080
 80041b4:	58024400 	.word	0x58024400
 80041b8:	58000400 	.word	0x58000400
 80041bc:	58020000 	.word	0x58020000
 80041c0:	58020400 	.word	0x58020400
 80041c4:	58020800 	.word	0x58020800
 80041c8:	58020c00 	.word	0x58020c00
 80041cc:	58021000 	.word	0x58021000
 80041d0:	58021400 	.word	0x58021400
 80041d4:	58021800 	.word	0x58021800
 80041d8:	58021c00 	.word	0x58021c00
 80041dc:	58022000 	.word	0x58022000
 80041e0:	58022400 	.word	0x58022400
 80041e4:	2300      	movs	r3, #0
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	f002 0203 	and.w	r2, r2, #3
 80041ec:	0092      	lsls	r2, r2, #2
 80041ee:	4093      	lsls	r3, r2
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041f6:	4938      	ldr	r1, [pc, #224]	; (80042d8 <HAL_GPIO_Init+0x35c>)
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	089b      	lsrs	r3, r3, #2
 80041fc:	3302      	adds	r3, #2
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	43db      	mvns	r3, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4013      	ands	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800422a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	43db      	mvns	r3, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4013      	ands	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	3301      	adds	r3, #1
 80042b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f47f ae63 	bne.w	8003f90 <HAL_GPIO_Init+0x14>
  }
}
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	3724      	adds	r7, #36	; 0x24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	58000400 	.word	0x58000400

080042dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	807b      	strh	r3, [r7, #2]
 80042e8:	4613      	mov	r3, r2
 80042ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042ec:	787b      	ldrb	r3, [r7, #1]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042f2:	887a      	ldrh	r2, [r7, #2]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80042f8:	e003      	b.n	8004302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042fa:	887b      	ldrh	r3, [r7, #2]
 80042fc:	041a      	lsls	r2, r3, #16
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	619a      	str	r2, [r3, #24]
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e07f      	b.n	8004422 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fc fc14 	bl	8000b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2224      	movs	r2, #36	; 0x24
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0201 	bic.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004360:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004370:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d107      	bne.n	800438a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	e006      	b.n	8004398 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004396:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d104      	bne.n	80043aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6859      	ldr	r1, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b1d      	ldr	r3, [pc, #116]	; (800442c <HAL_I2C_Init+0x11c>)
 80043b6:	430b      	orrs	r3, r1
 80043b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69d9      	ldr	r1, [r3, #28]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	02008000 	.word	0x02008000

08004430 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	4608      	mov	r0, r1
 800443a:	4611      	mov	r1, r2
 800443c:	461a      	mov	r2, r3
 800443e:	4603      	mov	r3, r0
 8004440:	817b      	strh	r3, [r7, #10]
 8004442:	460b      	mov	r3, r1
 8004444:	813b      	strh	r3, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b20      	cmp	r3, #32
 8004454:	f040 80f9 	bne.w	800464a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_I2C_Mem_Write+0x34>
 800445e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800446a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0ed      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_I2C_Mem_Write+0x4e>
 800447a:	2302      	movs	r3, #2
 800447c:	e0e6      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004486:	f7fd fb5d 	bl	8001b44 <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	2319      	movs	r3, #25
 8004492:	2201      	movs	r2, #1
 8004494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fbe5 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0d1      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2221      	movs	r2, #33	; 0x21
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2240      	movs	r2, #64	; 0x40
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044d0:	88f8      	ldrh	r0, [r7, #6]
 80044d2:	893a      	ldrh	r2, [r7, #8]
 80044d4:	8979      	ldrh	r1, [r7, #10]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	4603      	mov	r3, r0
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 faf5 	bl	8004ad0 <I2C_RequestMemoryWrite>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0a9      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2bff      	cmp	r3, #255	; 0xff
 8004500:	d90e      	bls.n	8004520 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	22ff      	movs	r2, #255	; 0xff
 8004506:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	b2da      	uxtb	r2, r3
 800450e:	8979      	ldrh	r1, [r7, #10]
 8004510:	2300      	movs	r3, #0
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fd4d 	bl	8004fb8 <I2C_TransferConfig>
 800451e:	e00f      	b.n	8004540 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452e:	b2da      	uxtb	r2, r3
 8004530:	8979      	ldrh	r1, [r7, #10]
 8004532:	2300      	movs	r3, #0
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fd3c 	bl	8004fb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fbcf 	bl	8004ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e07b      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d034      	beq.n	80045f8 <HAL_I2C_Mem_Write+0x1c8>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	2b00      	cmp	r3, #0
 8004594:	d130      	bne.n	80045f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	2200      	movs	r2, #0
 800459e:	2180      	movs	r1, #128	; 0x80
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fb61 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e04d      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2bff      	cmp	r3, #255	; 0xff
 80045b8:	d90e      	bls.n	80045d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	22ff      	movs	r2, #255	; 0xff
 80045be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	8979      	ldrh	r1, [r7, #10]
 80045c8:	2300      	movs	r3, #0
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fcf1 	bl	8004fb8 <I2C_TransferConfig>
 80045d6:	e00f      	b.n	80045f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	8979      	ldrh	r1, [r7, #10]
 80045ea:	2300      	movs	r3, #0
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fce0 	bl	8004fb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d19e      	bne.n	8004540 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fbae 	bl	8004d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e01a      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2220      	movs	r2, #32
 800461c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <HAL_I2C_Mem_Write+0x224>)
 800462a:	400b      	ands	r3, r1
 800462c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	e000      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800464a:	2302      	movs	r3, #2
  }
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	fe00e800 	.word	0xfe00e800

08004658 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	4608      	mov	r0, r1
 8004662:	4611      	mov	r1, r2
 8004664:	461a      	mov	r2, r3
 8004666:	4603      	mov	r3, r0
 8004668:	817b      	strh	r3, [r7, #10]
 800466a:	460b      	mov	r3, r1
 800466c:	813b      	strh	r3, [r7, #8]
 800466e:	4613      	mov	r3, r2
 8004670:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b20      	cmp	r3, #32
 800467c:	f040 80fd 	bne.w	800487a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_I2C_Mem_Read+0x34>
 8004686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0f1      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_I2C_Mem_Read+0x4e>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e0ea      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046ae:	f7fd fa49 	bl	8001b44 <HAL_GetTick>
 80046b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	2319      	movs	r3, #25
 80046ba:	2201      	movs	r2, #1
 80046bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fad1 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0d5      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2222      	movs	r2, #34	; 0x22
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2240      	movs	r2, #64	; 0x40
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a3a      	ldr	r2, [r7, #32]
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046f8:	88f8      	ldrh	r0, [r7, #6]
 80046fa:	893a      	ldrh	r2, [r7, #8]
 80046fc:	8979      	ldrh	r1, [r7, #10]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	4603      	mov	r3, r0
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fa35 	bl	8004b78 <I2C_RequestMemoryRead>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0ad      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2bff      	cmp	r3, #255	; 0xff
 8004728:	d90e      	bls.n	8004748 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	22ff      	movs	r2, #255	; 0xff
 800472e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004734:	b2da      	uxtb	r2, r3
 8004736:	8979      	ldrh	r1, [r7, #10]
 8004738:	4b52      	ldr	r3, [pc, #328]	; (8004884 <HAL_I2C_Mem_Read+0x22c>)
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fc39 	bl	8004fb8 <I2C_TransferConfig>
 8004746:	e00f      	b.n	8004768 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	b2da      	uxtb	r2, r3
 8004758:	8979      	ldrh	r1, [r7, #10]
 800475a:	4b4a      	ldr	r3, [pc, #296]	; (8004884 <HAL_I2C_Mem_Read+0x22c>)
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fc28 	bl	8004fb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	2200      	movs	r2, #0
 8004770:	2104      	movs	r1, #4
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fa78 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e07c      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d034      	beq.n	8004828 <HAL_I2C_Mem_Read+0x1d0>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d130      	bne.n	8004828 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	2200      	movs	r2, #0
 80047ce:	2180      	movs	r1, #128	; 0x80
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 fa49 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e04d      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2bff      	cmp	r3, #255	; 0xff
 80047e8:	d90e      	bls.n	8004808 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	22ff      	movs	r2, #255	; 0xff
 80047ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	8979      	ldrh	r1, [r7, #10]
 80047f8:	2300      	movs	r3, #0
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fbd9 	bl	8004fb8 <I2C_TransferConfig>
 8004806:	e00f      	b.n	8004828 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	b2da      	uxtb	r2, r3
 8004818:	8979      	ldrh	r1, [r7, #10]
 800481a:	2300      	movs	r3, #0
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fbc8 	bl	8004fb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d19a      	bne.n	8004768 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fa96 	bl	8004d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e01a      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2220      	movs	r2, #32
 800484c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_I2C_Mem_Read+0x230>)
 800485a:	400b      	ands	r3, r1
 800485c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	e000      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800487a:	2302      	movs	r3, #2
  }
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	80002400 	.word	0x80002400
 8004888:	fe00e800 	.word	0xfe00e800

0800488c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	; 0x28
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	460b      	mov	r3, r1
 800489a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	f040 80ef 	bne.w	8004a8c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048bc:	d101      	bne.n	80048c2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80048be:	2302      	movs	r3, #2
 80048c0:	e0e5      	b.n	8004a8e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_I2C_IsDeviceReady+0x44>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e0de      	b.n	8004a8e <HAL_I2C_IsDeviceReady+0x202>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2224      	movs	r2, #36	; 0x24
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d105      	bne.n	80048fa <HAL_I2C_IsDeviceReady+0x6e>
 80048ee:	897b      	ldrh	r3, [r7, #10]
 80048f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048f4:	4b68      	ldr	r3, [pc, #416]	; (8004a98 <HAL_I2C_IsDeviceReady+0x20c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	e004      	b.n	8004904 <HAL_I2C_IsDeviceReady+0x78>
 80048fa:	897b      	ldrh	r3, [r7, #10]
 80048fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004900:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800490a:	f7fd f91b 	bl	8001b44 <HAL_GetTick>
 800490e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b20      	cmp	r3, #32
 800491c:	bf0c      	ite	eq
 800491e:	2301      	moveq	r3, #1
 8004920:	2300      	movne	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b10      	cmp	r3, #16
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800493c:	e034      	b.n	80049a8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d01a      	beq.n	800497c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fd f8fd 	bl	8001b44 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <HAL_I2C_IsDeviceReady+0xd0>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10f      	bne.n	800497c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e088      	b.n	8004a8e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b20      	cmp	r3, #32
 8004988:	bf0c      	ite	eq
 800498a:	2301      	moveq	r3, #1
 800498c:	2300      	movne	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b10      	cmp	r3, #16
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80049a8:	7ffb      	ldrb	r3, [r7, #31]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <HAL_I2C_IsDeviceReady+0x128>
 80049ae:	7fbb      	ldrb	r3, [r7, #30]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0c4      	beq.n	800493e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b10      	cmp	r3, #16
 80049c0:	d01a      	beq.n	80049f8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2120      	movs	r1, #32
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f94b 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e058      	b.n	8004a8e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2220      	movs	r2, #32
 80049e2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e04a      	b.n	8004a8e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	2120      	movs	r1, #32
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f930 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e03d      	b.n	8004a8e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2210      	movs	r2, #16
 8004a18:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d118      	bne.n	8004a5c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a38:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2200      	movs	r2, #0
 8004a42:	2120      	movs	r1, #32
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f90f 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e01c      	b.n	8004a8e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	f63f af3d 	bhi.w	80048e6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	f043 0220 	orr.w	r2, r3, #32
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8004a8c:	2302      	movs	r3, #2
  }
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	02002000 	.word	0x02002000

08004a9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	817b      	strh	r3, [r7, #10]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	813b      	strh	r3, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	8979      	ldrh	r1, [r7, #10]
 8004af0:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <I2C_RequestMemoryWrite+0xa4>)
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fa5d 	bl	8004fb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	69b9      	ldr	r1, [r7, #24]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f8f0 	bl	8004ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e02c      	b.n	8004b6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
 8004b22:	e015      	b.n	8004b50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	69b9      	ldr	r1, [r7, #24]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f8d6 	bl	8004ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e012      	b.n	8004b6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b46:	893b      	ldrh	r3, [r7, #8]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2200      	movs	r2, #0
 8004b58:	2180      	movs	r1, #128	; 0x80
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f884 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	80002000 	.word	0x80002000

08004b78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	4608      	mov	r0, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	461a      	mov	r2, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	817b      	strh	r3, [r7, #10]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	813b      	strh	r3, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	8979      	ldrh	r1, [r7, #10]
 8004b98:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <I2C_RequestMemoryRead+0xa4>)
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fa0a 	bl	8004fb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	69b9      	ldr	r1, [r7, #24]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f89d 	bl	8004ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e02c      	b.n	8004c12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d105      	bne.n	8004bca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bbe:	893b      	ldrh	r3, [r7, #8]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
 8004bc8:	e015      	b.n	8004bf6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bca:	893b      	ldrh	r3, [r7, #8]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	69b9      	ldr	r1, [r7, #24]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f883 	bl	8004ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e012      	b.n	8004c12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bec:	893b      	ldrh	r3, [r7, #8]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2140      	movs	r1, #64	; 0x40
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f831 	bl	8004c68 <I2C_WaitOnFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	80002000 	.word	0x80002000

08004c20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d103      	bne.n	8004c3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d007      	beq.n	8004c5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	619a      	str	r2, [r3, #24]
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	4613      	mov	r3, r2
 8004c76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c78:	e022      	b.n	8004cc0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d01e      	beq.n	8004cc0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c82:	f7fc ff5f 	bl	8001b44 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d302      	bcc.n	8004c98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d113      	bne.n	8004cc0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e00f      	b.n	8004ce0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	bf0c      	ite	eq
 8004cd0:	2301      	moveq	r3, #1
 8004cd2:	2300      	movne	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d0cd      	beq.n	8004c7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cf4:	e02c      	b.n	8004d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f870 	bl	8004de0 <I2C_IsErrorOccurred>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e02a      	b.n	8004d60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d01e      	beq.n	8004d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d12:	f7fc ff17 	bl	8001b44 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d302      	bcc.n	8004d28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d113      	bne.n	8004d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	f043 0220 	orr.w	r2, r3, #32
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e007      	b.n	8004d60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d1cb      	bne.n	8004cf6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d74:	e028      	b.n	8004dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f830 	bl	8004de0 <I2C_IsErrorOccurred>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e026      	b.n	8004dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8a:	f7fc fedb 	bl	8001b44 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d302      	bcc.n	8004da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d113      	bne.n	8004dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e007      	b.n	8004dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d1cf      	bne.n	8004d76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	; 0x28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d075      	beq.n	8004ef8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2210      	movs	r2, #16
 8004e12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e14:	e056      	b.n	8004ec4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d052      	beq.n	8004ec4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e1e:	f7fc fe91 	bl	8001b44 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d302      	bcc.n	8004e34 <I2C_IsErrorOccurred+0x54>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d147      	bne.n	8004ec4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e56:	d12e      	bne.n	8004eb6 <I2C_IsErrorOccurred+0xd6>
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e5e:	d02a      	beq.n	8004eb6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d027      	beq.n	8004eb6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e74:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e76:	f7fc fe65 	bl	8001b44 <HAL_GetTick>
 8004e7a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e7c:	e01b      	b.n	8004eb6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e7e:	f7fc fe61 	bl	8001b44 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b19      	cmp	r3, #25
 8004e8a:	d914      	bls.n	8004eb6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e90:	f043 0220 	orr.w	r2, r3, #32
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d1dc      	bne.n	8004e7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d003      	beq.n	8004eda <I2C_IsErrorOccurred+0xfa>
 8004ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d09d      	beq.n	8004e16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	f043 0304 	orr.w	r3, r3, #4
 8004ef0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00b      	beq.n	8004f22 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00b      	beq.n	8004f44 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	f043 0308 	orr.w	r3, r3, #8
 8004f32:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01c      	beq.n	8004fa8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff fe56 	bl	8004c20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6859      	ldr	r1, [r3, #4]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <I2C_IsErrorOccurred+0x1d4>)
 8004f80:	400b      	ands	r3, r1
 8004f82:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3728      	adds	r7, #40	; 0x28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	fe00e800 	.word	0xfe00e800

08004fb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	817b      	strh	r3, [r7, #10]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fca:	897b      	ldrh	r3, [r7, #10]
 8004fcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fd0:	7a7b      	ldrb	r3, [r7, #9]
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fd8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fe6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	0d5b      	lsrs	r3, r3, #21
 8004ff2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ff6:	4b08      	ldr	r3, [pc, #32]	; (8005018 <I2C_TransferConfig+0x60>)
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	ea02 0103 	and.w	r1, r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	03ff63ff 	.word	0x03ff63ff

0800501c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b20      	cmp	r3, #32
 8005030:	d138      	bne.n	80050a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800503c:	2302      	movs	r3, #2
 800503e:	e032      	b.n	80050a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2224      	movs	r2, #36	; 0x24
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0201 	bic.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800506e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6819      	ldr	r1, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	e000      	b.n	80050a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050a4:	2302      	movs	r3, #2
  }
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d139      	bne.n	800513c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e033      	b.n	800513e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2224      	movs	r2, #36	; 0x24
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005104:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800513c:	2302      	movs	r3, #2
  }
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
	...

0800514c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e0bf      	b.n	80052de <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fb fde6 	bl	8000d44 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800518e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6999      	ldr	r1, [r3, #24]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6899      	ldr	r1, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4b4a      	ldr	r3, [pc, #296]	; (80052e8 <HAL_LTDC_Init+0x19c>)
 80051c0:	400b      	ands	r3, r1
 80051c2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6899      	ldr	r1, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68d9      	ldr	r1, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b3e      	ldr	r3, [pc, #248]	; (80052e8 <HAL_LTDC_Init+0x19c>)
 80051ee:	400b      	ands	r3, r1
 80051f0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68d9      	ldr	r1, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1a      	ldr	r2, [r3, #32]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6919      	ldr	r1, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b33      	ldr	r3, [pc, #204]	; (80052e8 <HAL_LTDC_Init+0x19c>)
 800521c:	400b      	ands	r3, r1
 800521e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	041b      	lsls	r3, r3, #16
 8005226:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6919      	ldr	r1, [r3, #16]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6959      	ldr	r1, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	4b27      	ldr	r3, [pc, #156]	; (80052e8 <HAL_LTDC_Init+0x19c>)
 800524a:	400b      	ands	r3, r1
 800524c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	041b      	lsls	r3, r3, #16
 8005254:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6959      	ldr	r1, [r3, #20]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800528e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0206 	orr.w	r2, r2, #6
 80052ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	f000f800 	.word	0xf000f800

080052ec <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d023      	beq.n	8005356 <HAL_LTDC_IRQHandler+0x6a>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01e      	beq.n	8005356 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2204      	movs	r2, #4
 800532e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005336:	f043 0201 	orr.w	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2204      	movs	r2, #4
 8005344:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f86f 	bl	8005434 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d023      	beq.n	80053a8 <HAL_LTDC_IRQHandler+0xbc>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01e      	beq.n	80053a8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0202 	bic.w	r2, r2, #2
 8005378:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2202      	movs	r2, #2
 8005380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005388:	f043 0202 	orr.w	r2, r3, #2
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2204      	movs	r2, #4
 8005396:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f846 	bl	8005434 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01b      	beq.n	80053ea <HAL_LTDC_IRQHandler+0xfe>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d016      	beq.n	80053ea <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2201      	movs	r2, #1
 80053d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f82f 	bl	8005448 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01b      	beq.n	800542c <HAL_LTDC_IRQHandler+0x140>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d016      	beq.n	800542c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0208 	bic.w	r2, r2, #8
 800540c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2208      	movs	r2, #8
 8005414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f818 	bl	800545c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_LTDC_ConfigLayer+0x1a>
 8005486:	2302      	movs	r3, #2
 8005488:	e02c      	b.n	80054e4 <HAL_LTDC_ConfigLayer+0x74>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2134      	movs	r1, #52	; 0x34
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	4413      	add	r3, r2
 80054a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4614      	mov	r4, r2
 80054ae:	461d      	mov	r5, r3
 80054b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f811 	bl	80054ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2201      	movs	r2, #1
 80054d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bdb0      	pop	{r4, r5, r7, pc}

080054ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	0c1b      	lsrs	r3, r3, #16
 8005504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005508:	4413      	add	r3, r2
 800550a:	041b      	lsls	r3, r3, #16
 800550c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	01db      	lsls	r3, r3, #7
 8005518:	4413      	add	r3, r2
 800551a:	3384      	adds	r3, #132	; 0x84
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	4611      	mov	r1, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	01d2      	lsls	r2, r2, #7
 8005528:	440a      	add	r2, r1
 800552a:	3284      	adds	r2, #132	; 0x84
 800552c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005530:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005542:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005544:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4619      	mov	r1, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	01db      	lsls	r3, r3, #7
 8005550:	440b      	add	r3, r1
 8005552:	3384      	adds	r3, #132	; 0x84
 8005554:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800555a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800556a:	4413      	add	r3, r2
 800556c:	041b      	lsls	r3, r3, #16
 800556e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	01db      	lsls	r3, r3, #7
 800557a:	4413      	add	r3, r2
 800557c:	3384      	adds	r3, #132	; 0x84
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	4611      	mov	r1, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	01d2      	lsls	r2, r2, #7
 800558a:	440a      	add	r2, r1
 800558c:	3284      	adds	r2, #132	; 0x84
 800558e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005592:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055a2:	4413      	add	r3, r2
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4619      	mov	r1, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	01db      	lsls	r3, r3, #7
 80055b0:	440b      	add	r3, r1
 80055b2:	3384      	adds	r3, #132	; 0x84
 80055b4:	4619      	mov	r1, r3
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	01db      	lsls	r3, r3, #7
 80055c6:	4413      	add	r3, r2
 80055c8:	3384      	adds	r3, #132	; 0x84
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	4611      	mov	r1, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	01d2      	lsls	r2, r2, #7
 80055d6:	440a      	add	r2, r1
 80055d8:	3284      	adds	r2, #132	; 0x84
 80055da:	f023 0307 	bic.w	r3, r3, #7
 80055de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	01db      	lsls	r3, r3, #7
 80055ea:	4413      	add	r3, r2
 80055ec:	3384      	adds	r3, #132	; 0x84
 80055ee:	461a      	mov	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80055fc:	021b      	lsls	r3, r3, #8
 80055fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005606:	041b      	lsls	r3, r3, #16
 8005608:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	061b      	lsls	r3, r3, #24
 8005610:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	01db      	lsls	r3, r3, #7
 800561c:	4413      	add	r3, r2
 800561e:	3384      	adds	r3, #132	; 0x84
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	01db      	lsls	r3, r3, #7
 800562c:	4413      	add	r3, r2
 800562e:	3384      	adds	r3, #132	; 0x84
 8005630:	461a      	mov	r2, r3
 8005632:	2300      	movs	r3, #0
 8005634:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800563c:	461a      	mov	r2, r3
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	431a      	orrs	r2, r3
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	431a      	orrs	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4619      	mov	r1, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	01db      	lsls	r3, r3, #7
 8005650:	440b      	add	r3, r1
 8005652:	3384      	adds	r3, #132	; 0x84
 8005654:	4619      	mov	r1, r3
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	01db      	lsls	r3, r3, #7
 8005666:	4413      	add	r3, r2
 8005668:	3384      	adds	r3, #132	; 0x84
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	4611      	mov	r1, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	01d2      	lsls	r2, r2, #7
 8005676:	440a      	add	r2, r1
 8005678:	3284      	adds	r2, #132	; 0x84
 800567a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800567e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	01db      	lsls	r3, r3, #7
 800568a:	4413      	add	r3, r2
 800568c:	3384      	adds	r3, #132	; 0x84
 800568e:	461a      	mov	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	01db      	lsls	r3, r3, #7
 80056a0:	4413      	add	r3, r2
 80056a2:	3384      	adds	r3, #132	; 0x84
 80056a4:	69da      	ldr	r2, [r3, #28]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4619      	mov	r1, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	01db      	lsls	r3, r3, #7
 80056b0:	440b      	add	r3, r1
 80056b2:	3384      	adds	r3, #132	; 0x84
 80056b4:	4619      	mov	r1, r3
 80056b6:	4b58      	ldr	r3, [pc, #352]	; (8005818 <LTDC_SetConfig+0x32c>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	68f9      	ldr	r1, [r7, #12]
 80056c6:	6809      	ldr	r1, [r1, #0]
 80056c8:	4608      	mov	r0, r1
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	01c9      	lsls	r1, r1, #7
 80056ce:	4401      	add	r1, r0
 80056d0:	3184      	adds	r1, #132	; 0x84
 80056d2:	4313      	orrs	r3, r2
 80056d4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	01db      	lsls	r3, r3, #7
 80056e0:	4413      	add	r3, r2
 80056e2:	3384      	adds	r3, #132	; 0x84
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	01db      	lsls	r3, r3, #7
 80056f0:	4413      	add	r3, r2
 80056f2:	3384      	adds	r3, #132	; 0x84
 80056f4:	461a      	mov	r2, r3
 80056f6:	2300      	movs	r3, #0
 80056f8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	01db      	lsls	r3, r3, #7
 8005704:	4413      	add	r3, r2
 8005706:	3384      	adds	r3, #132	; 0x84
 8005708:	461a      	mov	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005718:	2304      	movs	r3, #4
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	e01b      	b.n	8005756 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d102      	bne.n	800572c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005726:	2303      	movs	r3, #3
 8005728:	61fb      	str	r3, [r7, #28]
 800572a:	e014      	b.n	8005756 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	2b04      	cmp	r3, #4
 8005732:	d00b      	beq.n	800574c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005738:	2b02      	cmp	r3, #2
 800573a:	d007      	beq.n	800574c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005740:	2b03      	cmp	r3, #3
 8005742:	d003      	beq.n	800574c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005748:	2b07      	cmp	r3, #7
 800574a:	d102      	bne.n	8005752 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800574c:	2302      	movs	r3, #2
 800574e:	61fb      	str	r3, [r7, #28]
 8005750:	e001      	b.n	8005756 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005752:	2301      	movs	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	01db      	lsls	r3, r3, #7
 8005760:	4413      	add	r3, r2
 8005762:	3384      	adds	r3, #132	; 0x84
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	4611      	mov	r1, r2
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	01d2      	lsls	r2, r2, #7
 8005770:	440a      	add	r2, r1
 8005772:	3284      	adds	r2, #132	; 0x84
 8005774:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005778:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	fb02 f303 	mul.w	r3, r2, r3
 8005784:	041a      	lsls	r2, r3, #16
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	6859      	ldr	r1, [r3, #4]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	1acb      	subs	r3, r1, r3
 8005790:	69f9      	ldr	r1, [r7, #28]
 8005792:	fb01 f303 	mul.w	r3, r1, r3
 8005796:	3307      	adds	r3, #7
 8005798:	68f9      	ldr	r1, [r7, #12]
 800579a:	6809      	ldr	r1, [r1, #0]
 800579c:	4608      	mov	r0, r1
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	01c9      	lsls	r1, r1, #7
 80057a2:	4401      	add	r1, r0
 80057a4:	3184      	adds	r1, #132	; 0x84
 80057a6:	4313      	orrs	r3, r2
 80057a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	01db      	lsls	r3, r3, #7
 80057b4:	4413      	add	r3, r2
 80057b6:	3384      	adds	r3, #132	; 0x84
 80057b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4619      	mov	r1, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	01db      	lsls	r3, r3, #7
 80057c4:	440b      	add	r3, r1
 80057c6:	3384      	adds	r3, #132	; 0x84
 80057c8:	4619      	mov	r1, r3
 80057ca:	4b14      	ldr	r3, [pc, #80]	; (800581c <LTDC_SetConfig+0x330>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	01db      	lsls	r3, r3, #7
 80057da:	4413      	add	r3, r2
 80057dc:	3384      	adds	r3, #132	; 0x84
 80057de:	461a      	mov	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	01db      	lsls	r3, r3, #7
 80057f0:	4413      	add	r3, r2
 80057f2:	3384      	adds	r3, #132	; 0x84
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	4611      	mov	r1, r2
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	01d2      	lsls	r2, r2, #7
 8005800:	440a      	add	r2, r1
 8005802:	3284      	adds	r2, #132	; 0x84
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	6013      	str	r3, [r2, #0]
}
 800580a:	bf00      	nop
 800580c:	3724      	adds	r7, #36	; 0x24
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	fffff8f8 	.word	0xfffff8f8
 800581c:	fffff800 	.word	0xfffff800

08005820 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005828:	4b19      	ldr	r3, [pc, #100]	; (8005890 <HAL_PWREx_ConfigSupply+0x70>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b04      	cmp	r3, #4
 8005832:	d00a      	beq.n	800584a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005834:	4b16      	ldr	r3, [pc, #88]	; (8005890 <HAL_PWREx_ConfigSupply+0x70>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	429a      	cmp	r2, r3
 8005840:	d001      	beq.n	8005846 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e01f      	b.n	8005886 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	e01d      	b.n	8005886 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800584a:	4b11      	ldr	r3, [pc, #68]	; (8005890 <HAL_PWREx_ConfigSupply+0x70>)
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f023 0207 	bic.w	r2, r3, #7
 8005852:	490f      	ldr	r1, [pc, #60]	; (8005890 <HAL_PWREx_ConfigSupply+0x70>)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4313      	orrs	r3, r2
 8005858:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800585a:	f7fc f973 	bl	8001b44 <HAL_GetTick>
 800585e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005860:	e009      	b.n	8005876 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005862:	f7fc f96f 	bl	8001b44 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005870:	d901      	bls.n	8005876 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e007      	b.n	8005886 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005876:	4b06      	ldr	r3, [pc, #24]	; (8005890 <HAL_PWREx_ConfigSupply+0x70>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800587e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005882:	d1ee      	bne.n	8005862 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	58024800 	.word	0x58024800

08005894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08c      	sub	sp, #48	; 0x30
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f000 bc1d 	b.w	80060e2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8087 	beq.w	80059c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058b6:	4b99      	ldr	r3, [pc, #612]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058c0:	4b96      	ldr	r3, [pc, #600]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d007      	beq.n	80058dc <HAL_RCC_OscConfig+0x48>
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	2b18      	cmp	r3, #24
 80058d0:	d110      	bne.n	80058f4 <HAL_RCC_OscConfig+0x60>
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	f003 0303 	and.w	r3, r3, #3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d10b      	bne.n	80058f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058dc:	4b8f      	ldr	r3, [pc, #572]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d06c      	beq.n	80059c2 <HAL_RCC_OscConfig+0x12e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d168      	bne.n	80059c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e3f6      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fc:	d106      	bne.n	800590c <HAL_RCC_OscConfig+0x78>
 80058fe:	4b87      	ldr	r3, [pc, #540]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a86      	ldr	r2, [pc, #536]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e02e      	b.n	800596a <HAL_RCC_OscConfig+0xd6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10c      	bne.n	800592e <HAL_RCC_OscConfig+0x9a>
 8005914:	4b81      	ldr	r3, [pc, #516]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a80      	ldr	r2, [pc, #512]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 800591a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	4b7e      	ldr	r3, [pc, #504]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a7d      	ldr	r2, [pc, #500]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	e01d      	b.n	800596a <HAL_RCC_OscConfig+0xd6>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005936:	d10c      	bne.n	8005952 <HAL_RCC_OscConfig+0xbe>
 8005938:	4b78      	ldr	r3, [pc, #480]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a77      	ldr	r2, [pc, #476]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 800593e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	4b75      	ldr	r3, [pc, #468]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a74      	ldr	r2, [pc, #464]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 800594a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	e00b      	b.n	800596a <HAL_RCC_OscConfig+0xd6>
 8005952:	4b72      	ldr	r3, [pc, #456]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a71      	ldr	r2, [pc, #452]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	4b6f      	ldr	r3, [pc, #444]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a6e      	ldr	r2, [pc, #440]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005968:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d013      	beq.n	800599a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005972:	f7fc f8e7 	bl	8001b44 <HAL_GetTick>
 8005976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800597a:	f7fc f8e3 	bl	8001b44 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b64      	cmp	r3, #100	; 0x64
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e3aa      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800598c:	4b63      	ldr	r3, [pc, #396]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCC_OscConfig+0xe6>
 8005998:	e014      	b.n	80059c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599a:	f7fc f8d3 	bl	8001b44 <HAL_GetTick>
 800599e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059a0:	e008      	b.n	80059b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059a2:	f7fc f8cf 	bl	8001b44 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b64      	cmp	r3, #100	; 0x64
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e396      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059b4:	4b59      	ldr	r3, [pc, #356]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1f0      	bne.n	80059a2 <HAL_RCC_OscConfig+0x10e>
 80059c0:	e000      	b.n	80059c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80cb 	beq.w	8005b68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059d2:	4b52      	ldr	r3, [pc, #328]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059dc:	4b4f      	ldr	r3, [pc, #316]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <HAL_RCC_OscConfig+0x164>
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	2b18      	cmp	r3, #24
 80059ec:	d156      	bne.n	8005a9c <HAL_RCC_OscConfig+0x208>
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d151      	bne.n	8005a9c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059f8:	4b48      	ldr	r3, [pc, #288]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_RCC_OscConfig+0x17c>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e368      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a10:	4b42      	ldr	r3, [pc, #264]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f023 0219 	bic.w	r2, r3, #25
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	493f      	ldr	r1, [pc, #252]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a22:	f7fc f88f 	bl	8001b44 <HAL_GetTick>
 8005a26:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a2a:	f7fc f88b 	bl	8001b44 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e352      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a3c:	4b37      	ldr	r3, [pc, #220]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a48:	f7fc f8ac 	bl	8001ba4 <HAL_GetREVID>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d817      	bhi.n	8005a86 <HAL_RCC_OscConfig+0x1f2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b40      	cmp	r3, #64	; 0x40
 8005a5c:	d108      	bne.n	8005a70 <HAL_RCC_OscConfig+0x1dc>
 8005a5e:	4b2f      	ldr	r3, [pc, #188]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005a66:	4a2d      	ldr	r2, [pc, #180]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a6c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a6e:	e07b      	b.n	8005b68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a70:	4b2a      	ldr	r3, [pc, #168]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	031b      	lsls	r3, r3, #12
 8005a7e:	4927      	ldr	r1, [pc, #156]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a84:	e070      	b.n	8005b68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a86:	4b25      	ldr	r3, [pc, #148]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	061b      	lsls	r3, r3, #24
 8005a94:	4921      	ldr	r1, [pc, #132]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a9a:	e065      	b.n	8005b68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d048      	beq.n	8005b36 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005aa4:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f023 0219 	bic.w	r2, r3, #25
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	491a      	ldr	r1, [pc, #104]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab6:	f7fc f845 	bl	8001b44 <HAL_GetTick>
 8005aba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005abe:	f7fc f841 	bl	8001b44 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e308      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ad0:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f0      	beq.n	8005abe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005adc:	f7fc f862 	bl	8001ba4 <HAL_GetREVID>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d81a      	bhi.n	8005b20 <HAL_RCC_OscConfig+0x28c>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b40      	cmp	r3, #64	; 0x40
 8005af0:	d108      	bne.n	8005b04 <HAL_RCC_OscConfig+0x270>
 8005af2:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005afa:	4a08      	ldr	r2, [pc, #32]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b00:	6053      	str	r3, [r2, #4]
 8005b02:	e031      	b.n	8005b68 <HAL_RCC_OscConfig+0x2d4>
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	031b      	lsls	r3, r3, #12
 8005b12:	4902      	ldr	r1, [pc, #8]	; (8005b1c <HAL_RCC_OscConfig+0x288>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	604b      	str	r3, [r1, #4]
 8005b18:	e026      	b.n	8005b68 <HAL_RCC_OscConfig+0x2d4>
 8005b1a:	bf00      	nop
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	4b9a      	ldr	r3, [pc, #616]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	4997      	ldr	r1, [pc, #604]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	604b      	str	r3, [r1, #4]
 8005b34:	e018      	b.n	8005b68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b36:	4b95      	ldr	r3, [pc, #596]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a94      	ldr	r2, [pc, #592]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b42:	f7fb ffff 	bl	8001b44 <HAL_GetTick>
 8005b46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b4a:	f7fb fffb 	bl	8001b44 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e2c2      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b5c:	4b8b      	ldr	r3, [pc, #556]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f0      	bne.n	8005b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80a9 	beq.w	8005cc8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b76:	4b85      	ldr	r3, [pc, #532]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b80:	4b82      	ldr	r3, [pc, #520]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d007      	beq.n	8005b9c <HAL_RCC_OscConfig+0x308>
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b18      	cmp	r3, #24
 8005b90:	d13a      	bne.n	8005c08 <HAL_RCC_OscConfig+0x374>
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d135      	bne.n	8005c08 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b9c:	4b7b      	ldr	r3, [pc, #492]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x320>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	2b80      	cmp	r3, #128	; 0x80
 8005bae:	d001      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e296      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bb4:	f7fb fff6 	bl	8001ba4 <HAL_GetREVID>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d817      	bhi.n	8005bf2 <HAL_RCC_OscConfig+0x35e>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d108      	bne.n	8005bdc <HAL_RCC_OscConfig+0x348>
 8005bca:	4b70      	ldr	r3, [pc, #448]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005bd2:	4a6e      	ldr	r2, [pc, #440]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bd8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bda:	e075      	b.n	8005cc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bdc:	4b6b      	ldr	r3, [pc, #428]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	069b      	lsls	r3, r3, #26
 8005bea:	4968      	ldr	r1, [pc, #416]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bf0:	e06a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bf2:	4b66      	ldr	r3, [pc, #408]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	061b      	lsls	r3, r3, #24
 8005c00:	4962      	ldr	r1, [pc, #392]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c06:	e05f      	b.n	8005cc8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d042      	beq.n	8005c96 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c10:	4b5e      	ldr	r3, [pc, #376]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a5d      	ldr	r2, [pc, #372]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1c:	f7fb ff92 	bl	8001b44 <HAL_GetTick>
 8005c20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005c24:	f7fb ff8e 	bl	8001b44 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e255      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c36:	4b55      	ldr	r3, [pc, #340]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c42:	f7fb ffaf 	bl	8001ba4 <HAL_GetREVID>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d817      	bhi.n	8005c80 <HAL_RCC_OscConfig+0x3ec>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d108      	bne.n	8005c6a <HAL_RCC_OscConfig+0x3d6>
 8005c58:	4b4c      	ldr	r3, [pc, #304]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c60:	4a4a      	ldr	r2, [pc, #296]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005c62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c66:	6053      	str	r3, [r2, #4]
 8005c68:	e02e      	b.n	8005cc8 <HAL_RCC_OscConfig+0x434>
 8005c6a:	4b48      	ldr	r3, [pc, #288]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	069b      	lsls	r3, r3, #26
 8005c78:	4944      	ldr	r1, [pc, #272]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	604b      	str	r3, [r1, #4]
 8005c7e:	e023      	b.n	8005cc8 <HAL_RCC_OscConfig+0x434>
 8005c80:	4b42      	ldr	r3, [pc, #264]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	061b      	lsls	r3, r3, #24
 8005c8e:	493f      	ldr	r1, [pc, #252]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60cb      	str	r3, [r1, #12]
 8005c94:	e018      	b.n	8005cc8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c96:	4b3d      	ldr	r3, [pc, #244]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a3c      	ldr	r2, [pc, #240]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca2:	f7fb ff4f 	bl	8001b44 <HAL_GetTick>
 8005ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005caa:	f7fb ff4b 	bl	8001b44 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e212      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005cbc:	4b33      	ldr	r3, [pc, #204]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1f0      	bne.n	8005caa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d036      	beq.n	8005d42 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d019      	beq.n	8005d10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cdc:	4b2b      	ldr	r3, [pc, #172]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce0:	4a2a      	ldr	r2, [pc, #168]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce8:	f7fb ff2c 	bl	8001b44 <HAL_GetTick>
 8005cec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cf0:	f7fb ff28 	bl	8001b44 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e1ef      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d02:	4b22      	ldr	r3, [pc, #136]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0f0      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x45c>
 8005d0e:	e018      	b.n	8005d42 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d10:	4b1e      	ldr	r3, [pc, #120]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d14:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1c:	f7fb ff12 	bl	8001b44 <HAL_GetTick>
 8005d20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d24:	f7fb ff0e 	bl	8001b44 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e1d5      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d36:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f0      	bne.n	8005d24 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d039      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d01c      	beq.n	8005d90 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d56:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a0c      	ldr	r2, [pc, #48]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d62:	f7fb feef 	bl	8001b44 <HAL_GetTick>
 8005d66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d68:	e008      	b.n	8005d7c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005d6a:	f7fb feeb 	bl	8001b44 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e1b2      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d7c:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <HAL_RCC_OscConfig+0x4f8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f0      	beq.n	8005d6a <HAL_RCC_OscConfig+0x4d6>
 8005d88:	e01b      	b.n	8005dc2 <HAL_RCC_OscConfig+0x52e>
 8005d8a:	bf00      	nop
 8005d8c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d90:	4b9b      	ldr	r3, [pc, #620]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a9a      	ldr	r2, [pc, #616]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d9c:	f7fb fed2 	bl	8001b44 <HAL_GetTick>
 8005da0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005da4:	f7fb fece 	bl	8001b44 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e195      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005db6:	4b92      	ldr	r3, [pc, #584]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f0      	bne.n	8005da4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8081 	beq.w	8005ed2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005dd0:	4b8c      	ldr	r3, [pc, #560]	; (8006004 <HAL_RCC_OscConfig+0x770>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a8b      	ldr	r2, [pc, #556]	; (8006004 <HAL_RCC_OscConfig+0x770>)
 8005dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ddc:	f7fb feb2 	bl	8001b44 <HAL_GetTick>
 8005de0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005de4:	f7fb feae 	bl	8001b44 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b64      	cmp	r3, #100	; 0x64
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e175      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005df6:	4b83      	ldr	r3, [pc, #524]	; (8006004 <HAL_RCC_OscConfig+0x770>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d106      	bne.n	8005e18 <HAL_RCC_OscConfig+0x584>
 8005e0a:	4b7d      	ldr	r3, [pc, #500]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0e:	4a7c      	ldr	r2, [pc, #496]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	6713      	str	r3, [r2, #112]	; 0x70
 8005e16:	e02d      	b.n	8005e74 <HAL_RCC_OscConfig+0x5e0>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10c      	bne.n	8005e3a <HAL_RCC_OscConfig+0x5a6>
 8005e20:	4b77      	ldr	r3, [pc, #476]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e24:	4a76      	ldr	r2, [pc, #472]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e2c:	4b74      	ldr	r3, [pc, #464]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	4a73      	ldr	r2, [pc, #460]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e32:	f023 0304 	bic.w	r3, r3, #4
 8005e36:	6713      	str	r3, [r2, #112]	; 0x70
 8005e38:	e01c      	b.n	8005e74 <HAL_RCC_OscConfig+0x5e0>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d10c      	bne.n	8005e5c <HAL_RCC_OscConfig+0x5c8>
 8005e42:	4b6f      	ldr	r3, [pc, #444]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	4a6e      	ldr	r2, [pc, #440]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e48:	f043 0304 	orr.w	r3, r3, #4
 8005e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e4e:	4b6c      	ldr	r3, [pc, #432]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e52:	4a6b      	ldr	r2, [pc, #428]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	6713      	str	r3, [r2, #112]	; 0x70
 8005e5a:	e00b      	b.n	8005e74 <HAL_RCC_OscConfig+0x5e0>
 8005e5c:	4b68      	ldr	r3, [pc, #416]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e60:	4a67      	ldr	r2, [pc, #412]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e62:	f023 0301 	bic.w	r3, r3, #1
 8005e66:	6713      	str	r3, [r2, #112]	; 0x70
 8005e68:	4b65      	ldr	r3, [pc, #404]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	4a64      	ldr	r2, [pc, #400]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e6e:	f023 0304 	bic.w	r3, r3, #4
 8005e72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d015      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7c:	f7fb fe62 	bl	8001b44 <HAL_GetTick>
 8005e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e82:	e00a      	b.n	8005e9a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e84:	f7fb fe5e 	bl	8001b44 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e123      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e9a:	4b59      	ldr	r3, [pc, #356]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0ee      	beq.n	8005e84 <HAL_RCC_OscConfig+0x5f0>
 8005ea6:	e014      	b.n	8005ed2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea8:	f7fb fe4c 	bl	8001b44 <HAL_GetTick>
 8005eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005eae:	e00a      	b.n	8005ec6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eb0:	f7fb fe48 	bl	8001b44 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e10d      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ec6:	4b4e      	ldr	r3, [pc, #312]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1ee      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 8102 	beq.w	80060e0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005edc:	4b48      	ldr	r3, [pc, #288]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ee4:	2b18      	cmp	r3, #24
 8005ee6:	f000 80bd 	beq.w	8006064 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	f040 809e 	bne.w	8006030 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef4:	4b42      	ldr	r3, [pc, #264]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a41      	ldr	r2, [pc, #260]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f00:	f7fb fe20 	bl	8001b44 <HAL_GetTick>
 8005f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f08:	f7fb fe1c 	bl	8001b44 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e0e3      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f1a:	4b39      	ldr	r3, [pc, #228]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f0      	bne.n	8005f08 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f26:	4b36      	ldr	r3, [pc, #216]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f2a:	4b37      	ldr	r3, [pc, #220]	; (8006008 <HAL_RCC_OscConfig+0x774>)
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f36:	0112      	lsls	r2, r2, #4
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	4931      	ldr	r1, [pc, #196]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	628b      	str	r3, [r1, #40]	; 0x28
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	3b01      	subs	r3, #1
 8005f46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	025b      	lsls	r3, r3, #9
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	041b      	lsls	r3, r3, #16
 8005f5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	061b      	lsls	r3, r3, #24
 8005f6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f70:	4923      	ldr	r1, [pc, #140]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005f76:	4b22      	ldr	r3, [pc, #136]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	4a21      	ldr	r2, [pc, #132]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f82:	4b1f      	ldr	r3, [pc, #124]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f86:	4b21      	ldr	r3, [pc, #132]	; (800600c <HAL_RCC_OscConfig+0x778>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f8e:	00d2      	lsls	r2, r2, #3
 8005f90:	491b      	ldr	r1, [pc, #108]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005f96:	4b1a      	ldr	r3, [pc, #104]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	f023 020c 	bic.w	r2, r3, #12
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	4917      	ldr	r1, [pc, #92]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005fa8:	4b15      	ldr	r3, [pc, #84]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	f023 0202 	bic.w	r2, r3, #2
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb4:	4912      	ldr	r1, [pc, #72]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fba:	4b11      	ldr	r3, [pc, #68]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	4a10      	ldr	r2, [pc, #64]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc6:	4b0e      	ldr	r3, [pc, #56]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	4a0d      	ldr	r2, [pc, #52]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005fd2:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	4a0a      	ldr	r2, [pc, #40]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005fde:	4b08      	ldr	r3, [pc, #32]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	4a07      	ldr	r2, [pc, #28]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fea:	4b05      	ldr	r3, [pc, #20]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a04      	ldr	r2, [pc, #16]	; (8006000 <HAL_RCC_OscConfig+0x76c>)
 8005ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff6:	f7fb fda5 	bl	8001b44 <HAL_GetTick>
 8005ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ffc:	e011      	b.n	8006022 <HAL_RCC_OscConfig+0x78e>
 8005ffe:	bf00      	nop
 8006000:	58024400 	.word	0x58024400
 8006004:	58024800 	.word	0x58024800
 8006008:	fffffc0c 	.word	0xfffffc0c
 800600c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006010:	f7fb fd98 	bl	8001b44 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e05f      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006022:	4b32      	ldr	r3, [pc, #200]	; (80060ec <HAL_RCC_OscConfig+0x858>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0f0      	beq.n	8006010 <HAL_RCC_OscConfig+0x77c>
 800602e:	e057      	b.n	80060e0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006030:	4b2e      	ldr	r3, [pc, #184]	; (80060ec <HAL_RCC_OscConfig+0x858>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a2d      	ldr	r2, [pc, #180]	; (80060ec <HAL_RCC_OscConfig+0x858>)
 8006036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800603a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603c:	f7fb fd82 	bl	8001b44 <HAL_GetTick>
 8006040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006044:	f7fb fd7e 	bl	8001b44 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e045      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006056:	4b25      	ldr	r3, [pc, #148]	; (80060ec <HAL_RCC_OscConfig+0x858>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f0      	bne.n	8006044 <HAL_RCC_OscConfig+0x7b0>
 8006062:	e03d      	b.n	80060e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006064:	4b21      	ldr	r3, [pc, #132]	; (80060ec <HAL_RCC_OscConfig+0x858>)
 8006066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006068:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800606a:	4b20      	ldr	r3, [pc, #128]	; (80060ec <HAL_RCC_OscConfig+0x858>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	2b01      	cmp	r3, #1
 8006076:	d031      	beq.n	80060dc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f003 0203 	and.w	r2, r3, #3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006082:	429a      	cmp	r2, r3
 8006084:	d12a      	bne.n	80060dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	091b      	lsrs	r3, r3, #4
 800608a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006092:	429a      	cmp	r2, r3
 8006094:	d122      	bne.n	80060dc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d11a      	bne.n	80060dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	0a5b      	lsrs	r3, r3, #9
 80060aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d111      	bne.n	80060dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	0c1b      	lsrs	r3, r3, #16
 80060bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d108      	bne.n	80060dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	0e1b      	lsrs	r3, r3, #24
 80060ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060d8:	429a      	cmp	r2, r3
 80060da:	d001      	beq.n	80060e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3730      	adds	r7, #48	; 0x30
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	58024400 	.word	0x58024400

080060f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e19c      	b.n	800643e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006104:	4b8a      	ldr	r3, [pc, #552]	; (8006330 <HAL_RCC_ClockConfig+0x240>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d910      	bls.n	8006134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006112:	4b87      	ldr	r3, [pc, #540]	; (8006330 <HAL_RCC_ClockConfig+0x240>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f023 020f 	bic.w	r2, r3, #15
 800611a:	4985      	ldr	r1, [pc, #532]	; (8006330 <HAL_RCC_ClockConfig+0x240>)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	4313      	orrs	r3, r2
 8006120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006122:	4b83      	ldr	r3, [pc, #524]	; (8006330 <HAL_RCC_ClockConfig+0x240>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	429a      	cmp	r2, r3
 800612e:	d001      	beq.n	8006134 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e184      	b.n	800643e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d010      	beq.n	8006162 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	4b7b      	ldr	r3, [pc, #492]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800614c:	429a      	cmp	r2, r3
 800614e:	d908      	bls.n	8006162 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006150:	4b78      	ldr	r3, [pc, #480]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	4975      	ldr	r1, [pc, #468]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 800615e:	4313      	orrs	r3, r2
 8006160:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d010      	beq.n	8006190 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	4b70      	ldr	r3, [pc, #448]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800617a:	429a      	cmp	r2, r3
 800617c:	d908      	bls.n	8006190 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800617e:	4b6d      	ldr	r3, [pc, #436]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	496a      	ldr	r1, [pc, #424]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 800618c:	4313      	orrs	r3, r2
 800618e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b00      	cmp	r3, #0
 800619a:	d010      	beq.n	80061be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699a      	ldr	r2, [r3, #24]
 80061a0:	4b64      	ldr	r3, [pc, #400]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d908      	bls.n	80061be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80061ac:	4b61      	ldr	r3, [pc, #388]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	495e      	ldr	r1, [pc, #376]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d010      	beq.n	80061ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	4b59      	ldr	r3, [pc, #356]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d908      	bls.n	80061ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80061da:	4b56      	ldr	r3, [pc, #344]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	4953      	ldr	r1, [pc, #332]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d010      	beq.n	800621a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	4b4d      	ldr	r3, [pc, #308]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f003 030f 	and.w	r3, r3, #15
 8006204:	429a      	cmp	r2, r3
 8006206:	d908      	bls.n	800621a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006208:	4b4a      	ldr	r3, [pc, #296]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f023 020f 	bic.w	r2, r3, #15
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4947      	ldr	r1, [pc, #284]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 8006216:	4313      	orrs	r3, r2
 8006218:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d055      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006226:	4b43      	ldr	r3, [pc, #268]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	4940      	ldr	r1, [pc, #256]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 8006234:	4313      	orrs	r3, r2
 8006236:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d107      	bne.n	8006250 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006240:	4b3c      	ldr	r3, [pc, #240]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d121      	bne.n	8006290 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e0f6      	b.n	800643e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d107      	bne.n	8006268 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006258:	4b36      	ldr	r3, [pc, #216]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d115      	bne.n	8006290 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e0ea      	b.n	800643e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d107      	bne.n	8006280 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006270:	4b30      	ldr	r3, [pc, #192]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006278:	2b00      	cmp	r3, #0
 800627a:	d109      	bne.n	8006290 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e0de      	b.n	800643e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006280:	4b2c      	ldr	r3, [pc, #176]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e0d6      	b.n	800643e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006290:	4b28      	ldr	r3, [pc, #160]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f023 0207 	bic.w	r2, r3, #7
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	4925      	ldr	r1, [pc, #148]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a2:	f7fb fc4f 	bl	8001b44 <HAL_GetTick>
 80062a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a8:	e00a      	b.n	80062c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062aa:	f7fb fc4b 	bl	8001b44 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e0be      	b.n	800643e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c0:	4b1c      	ldr	r3, [pc, #112]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d1eb      	bne.n	80062aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d010      	beq.n	8006300 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	4b14      	ldr	r3, [pc, #80]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d208      	bcs.n	8006300 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ee:	4b11      	ldr	r3, [pc, #68]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	f023 020f 	bic.w	r2, r3, #15
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	490e      	ldr	r1, [pc, #56]	; (8006334 <HAL_RCC_ClockConfig+0x244>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006300:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <HAL_RCC_ClockConfig+0x240>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d214      	bcs.n	8006338 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630e:	4b08      	ldr	r3, [pc, #32]	; (8006330 <HAL_RCC_ClockConfig+0x240>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f023 020f 	bic.w	r2, r3, #15
 8006316:	4906      	ldr	r1, [pc, #24]	; (8006330 <HAL_RCC_ClockConfig+0x240>)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	4313      	orrs	r3, r2
 800631c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800631e:	4b04      	ldr	r3, [pc, #16]	; (8006330 <HAL_RCC_ClockConfig+0x240>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d005      	beq.n	8006338 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e086      	b.n	800643e <HAL_RCC_ClockConfig+0x34e>
 8006330:	52002000 	.word	0x52002000
 8006334:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d010      	beq.n	8006366 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	4b3f      	ldr	r3, [pc, #252]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006350:	429a      	cmp	r2, r3
 8006352:	d208      	bcs.n	8006366 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006354:	4b3c      	ldr	r3, [pc, #240]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	4939      	ldr	r1, [pc, #228]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 8006362:	4313      	orrs	r3, r2
 8006364:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0308 	and.w	r3, r3, #8
 800636e:	2b00      	cmp	r3, #0
 8006370:	d010      	beq.n	8006394 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695a      	ldr	r2, [r3, #20]
 8006376:	4b34      	ldr	r3, [pc, #208]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800637e:	429a      	cmp	r2, r3
 8006380:	d208      	bcs.n	8006394 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006382:	4b31      	ldr	r3, [pc, #196]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	492e      	ldr	r1, [pc, #184]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 8006390:	4313      	orrs	r3, r2
 8006392:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b00      	cmp	r3, #0
 800639e:	d010      	beq.n	80063c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	4b28      	ldr	r3, [pc, #160]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d208      	bcs.n	80063c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063b0:	4b25      	ldr	r3, [pc, #148]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	4922      	ldr	r1, [pc, #136]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d010      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69da      	ldr	r2, [r3, #28]
 80063d2:	4b1d      	ldr	r3, [pc, #116]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063da:	429a      	cmp	r2, r3
 80063dc:	d208      	bcs.n	80063f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80063de:	4b1a      	ldr	r3, [pc, #104]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	4917      	ldr	r1, [pc, #92]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80063f0:	f000 f834 	bl	800645c <HAL_RCC_GetSysClockFreq>
 80063f4:	4602      	mov	r2, r0
 80063f6:	4b14      	ldr	r3, [pc, #80]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	0a1b      	lsrs	r3, r3, #8
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	4912      	ldr	r1, [pc, #72]	; (800644c <HAL_RCC_ClockConfig+0x35c>)
 8006402:	5ccb      	ldrb	r3, [r1, r3]
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	fa22 f303 	lsr.w	r3, r2, r3
 800640c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800640e:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <HAL_RCC_ClockConfig+0x358>)
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	4a0d      	ldr	r2, [pc, #52]	; (800644c <HAL_RCC_ClockConfig+0x35c>)
 8006418:	5cd3      	ldrb	r3, [r2, r3]
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	fa22 f303 	lsr.w	r3, r2, r3
 8006424:	4a0a      	ldr	r2, [pc, #40]	; (8006450 <HAL_RCC_ClockConfig+0x360>)
 8006426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006428:	4a0a      	ldr	r2, [pc, #40]	; (8006454 <HAL_RCC_ClockConfig+0x364>)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800642e:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <HAL_RCC_ClockConfig+0x368>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4618      	mov	r0, r3
 8006434:	f7fb f80e 	bl	8001454 <HAL_InitTick>
 8006438:	4603      	mov	r3, r0
 800643a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	58024400 	.word	0x58024400
 800644c:	0800a220 	.word	0x0800a220
 8006450:	24000004 	.word	0x24000004
 8006454:	24000000 	.word	0x24000000
 8006458:	24000008 	.word	0x24000008

0800645c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800645c:	b480      	push	{r7}
 800645e:	b089      	sub	sp, #36	; 0x24
 8006460:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006462:	4bb3      	ldr	r3, [pc, #716]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800646a:	2b18      	cmp	r3, #24
 800646c:	f200 8155 	bhi.w	800671a <HAL_RCC_GetSysClockFreq+0x2be>
 8006470:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006476:	bf00      	nop
 8006478:	080064dd 	.word	0x080064dd
 800647c:	0800671b 	.word	0x0800671b
 8006480:	0800671b 	.word	0x0800671b
 8006484:	0800671b 	.word	0x0800671b
 8006488:	0800671b 	.word	0x0800671b
 800648c:	0800671b 	.word	0x0800671b
 8006490:	0800671b 	.word	0x0800671b
 8006494:	0800671b 	.word	0x0800671b
 8006498:	08006503 	.word	0x08006503
 800649c:	0800671b 	.word	0x0800671b
 80064a0:	0800671b 	.word	0x0800671b
 80064a4:	0800671b 	.word	0x0800671b
 80064a8:	0800671b 	.word	0x0800671b
 80064ac:	0800671b 	.word	0x0800671b
 80064b0:	0800671b 	.word	0x0800671b
 80064b4:	0800671b 	.word	0x0800671b
 80064b8:	08006509 	.word	0x08006509
 80064bc:	0800671b 	.word	0x0800671b
 80064c0:	0800671b 	.word	0x0800671b
 80064c4:	0800671b 	.word	0x0800671b
 80064c8:	0800671b 	.word	0x0800671b
 80064cc:	0800671b 	.word	0x0800671b
 80064d0:	0800671b 	.word	0x0800671b
 80064d4:	0800671b 	.word	0x0800671b
 80064d8:	0800650f 	.word	0x0800650f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064dc:	4b94      	ldr	r3, [pc, #592]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d009      	beq.n	80064fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064e8:	4b91      	ldr	r3, [pc, #580]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	08db      	lsrs	r3, r3, #3
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	4a90      	ldr	r2, [pc, #576]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064f4:	fa22 f303 	lsr.w	r3, r2, r3
 80064f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80064fa:	e111      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80064fc:	4b8d      	ldr	r3, [pc, #564]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064fe:	61bb      	str	r3, [r7, #24]
    break;
 8006500:	e10e      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006502:	4b8d      	ldr	r3, [pc, #564]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006504:	61bb      	str	r3, [r7, #24]
    break;
 8006506:	e10b      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006508:	4b8c      	ldr	r3, [pc, #560]	; (800673c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800650a:	61bb      	str	r3, [r7, #24]
    break;
 800650c:	e108      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800650e:	4b88      	ldr	r3, [pc, #544]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006518:	4b85      	ldr	r3, [pc, #532]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006522:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006524:	4b82      	ldr	r3, [pc, #520]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800652e:	4b80      	ldr	r3, [pc, #512]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	08db      	lsrs	r3, r3, #3
 8006534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	fb02 f303 	mul.w	r3, r2, r3
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80e1 	beq.w	8006714 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b02      	cmp	r3, #2
 8006556:	f000 8083 	beq.w	8006660 <HAL_RCC_GetSysClockFreq+0x204>
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b02      	cmp	r3, #2
 800655e:	f200 80a1 	bhi.w	80066a4 <HAL_RCC_GetSysClockFreq+0x248>
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <HAL_RCC_GetSysClockFreq+0x114>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d056      	beq.n	800661c <HAL_RCC_GetSysClockFreq+0x1c0>
 800656e:	e099      	b.n	80066a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006570:	4b6f      	ldr	r3, [pc, #444]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d02d      	beq.n	80065d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800657c:	4b6c      	ldr	r3, [pc, #432]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	08db      	lsrs	r3, r3, #3
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	4a6b      	ldr	r2, [pc, #428]	; (8006734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
 800658c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	ee07 3a90 	vmov	s15, r3
 8006594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a6:	4b62      	ldr	r3, [pc, #392]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006740 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80065d6:	e087      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006744 <HAL_RCC_GetSysClockFreq+0x2e8>
 80065e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ea:	4b51      	ldr	r3, [pc, #324]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80065fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006740 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800660e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800661a:	e065      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006626:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006748 <HAL_RCC_GetSysClockFreq+0x2ec>
 800662a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800662e:	4b40      	ldr	r3, [pc, #256]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006636:	ee07 3a90 	vmov	s15, r3
 800663a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800663e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006642:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006740 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800664a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800664e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800665e:	e043      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	ee07 3a90 	vmov	s15, r3
 8006666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800666a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800674c <HAL_RCC_GetSysClockFreq+0x2f0>
 800666e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006672:	4b2f      	ldr	r3, [pc, #188]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006682:	ed97 6a02 	vldr	s12, [r7, #8]
 8006686:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800668a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800668e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800669e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066a2:	e021      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006748 <HAL_RCC_GetSysClockFreq+0x2ec>
 80066b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b6:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006740 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80066e8:	4b11      	ldr	r3, [pc, #68]	; (8006730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	0a5b      	lsrs	r3, r3, #9
 80066ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f2:	3301      	adds	r3, #1
 80066f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006700:	edd7 6a07 	vldr	s13, [r7, #28]
 8006704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800670c:	ee17 3a90 	vmov	r3, s15
 8006710:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006712:	e005      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	61bb      	str	r3, [r7, #24]
    break;
 8006718:	e002      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800671c:	61bb      	str	r3, [r7, #24]
    break;
 800671e:	bf00      	nop
  }

  return sysclockfreq;
 8006720:	69bb      	ldr	r3, [r7, #24]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3724      	adds	r7, #36	; 0x24
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	58024400 	.word	0x58024400
 8006734:	03d09000 	.word	0x03d09000
 8006738:	003d0900 	.word	0x003d0900
 800673c:	007a1200 	.word	0x007a1200
 8006740:	46000000 	.word	0x46000000
 8006744:	4c742400 	.word	0x4c742400
 8006748:	4a742400 	.word	0x4a742400
 800674c:	4af42400 	.word	0x4af42400

08006750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006756:	f7ff fe81 	bl	800645c <HAL_RCC_GetSysClockFreq>
 800675a:	4602      	mov	r2, r0
 800675c:	4b10      	ldr	r3, [pc, #64]	; (80067a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	0a1b      	lsrs	r3, r3, #8
 8006762:	f003 030f 	and.w	r3, r3, #15
 8006766:	490f      	ldr	r1, [pc, #60]	; (80067a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006768:	5ccb      	ldrb	r3, [r1, r3]
 800676a:	f003 031f 	and.w	r3, r3, #31
 800676e:	fa22 f303 	lsr.w	r3, r2, r3
 8006772:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006774:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	4a09      	ldr	r2, [pc, #36]	; (80067a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800677e:	5cd3      	ldrb	r3, [r2, r3]
 8006780:	f003 031f 	and.w	r3, r3, #31
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	fa22 f303 	lsr.w	r3, r2, r3
 800678a:	4a07      	ldr	r2, [pc, #28]	; (80067a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800678c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800678e:	4a07      	ldr	r2, [pc, #28]	; (80067ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006794:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006796:	681b      	ldr	r3, [r3, #0]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	58024400 	.word	0x58024400
 80067a4:	0800a220 	.word	0x0800a220
 80067a8:	24000004 	.word	0x24000004
 80067ac:	24000000 	.word	0x24000000

080067b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80067b4:	f7ff ffcc 	bl	8006750 <HAL_RCC_GetHCLKFreq>
 80067b8:	4602      	mov	r2, r0
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	0a1b      	lsrs	r3, r3, #8
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	4904      	ldr	r1, [pc, #16]	; (80067d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067c6:	5ccb      	ldrb	r3, [r1, r3]
 80067c8:	f003 031f 	and.w	r3, r3, #31
 80067cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	58024400 	.word	0x58024400
 80067d8:	0800a220 	.word	0x0800a220

080067dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	223f      	movs	r2, #63	; 0x3f
 80067ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067ec:	4b1a      	ldr	r3, [pc, #104]	; (8006858 <HAL_RCC_GetClockConfig+0x7c>)
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	f003 0207 	and.w	r2, r3, #7
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80067f8:	4b17      	ldr	r3, [pc, #92]	; (8006858 <HAL_RCC_GetClockConfig+0x7c>)
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006804:	4b14      	ldr	r3, [pc, #80]	; (8006858 <HAL_RCC_GetClockConfig+0x7c>)
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	f003 020f 	and.w	r2, r3, #15
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006810:	4b11      	ldr	r3, [pc, #68]	; (8006858 <HAL_RCC_GetClockConfig+0x7c>)
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800681c:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <HAL_RCC_GetClockConfig+0x7c>)
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006828:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <HAL_RCC_GetClockConfig+0x7c>)
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006834:	4b08      	ldr	r3, [pc, #32]	; (8006858 <HAL_RCC_GetClockConfig+0x7c>)
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <HAL_RCC_GetClockConfig+0x80>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 020f 	and.w	r2, r3, #15
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	601a      	str	r2, [r3, #0]
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	58024400 	.word	0x58024400
 800685c:	52002000 	.word	0x52002000

08006860 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006868:	2300      	movs	r3, #0
 800686a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800686c:	2300      	movs	r3, #0
 800686e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d03f      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006880:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006884:	d02a      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006886:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800688a:	d824      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800688c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006890:	d018      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006896:	d81e      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800689c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068a0:	d007      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80068a2:	e018      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a4:	4ba3      	ldr	r3, [pc, #652]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	4aa2      	ldr	r2, [pc, #648]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80068b0:	e015      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3304      	adds	r3, #4
 80068b6:	2102      	movs	r1, #2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 fff9 	bl	80088b0 <RCCEx_PLL2_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80068c2:	e00c      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3324      	adds	r3, #36	; 0x24
 80068c8:	2102      	movs	r1, #2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f002 f8a2 	bl	8008a14 <RCCEx_PLL3_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80068d4:	e003      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	75fb      	strb	r3, [r7, #23]
      break;
 80068da:	e000      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80068dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068de:	7dfb      	ldrb	r3, [r7, #23]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80068e4:	4b93      	ldr	r3, [pc, #588]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f0:	4990      	ldr	r1, [pc, #576]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	650b      	str	r3, [r1, #80]	; 0x50
 80068f6:	e001      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
 80068fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006904:	2b00      	cmp	r3, #0
 8006906:	d03d      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690c:	2b04      	cmp	r3, #4
 800690e:	d826      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006910:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	0800692d 	.word	0x0800692d
 800691c:	0800693b 	.word	0x0800693b
 8006920:	0800694d 	.word	0x0800694d
 8006924:	08006965 	.word	0x08006965
 8006928:	08006965 	.word	0x08006965
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800692c:	4b81      	ldr	r3, [pc, #516]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	4a80      	ldr	r2, [pc, #512]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006938:	e015      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3304      	adds	r3, #4
 800693e:	2100      	movs	r1, #0
 8006940:	4618      	mov	r0, r3
 8006942:	f001 ffb5 	bl	80088b0 <RCCEx_PLL2_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800694a:	e00c      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3324      	adds	r3, #36	; 0x24
 8006950:	2100      	movs	r1, #0
 8006952:	4618      	mov	r0, r3
 8006954:	f002 f85e 	bl	8008a14 <RCCEx_PLL3_Config>
 8006958:	4603      	mov	r3, r0
 800695a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800695c:	e003      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]
      break;
 8006962:	e000      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d109      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800696c:	4b71      	ldr	r3, [pc, #452]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	f023 0207 	bic.w	r2, r3, #7
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006978:	496e      	ldr	r1, [pc, #440]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800697a:	4313      	orrs	r3, r2
 800697c:	650b      	str	r3, [r1, #80]	; 0x50
 800697e:	e001      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800698c:	2b00      	cmp	r3, #0
 800698e:	d042      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006998:	d02b      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800699a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699e:	d825      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80069a0:	2bc0      	cmp	r3, #192	; 0xc0
 80069a2:	d028      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80069a4:	2bc0      	cmp	r3, #192	; 0xc0
 80069a6:	d821      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80069a8:	2b80      	cmp	r3, #128	; 0x80
 80069aa:	d016      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80069ac:	2b80      	cmp	r3, #128	; 0x80
 80069ae:	d81d      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80069b4:	2b40      	cmp	r3, #64	; 0x40
 80069b6:	d007      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80069b8:	e018      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069ba:	4b5e      	ldr	r3, [pc, #376]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	4a5d      	ldr	r2, [pc, #372]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80069c6:	e017      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3304      	adds	r3, #4
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 ff6e 	bl	80088b0 <RCCEx_PLL2_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80069d8:	e00e      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3324      	adds	r3, #36	; 0x24
 80069de:	2100      	movs	r1, #0
 80069e0:	4618      	mov	r0, r3
 80069e2:	f002 f817 	bl	8008a14 <RCCEx_PLL3_Config>
 80069e6:	4603      	mov	r3, r0
 80069e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80069ea:	e005      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	75fb      	strb	r3, [r7, #23]
      break;
 80069f0:	e002      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80069f2:	bf00      	nop
 80069f4:	e000      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80069f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d109      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80069fe:	4b4d      	ldr	r3, [pc, #308]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a02:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0a:	494a      	ldr	r1, [pc, #296]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	650b      	str	r3, [r1, #80]	; 0x50
 8006a10:	e001      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d049      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a2c:	d030      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006a2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a32:	d82a      	bhi.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006a34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a38:	d02c      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006a3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a3e:	d824      	bhi.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a44:	d018      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a4a:	d81e      	bhi.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006a50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a54:	d007      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006a56:	e018      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a58:	4b36      	ldr	r3, [pc, #216]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	4a35      	ldr	r2, [pc, #212]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a64:	e017      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3304      	adds	r3, #4
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 ff1f 	bl	80088b0 <RCCEx_PLL2_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006a76:	e00e      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3324      	adds	r3, #36	; 0x24
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 ffc8 	bl	8008a14 <RCCEx_PLL3_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a88:	e005      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a8e:	e002      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006a90:	bf00      	nop
 8006a92:	e000      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a9c:	4b25      	ldr	r3, [pc, #148]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006aaa:	4922      	ldr	r1, [pc, #136]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	658b      	str	r3, [r1, #88]	; 0x58
 8006ab0:	e001      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d04b      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006acc:	d030      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ad2:	d82a      	bhi.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ad4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ad8:	d02e      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006ada:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ade:	d824      	bhi.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ae4:	d018      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aea:	d81e      	bhi.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006af4:	d007      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006af6:	e018      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af8:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	4a0d      	ldr	r2, [pc, #52]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b04:	e019      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 fecf 	bl	80088b0 <RCCEx_PLL2_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006b16:	e010      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3324      	adds	r3, #36	; 0x24
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f001 ff78 	bl	8008a14 <RCCEx_PLL3_Config>
 8006b24:	4603      	mov	r3, r0
 8006b26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b28:	e007      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b2e:	e004      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006b30:	bf00      	nop
 8006b32:	e002      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006b34:	58024400 	.word	0x58024400
      break;
 8006b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b40:	4b99      	ldr	r3, [pc, #612]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b44:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b4e:	4996      	ldr	r1, [pc, #600]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	658b      	str	r3, [r1, #88]	; 0x58
 8006b54:	e001      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
 8006b58:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d032      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b6a:	2b30      	cmp	r3, #48	; 0x30
 8006b6c:	d01c      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006b6e:	2b30      	cmp	r3, #48	; 0x30
 8006b70:	d817      	bhi.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d00c      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	d813      	bhi.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d016      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006b7e:	2b10      	cmp	r3, #16
 8006b80:	d10f      	bne.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b82:	4b89      	ldr	r3, [pc, #548]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	4a88      	ldr	r2, [pc, #544]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006b8e:	e00e      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3304      	adds	r3, #4
 8006b94:	2102      	movs	r1, #2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 fe8a 	bl	80088b0 <RCCEx_PLL2_Config>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006ba0:	e005      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba6:	e002      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006ba8:	bf00      	nop
 8006baa:	e000      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d109      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006bb4:	4b7c      	ldr	r3, [pc, #496]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc0:	4979      	ldr	r1, [pc, #484]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006bc6:	e001      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d047      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be0:	d030      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be6:	d82a      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006be8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bec:	d02c      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006bee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bf2:	d824      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf8:	d018      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfe:	d81e      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c08:	d007      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006c0a:	e018      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c0c:	4b66      	ldr	r3, [pc, #408]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	4a65      	ldr	r2, [pc, #404]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c18:	e017      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f001 fe45 	bl	80088b0 <RCCEx_PLL2_Config>
 8006c26:	4603      	mov	r3, r0
 8006c28:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c2a:	e00e      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3324      	adds	r3, #36	; 0x24
 8006c30:	2100      	movs	r1, #0
 8006c32:	4618      	mov	r0, r3
 8006c34:	f001 feee 	bl	8008a14 <RCCEx_PLL3_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c3c:	e005      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	75fb      	strb	r3, [r7, #23]
      break;
 8006c42:	e002      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006c44:	bf00      	nop
 8006c46:	e000      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d109      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c50:	4b55      	ldr	r3, [pc, #340]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c54:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5c:	4952      	ldr	r1, [pc, #328]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	650b      	str	r3, [r1, #80]	; 0x50
 8006c62:	e001      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d049      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c7c:	d02e      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006c7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c82:	d828      	bhi.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006c84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c88:	d02a      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006c8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c8e:	d822      	bhi.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006c90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c94:	d026      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006c96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c9a:	d81c      	bhi.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca0:	d010      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca6:	d816      	bhi.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01d      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb0:	d111      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f001 fdf9 	bl	80088b0 <RCCEx_PLL2_Config>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006cc2:	e012      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3324      	adds	r3, #36	; 0x24
 8006cc8:	2101      	movs	r1, #1
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f001 fea2 	bl	8008a14 <RCCEx_PLL3_Config>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006cd4:	e009      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cda:	e006      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006cdc:	bf00      	nop
 8006cde:	e004      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006ce0:	bf00      	nop
 8006ce2:	e002      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006ce4:	bf00      	nop
 8006ce6:	e000      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d109      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006cf0:	4b2d      	ldr	r3, [pc, #180]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cfc:	492a      	ldr	r1, [pc, #168]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	650b      	str	r3, [r1, #80]	; 0x50
 8006d02:	e001      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d04d      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d1e:	d02e      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d24:	d828      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2a:	d02a      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d30:	d822      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006d32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d36:	d026      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006d38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d3c:	d81c      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d42:	d010      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d48:	d816      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d01d      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d52:	d111      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3304      	adds	r3, #4
 8006d58:	2101      	movs	r1, #1
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 fda8 	bl	80088b0 <RCCEx_PLL2_Config>
 8006d60:	4603      	mov	r3, r0
 8006d62:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d64:	e012      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3324      	adds	r3, #36	; 0x24
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 fe51 	bl	8008a14 <RCCEx_PLL3_Config>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d76:	e009      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d7c:	e006      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d7e:	bf00      	nop
 8006d80:	e004      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d82:	bf00      	nop
 8006d84:	e002      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d86:	bf00      	nop
 8006d88:	e000      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10c      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d92:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006da0:	4901      	ldr	r1, [pc, #4]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	658b      	str	r3, [r1, #88]	; 0x58
 8006da6:	e003      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006da8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d02f      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dc4:	d00e      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dca:	d814      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d015      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dd4:	d10f      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd6:	4baf      	ldr	r3, [pc, #700]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	4aae      	ldr	r2, [pc, #696]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006de2:	e00c      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3304      	adds	r3, #4
 8006de8:	2101      	movs	r1, #1
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 fd60 	bl	80088b0 <RCCEx_PLL2_Config>
 8006df0:	4603      	mov	r3, r0
 8006df2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006df4:	e003      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfa:	e000      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d109      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e04:	4ba3      	ldr	r3, [pc, #652]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e10:	49a0      	ldr	r1, [pc, #640]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	650b      	str	r3, [r1, #80]	; 0x50
 8006e16:	e001      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d032      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d81b      	bhi.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006e30:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e36:	bf00      	nop
 8006e38:	08006e6f 	.word	0x08006e6f
 8006e3c:	08006e49 	.word	0x08006e49
 8006e40:	08006e57 	.word	0x08006e57
 8006e44:	08006e6f 	.word	0x08006e6f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e48:	4b92      	ldr	r3, [pc, #584]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	4a91      	ldr	r2, [pc, #580]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006e54:	e00c      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	2102      	movs	r1, #2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 fd27 	bl	80088b0 <RCCEx_PLL2_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006e66:	e003      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e6c:	e000      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d109      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e76:	4b87      	ldr	r3, [pc, #540]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7a:	f023 0203 	bic.w	r2, r3, #3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e82:	4984      	ldr	r1, [pc, #528]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e88:	e001      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 8086 	beq.w	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e9c:	4b7e      	ldr	r3, [pc, #504]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a7d      	ldr	r2, [pc, #500]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ea8:	f7fa fe4c 	bl	8001b44 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006eae:	e009      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb0:	f7fa fe48 	bl	8001b44 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b64      	cmp	r3, #100	; 0x64
 8006ebc:	d902      	bls.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	75fb      	strb	r3, [r7, #23]
        break;
 8006ec2:	e005      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ec4:	4b74      	ldr	r3, [pc, #464]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0ef      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d166      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ed6:	4b6f      	ldr	r3, [pc, #444]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ed8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ee0:	4053      	eors	r3, r2
 8006ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d013      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006eea:	4b6a      	ldr	r3, [pc, #424]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ef4:	4b67      	ldr	r3, [pc, #412]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef8:	4a66      	ldr	r2, [pc, #408]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006efe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f00:	4b64      	ldr	r3, [pc, #400]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f04:	4a63      	ldr	r2, [pc, #396]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f0a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f0c:	4a61      	ldr	r2, [pc, #388]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1c:	d115      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1e:	f7fa fe11 	bl	8001b44 <HAL_GetTick>
 8006f22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f24:	e00b      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f26:	f7fa fe0d 	bl	8001b44 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d902      	bls.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	75fb      	strb	r3, [r7, #23]
            break;
 8006f3c:	e005      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f3e:	4b55      	ldr	r3, [pc, #340]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d0ed      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d126      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f5e:	d10d      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006f60:	4b4c      	ldr	r3, [pc, #304]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f6e:	0919      	lsrs	r1, r3, #4
 8006f70:	4b4a      	ldr	r3, [pc, #296]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006f72:	400b      	ands	r3, r1
 8006f74:	4947      	ldr	r1, [pc, #284]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	610b      	str	r3, [r1, #16]
 8006f7a:	e005      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006f7c:	4b45      	ldr	r3, [pc, #276]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	4a44      	ldr	r2, [pc, #272]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f86:	6113      	str	r3, [r2, #16]
 8006f88:	4b42      	ldr	r3, [pc, #264]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f96:	493f      	ldr	r1, [pc, #252]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	670b      	str	r3, [r1, #112]	; 0x70
 8006f9c:	e004      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	75bb      	strb	r3, [r7, #22]
 8006fa2:	e001      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
 8006fa6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 8085 	beq.w	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fba:	2b28      	cmp	r3, #40	; 0x28
 8006fbc:	d866      	bhi.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006fbe:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	080070a1 	.word	0x080070a1
 8006fc8:	0800708d 	.word	0x0800708d
 8006fcc:	0800708d 	.word	0x0800708d
 8006fd0:	0800708d 	.word	0x0800708d
 8006fd4:	0800708d 	.word	0x0800708d
 8006fd8:	0800708d 	.word	0x0800708d
 8006fdc:	0800708d 	.word	0x0800708d
 8006fe0:	0800708d 	.word	0x0800708d
 8006fe4:	08007069 	.word	0x08007069
 8006fe8:	0800708d 	.word	0x0800708d
 8006fec:	0800708d 	.word	0x0800708d
 8006ff0:	0800708d 	.word	0x0800708d
 8006ff4:	0800708d 	.word	0x0800708d
 8006ff8:	0800708d 	.word	0x0800708d
 8006ffc:	0800708d 	.word	0x0800708d
 8007000:	0800708d 	.word	0x0800708d
 8007004:	0800707b 	.word	0x0800707b
 8007008:	0800708d 	.word	0x0800708d
 800700c:	0800708d 	.word	0x0800708d
 8007010:	0800708d 	.word	0x0800708d
 8007014:	0800708d 	.word	0x0800708d
 8007018:	0800708d 	.word	0x0800708d
 800701c:	0800708d 	.word	0x0800708d
 8007020:	0800708d 	.word	0x0800708d
 8007024:	080070a1 	.word	0x080070a1
 8007028:	0800708d 	.word	0x0800708d
 800702c:	0800708d 	.word	0x0800708d
 8007030:	0800708d 	.word	0x0800708d
 8007034:	0800708d 	.word	0x0800708d
 8007038:	0800708d 	.word	0x0800708d
 800703c:	0800708d 	.word	0x0800708d
 8007040:	0800708d 	.word	0x0800708d
 8007044:	080070a1 	.word	0x080070a1
 8007048:	0800708d 	.word	0x0800708d
 800704c:	0800708d 	.word	0x0800708d
 8007050:	0800708d 	.word	0x0800708d
 8007054:	0800708d 	.word	0x0800708d
 8007058:	0800708d 	.word	0x0800708d
 800705c:	0800708d 	.word	0x0800708d
 8007060:	0800708d 	.word	0x0800708d
 8007064:	080070a1 	.word	0x080070a1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3304      	adds	r3, #4
 800706c:	2101      	movs	r1, #1
 800706e:	4618      	mov	r0, r3
 8007070:	f001 fc1e 	bl	80088b0 <RCCEx_PLL2_Config>
 8007074:	4603      	mov	r3, r0
 8007076:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007078:	e013      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3324      	adds	r3, #36	; 0x24
 800707e:	2101      	movs	r1, #1
 8007080:	4618      	mov	r0, r3
 8007082:	f001 fcc7 	bl	8008a14 <RCCEx_PLL3_Config>
 8007086:	4603      	mov	r3, r0
 8007088:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800708a:	e00a      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
      break;
 8007090:	e007      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007092:	bf00      	nop
 8007094:	58024400 	.word	0x58024400
 8007098:	58024800 	.word	0x58024800
 800709c:	00ffffcf 	.word	0x00ffffcf
      break;
 80070a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d109      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80070a8:	4b96      	ldr	r3, [pc, #600]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070b4:	4993      	ldr	r1, [pc, #588]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	654b      	str	r3, [r1, #84]	; 0x54
 80070ba:	e001      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d038      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070d0:	2b05      	cmp	r3, #5
 80070d2:	d821      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80070d4:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	0800711f 	.word	0x0800711f
 80070e0:	080070f5 	.word	0x080070f5
 80070e4:	08007107 	.word	0x08007107
 80070e8:	0800711f 	.word	0x0800711f
 80070ec:	0800711f 	.word	0x0800711f
 80070f0:	0800711f 	.word	0x0800711f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3304      	adds	r3, #4
 80070f8:	2101      	movs	r1, #1
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 fbd8 	bl	80088b0 <RCCEx_PLL2_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007104:	e00c      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3324      	adds	r3, #36	; 0x24
 800710a:	2101      	movs	r1, #1
 800710c:	4618      	mov	r0, r3
 800710e:	f001 fc81 	bl	8008a14 <RCCEx_PLL3_Config>
 8007112:	4603      	mov	r3, r0
 8007114:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007116:	e003      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	75fb      	strb	r3, [r7, #23]
      break;
 800711c:	e000      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800711e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007126:	4b77      	ldr	r3, [pc, #476]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	f023 0207 	bic.w	r2, r3, #7
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007132:	4974      	ldr	r1, [pc, #464]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007134:	4313      	orrs	r3, r2
 8007136:	654b      	str	r3, [r1, #84]	; 0x54
 8007138:	e001      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713a:	7dfb      	ldrb	r3, [r7, #23]
 800713c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	d03a      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007150:	2b05      	cmp	r3, #5
 8007152:	d821      	bhi.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007154:	a201      	add	r2, pc, #4	; (adr r2, 800715c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715a:	bf00      	nop
 800715c:	0800719f 	.word	0x0800719f
 8007160:	08007175 	.word	0x08007175
 8007164:	08007187 	.word	0x08007187
 8007168:	0800719f 	.word	0x0800719f
 800716c:	0800719f 	.word	0x0800719f
 8007170:	0800719f 	.word	0x0800719f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3304      	adds	r3, #4
 8007178:	2101      	movs	r1, #1
 800717a:	4618      	mov	r0, r3
 800717c:	f001 fb98 	bl	80088b0 <RCCEx_PLL2_Config>
 8007180:	4603      	mov	r3, r0
 8007182:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007184:	e00c      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3324      	adds	r3, #36	; 0x24
 800718a:	2101      	movs	r1, #1
 800718c:	4618      	mov	r0, r3
 800718e:	f001 fc41 	bl	8008a14 <RCCEx_PLL3_Config>
 8007192:	4603      	mov	r3, r0
 8007194:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007196:	e003      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	75fb      	strb	r3, [r7, #23]
      break;
 800719c:	e000      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800719e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071a0:	7dfb      	ldrb	r3, [r7, #23]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10a      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071a6:	4b57      	ldr	r3, [pc, #348]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071aa:	f023 0207 	bic.w	r2, r3, #7
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b4:	4953      	ldr	r1, [pc, #332]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	658b      	str	r3, [r1, #88]	; 0x58
 80071ba:	e001      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0320 	and.w	r3, r3, #32
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d04b      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071d6:	d02e      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80071d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071dc:	d828      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80071de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e2:	d02a      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80071e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e8:	d822      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80071ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071ee:	d026      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80071f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071f4:	d81c      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80071f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071fa:	d010      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80071fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007200:	d816      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d01d      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800720a:	d111      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3304      	adds	r3, #4
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f001 fb4c 	bl	80088b0 <RCCEx_PLL2_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800721c:	e012      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3324      	adds	r3, #36	; 0x24
 8007222:	2102      	movs	r1, #2
 8007224:	4618      	mov	r0, r3
 8007226:	f001 fbf5 	bl	8008a14 <RCCEx_PLL3_Config>
 800722a:	4603      	mov	r3, r0
 800722c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800722e:	e009      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	75fb      	strb	r3, [r7, #23]
      break;
 8007234:	e006      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007236:	bf00      	nop
 8007238:	e004      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800723a:	bf00      	nop
 800723c:	e002      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800723e:	bf00      	nop
 8007240:	e000      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007244:	7dfb      	ldrb	r3, [r7, #23]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800724a:	4b2e      	ldr	r3, [pc, #184]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800724c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007258:	492a      	ldr	r1, [pc, #168]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800725a:	4313      	orrs	r3, r2
 800725c:	654b      	str	r3, [r1, #84]	; 0x54
 800725e:	e001      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	d04d      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007276:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800727a:	d02e      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800727c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007280:	d828      	bhi.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007286:	d02a      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728c:	d822      	bhi.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800728e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007292:	d026      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007294:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007298:	d81c      	bhi.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800729a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800729e:	d010      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80072a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a4:	d816      	bhi.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d01d      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80072aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ae:	d111      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3304      	adds	r3, #4
 80072b4:	2100      	movs	r1, #0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 fafa 	bl	80088b0 <RCCEx_PLL2_Config>
 80072bc:	4603      	mov	r3, r0
 80072be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80072c0:	e012      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3324      	adds	r3, #36	; 0x24
 80072c6:	2102      	movs	r1, #2
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 fba3 	bl	8008a14 <RCCEx_PLL3_Config>
 80072ce:	4603      	mov	r3, r0
 80072d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80072d2:	e009      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	75fb      	strb	r3, [r7, #23]
      break;
 80072d8:	e006      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80072da:	bf00      	nop
 80072dc:	e004      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80072de:	bf00      	nop
 80072e0:	e002      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80072e2:	bf00      	nop
 80072e4:	e000      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80072e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10c      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80072f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072fc:	4901      	ldr	r1, [pc, #4]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	658b      	str	r3, [r1, #88]	; 0x58
 8007302:	e003      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007304:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007314:	2b00      	cmp	r3, #0
 8007316:	d04b      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800731e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007322:	d02e      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007324:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007328:	d828      	bhi.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800732a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800732e:	d02a      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007334:	d822      	bhi.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007336:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800733a:	d026      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800733c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007340:	d81c      	bhi.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007346:	d010      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007348:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800734c:	d816      	bhi.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d01d      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007356:	d111      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3304      	adds	r3, #4
 800735c:	2100      	movs	r1, #0
 800735e:	4618      	mov	r0, r3
 8007360:	f001 faa6 	bl	80088b0 <RCCEx_PLL2_Config>
 8007364:	4603      	mov	r3, r0
 8007366:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007368:	e012      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3324      	adds	r3, #36	; 0x24
 800736e:	2102      	movs	r1, #2
 8007370:	4618      	mov	r0, r3
 8007372:	f001 fb4f 	bl	8008a14 <RCCEx_PLL3_Config>
 8007376:	4603      	mov	r3, r0
 8007378:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800737a:	e009      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	75fb      	strb	r3, [r7, #23]
      break;
 8007380:	e006      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007382:	bf00      	nop
 8007384:	e004      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007386:	bf00      	nop
 8007388:	e002      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800738a:	bf00      	nop
 800738c:	e000      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800738e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007396:	4b9d      	ldr	r3, [pc, #628]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073a4:	4999      	ldr	r1, [pc, #612]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	658b      	str	r3, [r1, #88]	; 0x58
 80073aa:	e001      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01a      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c6:	d10a      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3324      	adds	r3, #36	; 0x24
 80073cc:	2102      	movs	r1, #2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f001 fb20 	bl	8008a14 <RCCEx_PLL3_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80073de:	4b8b      	ldr	r3, [pc, #556]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073ec:	4987      	ldr	r1, [pc, #540]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0310 	and.w	r3, r3, #16
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01a      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007408:	d10a      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3324      	adds	r3, #36	; 0x24
 800740e:	2102      	movs	r1, #2
 8007410:	4618      	mov	r0, r3
 8007412:	f001 faff 	bl	8008a14 <RCCEx_PLL3_Config>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007420:	4b7a      	ldr	r3, [pc, #488]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800742e:	4977      	ldr	r1, [pc, #476]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007430:	4313      	orrs	r3, r2
 8007432:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d034      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800744a:	d01d      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800744c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007450:	d817      	bhi.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800745a:	d009      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800745c:	e011      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3304      	adds	r3, #4
 8007462:	2100      	movs	r1, #0
 8007464:	4618      	mov	r0, r3
 8007466:	f001 fa23 	bl	80088b0 <RCCEx_PLL2_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800746e:	e00c      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3324      	adds	r3, #36	; 0x24
 8007474:	2102      	movs	r1, #2
 8007476:	4618      	mov	r0, r3
 8007478:	f001 facc 	bl	8008a14 <RCCEx_PLL3_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007480:	e003      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	75fb      	strb	r3, [r7, #23]
      break;
 8007486:	e000      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007490:	4b5e      	ldr	r3, [pc, #376]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800749e:	495b      	ldr	r1, [pc, #364]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	658b      	str	r3, [r1, #88]	; 0x58
 80074a4:	e001      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a6:	7dfb      	ldrb	r3, [r7, #23]
 80074a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d033      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074c0:	d01c      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80074c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074c6:	d816      	bhi.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80074c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074cc:	d003      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80074ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074d2:	d007      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80074d4:	e00f      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d6:	4b4d      	ldr	r3, [pc, #308]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074da:	4a4c      	ldr	r2, [pc, #304]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80074e2:	e00c      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3324      	adds	r3, #36	; 0x24
 80074e8:	2101      	movs	r1, #1
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 fa92 	bl	8008a14 <RCCEx_PLL3_Config>
 80074f0:	4603      	mov	r3, r0
 80074f2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80074f4:	e003      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	75fb      	strb	r3, [r7, #23]
      break;
 80074fa:	e000      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80074fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007504:	4b41      	ldr	r3, [pc, #260]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007508:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007512:	493e      	ldr	r1, [pc, #248]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007514:	4313      	orrs	r3, r2
 8007516:	654b      	str	r3, [r1, #84]	; 0x54
 8007518:	e001      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d029      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007536:	d007      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007538:	e00f      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800753a:	4b34      	ldr	r3, [pc, #208]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	4a33      	ldr	r2, [pc, #204]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007544:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007546:	e00b      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3304      	adds	r3, #4
 800754c:	2102      	movs	r1, #2
 800754e:	4618      	mov	r0, r3
 8007550:	f001 f9ae 	bl	80088b0 <RCCEx_PLL2_Config>
 8007554:	4603      	mov	r3, r0
 8007556:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007558:	e002      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	75fb      	strb	r3, [r7, #23]
      break;
 800755e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d109      	bne.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007566:	4b29      	ldr	r3, [pc, #164]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007572:	4926      	ldr	r1, [pc, #152]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007574:	4313      	orrs	r3, r2
 8007576:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007578:	e001      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3324      	adds	r3, #36	; 0x24
 800758e:	2102      	movs	r1, #2
 8007590:	4618      	mov	r0, r3
 8007592:	f001 fa3f 	bl	8008a14 <RCCEx_PLL3_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d033      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075b4:	d017      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80075b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ba:	d811      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80075bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c0:	d013      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80075c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c6:	d80b      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d010      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80075cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d0:	d106      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d2:	4b0e      	ldr	r3, [pc, #56]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d6:	4a0d      	ldr	r2, [pc, #52]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80075de:	e007      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	75fb      	strb	r3, [r7, #23]
      break;
 80075e4:	e004      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80075e6:	bf00      	nop
 80075e8:	e002      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80075ea:	bf00      	nop
 80075ec:	e000      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80075ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10c      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075f6:	4b05      	ldr	r3, [pc, #20]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007602:	4902      	ldr	r1, [pc, #8]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007604:	4313      	orrs	r3, r2
 8007606:	654b      	str	r3, [r1, #84]	; 0x54
 8007608:	e004      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800760a:	bf00      	nop
 800760c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d008      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007620:	4b31      	ldr	r3, [pc, #196]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762c:	492e      	ldr	r1, [pc, #184]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800762e:	4313      	orrs	r3, r2
 8007630:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800763e:	4b2a      	ldr	r3, [pc, #168]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800764c:	4926      	ldr	r1, [pc, #152]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800764e:	4313      	orrs	r3, r2
 8007650:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d008      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800765e:	4b22      	ldr	r3, [pc, #136]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007662:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800766a:	491f      	ldr	r1, [pc, #124]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800766c:	4313      	orrs	r3, r2
 800766e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00d      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800767c:	4b1a      	ldr	r3, [pc, #104]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	4a19      	ldr	r2, [pc, #100]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007682:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007686:	6113      	str	r3, [r2, #16]
 8007688:	4b17      	ldr	r3, [pc, #92]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007692:	4915      	ldr	r1, [pc, #84]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007694:	4313      	orrs	r3, r2
 8007696:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	da08      	bge.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80076a0:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ac:	490e      	ldr	r1, [pc, #56]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d009      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076be:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076cc:	4906      	ldr	r1, [pc, #24]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80076d2:	7dbb      	ldrb	r3, [r7, #22]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	e000      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	58024400 	.word	0x58024400

080076ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b090      	sub	sp, #64	; 0x40
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076fa:	f040 8095 	bne.w	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80076fe:	4b97      	ldr	r3, [pc, #604]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	2b04      	cmp	r3, #4
 800770c:	f200 8088 	bhi.w	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007710:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	0800772d 	.word	0x0800772d
 800771c:	08007755 	.word	0x08007755
 8007720:	0800777d 	.word	0x0800777d
 8007724:	08007819 	.word	0x08007819
 8007728:	080077a5 	.word	0x080077a5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800772c:	4b8b      	ldr	r3, [pc, #556]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007734:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007738:	d108      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800773a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800773e:	4618      	mov	r0, r3
 8007740:	f000 ff64 	bl	800860c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007748:	f000 bc94 	b.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007750:	f000 bc90 	b.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007754:	4b81      	ldr	r3, [pc, #516]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800775c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007760:	d108      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007762:	f107 0318 	add.w	r3, r7, #24
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fca8 	bl	80080bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007770:	f000 bc80 	b.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007778:	f000 bc7c 	b.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800777c:	4b77      	ldr	r3, [pc, #476]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007788:	d108      	bne.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800778a:	f107 030c 	add.w	r3, r7, #12
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fde8 	bl	8008364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007798:	f000 bc6c 	b.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077a0:	f000 bc68 	b.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80077a4:	4b6d      	ldr	r3, [pc, #436]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077ae:	4b6b      	ldr	r3, [pc, #428]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d10c      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80077ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d109      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077c0:	4b66      	ldr	r3, [pc, #408]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	08db      	lsrs	r3, r3, #3
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	4a65      	ldr	r2, [pc, #404]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80077cc:	fa22 f303 	lsr.w	r3, r2, r3
 80077d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d2:	e01f      	b.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077d4:	4b61      	ldr	r3, [pc, #388]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e0:	d106      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80077e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077e8:	d102      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80077ea:	4b5e      	ldr	r3, [pc, #376]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80077ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077ee:	e011      	b.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077f0:	4b5a      	ldr	r3, [pc, #360]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077fc:	d106      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80077fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007804:	d102      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007806:	4b58      	ldr	r3, [pc, #352]	; (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800780a:	e003      	b.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007810:	f000 bc30 	b.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007814:	f000 bc2e 	b.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007818:	4b54      	ldr	r3, [pc, #336]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800781a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800781c:	f000 bc2a 	b.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007824:	f000 bc26 	b.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800782e:	f040 809f 	bne.w	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007832:	4b4a      	ldr	r3, [pc, #296]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007836:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800783a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007842:	d04d      	beq.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784a:	f200 8084 	bhi.w	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	2bc0      	cmp	r3, #192	; 0xc0
 8007852:	d07d      	beq.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	2bc0      	cmp	r3, #192	; 0xc0
 8007858:	d87d      	bhi.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	2b80      	cmp	r3, #128	; 0x80
 800785e:	d02d      	beq.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	2b80      	cmp	r3, #128	; 0x80
 8007864:	d877      	bhi.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	2b40      	cmp	r3, #64	; 0x40
 8007870:	d012      	beq.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007872:	e070      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007874:	4b39      	ldr	r3, [pc, #228]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800787c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007880:	d107      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fec0 	bl	800860c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007890:	e3f0      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007896:	e3ed      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007898:	4b30      	ldr	r3, [pc, #192]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078a4:	d107      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a6:	f107 0318 	add.w	r3, r7, #24
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 fc06 	bl	80080bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078b4:	e3de      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ba:	e3db      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078bc:	4b27      	ldr	r3, [pc, #156]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078c8:	d107      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ca:	f107 030c 	add.w	r3, r7, #12
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fd48 	bl	8008364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078d8:	e3cc      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078de:	e3c9      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078e0:	4b1e      	ldr	r3, [pc, #120]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078e8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078ea:	4b1c      	ldr	r3, [pc, #112]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d10c      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80078f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d109      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078fc:	4b17      	ldr	r3, [pc, #92]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	08db      	lsrs	r3, r3, #3
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	4a16      	ldr	r2, [pc, #88]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007908:	fa22 f303 	lsr.w	r3, r2, r3
 800790c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800790e:	e01e      	b.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007910:	4b12      	ldr	r3, [pc, #72]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800791c:	d106      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800791e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007924:	d102      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007926:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800792a:	e010      	b.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800792c:	4b0b      	ldr	r3, [pc, #44]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007938:	d106      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800793a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007940:	d102      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007942:	4b09      	ldr	r3, [pc, #36]	; (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007946:	e002      	b.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800794c:	e392      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800794e:	e391      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007950:	4b06      	ldr	r3, [pc, #24]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007954:	e38e      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800795a:	e38b      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800795c:	58024400 	.word	0x58024400
 8007960:	03d09000 	.word	0x03d09000
 8007964:	003d0900 	.word	0x003d0900
 8007968:	007a1200 	.word	0x007a1200
 800796c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007976:	f040 809c 	bne.w	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800797a:	4b9d      	ldr	r3, [pc, #628]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800797c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007982:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800798a:	d054      	beq.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007992:	f200 808b 	bhi.w	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800799c:	f000 8083 	beq.w	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079a6:	f200 8081 	bhi.w	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079b0:	d02f      	beq.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079b8:	d878      	bhi.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d004      	beq.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079c6:	d012      	beq.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80079c8:	e070      	b.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079ca:	4b89      	ldr	r3, [pc, #548]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079d6:	d107      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fe15 	bl	800860c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079e6:	e345      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ec:	e342      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079ee:	4b80      	ldr	r3, [pc, #512]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079fa:	d107      	bne.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079fc:	f107 0318 	add.w	r3, r7, #24
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fb5b 	bl	80080bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a0a:	e333      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a10:	e330      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a12:	4b77      	ldr	r3, [pc, #476]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a1e:	d107      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a20:	f107 030c 	add.w	r3, r7, #12
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 fc9d 	bl	8008364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a2e:	e321      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a34:	e31e      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a36:	4b6e      	ldr	r3, [pc, #440]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a3e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a40:	4b6b      	ldr	r3, [pc, #428]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0304 	and.w	r3, r3, #4
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	d10c      	bne.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8007a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a52:	4b67      	ldr	r3, [pc, #412]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	08db      	lsrs	r3, r3, #3
 8007a58:	f003 0303 	and.w	r3, r3, #3
 8007a5c:	4a65      	ldr	r2, [pc, #404]	; (8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a64:	e01e      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a66:	4b62      	ldr	r3, [pc, #392]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a72:	d106      	bne.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a7a:	d102      	bne.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007a7c:	4b5e      	ldr	r3, [pc, #376]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a80:	e010      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a82:	4b5b      	ldr	r3, [pc, #364]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a8e:	d106      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a96:	d102      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007a98:	4b58      	ldr	r3, [pc, #352]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a9c:	e002      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007aa2:	e2e7      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007aa4:	e2e6      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007aa6:	4b56      	ldr	r3, [pc, #344]	; (8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aaa:	e2e3      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab0:	e2e0      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab8:	f040 80a7 	bne.w	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007abc:	4b4c      	ldr	r3, [pc, #304]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007ac4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007acc:	d055      	beq.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ad4:	f200 8096 	bhi.w	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ade:	f000 8084 	beq.w	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ae8:	f200 808c 	bhi.w	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007af2:	d030      	beq.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007afa:	f200 8083 	bhi.w	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d004      	beq.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b0a:	d012      	beq.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007b0c:	e07a      	b.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b0e:	4b38      	ldr	r3, [pc, #224]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b1a:	d107      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fd73 	bl	800860c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b2a:	e2a3      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b30:	e2a0      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b32:	4b2f      	ldr	r3, [pc, #188]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b3e:	d107      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b40:	f107 0318 	add.w	r3, r7, #24
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fab9 	bl	80080bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007b4e:	e291      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b54:	e28e      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b56:	4b26      	ldr	r3, [pc, #152]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b62:	d107      	bne.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b64:	f107 030c 	add.w	r3, r7, #12
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fbfb 	bl	8008364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b72:	e27f      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b78:	e27c      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b7a:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b84:	4b1a      	ldr	r3, [pc, #104]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d10c      	bne.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d109      	bne.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b96:	4b16      	ldr	r3, [pc, #88]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	08db      	lsrs	r3, r3, #3
 8007b9c:	f003 0303 	and.w	r3, r3, #3
 8007ba0:	4a14      	ldr	r2, [pc, #80]	; (8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ba8:	e01e      	b.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007baa:	4b11      	ldr	r3, [pc, #68]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bb6:	d106      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8007bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bbe:	d102      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007bc0:	4b0d      	ldr	r3, [pc, #52]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bc4:	e010      	b.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bc6:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bd2:	d106      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8007bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bda:	d102      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007bdc:	4b07      	ldr	r3, [pc, #28]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007be0:	e002      	b.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007be6:	e245      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007be8:	e244      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bea:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bee:	e241      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007bf0:	58024400 	.word	0x58024400
 8007bf4:	03d09000 	.word	0x03d09000
 8007bf8:	003d0900 	.word	0x003d0900
 8007bfc:	007a1200 	.word	0x007a1200
 8007c00:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c08:	e234      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c10:	f040 809c 	bne.w	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007c14:	4b9b      	ldr	r3, [pc, #620]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c18:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007c1c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c24:	d054      	beq.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8007c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c2c:	f200 808b 	bhi.w	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c36:	f000 8083 	beq.w	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c40:	f200 8081 	bhi.w	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c4a:	d02f      	beq.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c52:	d878      	bhi.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c60:	d012      	beq.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8007c62:	e070      	b.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c64:	4b87      	ldr	r3, [pc, #540]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c70:	d107      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fcc8 	bl	800860c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c80:	e1f8      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c86:	e1f5      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c88:	4b7e      	ldr	r3, [pc, #504]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c94:	d107      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c96:	f107 0318 	add.w	r3, r7, #24
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 fa0e 	bl	80080bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ca4:	e1e6      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007caa:	e1e3      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cac:	4b75      	ldr	r3, [pc, #468]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cb8:	d107      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cba:	f107 030c 	add.w	r3, r7, #12
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fb50 	bl	8008364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007cc8:	e1d4      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cce:	e1d1      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007cd0:	4b6c      	ldr	r3, [pc, #432]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007cd8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cda:	4b6a      	ldr	r3, [pc, #424]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0304 	and.w	r3, r3, #4
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d10c      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d109      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cec:	4b65      	ldr	r3, [pc, #404]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	08db      	lsrs	r3, r3, #3
 8007cf2:	f003 0303 	and.w	r3, r3, #3
 8007cf6:	4a64      	ldr	r2, [pc, #400]	; (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8007cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cfe:	e01e      	b.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d00:	4b60      	ldr	r3, [pc, #384]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d0c:	d106      	bne.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d14:	d102      	bne.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007d16:	4b5d      	ldr	r3, [pc, #372]	; (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d1a:	e010      	b.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d1c:	4b59      	ldr	r3, [pc, #356]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d28:	d106      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d30:	d102      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007d32:	4b57      	ldr	r3, [pc, #348]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d36:	e002      	b.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007d3c:	e19a      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007d3e:	e199      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d40:	4b54      	ldr	r3, [pc, #336]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d44:	e196      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d4a:	e193      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d52:	d173      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007d54:	4b4b      	ldr	r3, [pc, #300]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d5c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d64:	d02f      	beq.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8007d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d6c:	d863      	bhi.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d004      	beq.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d7a:	d012      	beq.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8007d7c:	e05b      	b.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d7e:	4b41      	ldr	r3, [pc, #260]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d8a:	d107      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d8c:	f107 0318 	add.w	r3, r7, #24
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 f993 	bl	80080bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d9a:	e16b      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007da0:	e168      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007da2:	4b38      	ldr	r3, [pc, #224]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dae:	d107      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007db0:	f107 030c 	add.w	r3, r7, #12
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fad5 	bl	8008364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007dbe:	e159      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dc4:	e156      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dc6:	4b2f      	ldr	r3, [pc, #188]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dce:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dd0:	4b2c      	ldr	r3, [pc, #176]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d10c      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007de2:	4b28      	ldr	r3, [pc, #160]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	08db      	lsrs	r3, r3, #3
 8007de8:	f003 0303 	and.w	r3, r3, #3
 8007dec:	4a26      	ldr	r2, [pc, #152]	; (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df4:	e01e      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007df6:	4b23      	ldr	r3, [pc, #140]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e02:	d106      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8007e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e0a:	d102      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007e0c:	4b1f      	ldr	r3, [pc, #124]	; (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e10:	e010      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e12:	4b1c      	ldr	r3, [pc, #112]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e1e:	d106      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8007e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e26:	d102      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007e28:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e2c:	e002      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007e32:	e11f      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007e34:	e11e      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e3a:	e11b      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e42:	d13e      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007e44:	4b0f      	ldr	r3, [pc, #60]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e4c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d004      	beq.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e5a:	d01d      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007e5c:	e02e      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e6a:	d107      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fbcb 	bl	800860c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e7a:	e0fb      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e80:	e0f8      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007e82:	bf00      	nop
 8007e84:	58024400 	.word	0x58024400
 8007e88:	03d09000 	.word	0x03d09000
 8007e8c:	003d0900 	.word	0x003d0900
 8007e90:	007a1200 	.word	0x007a1200
 8007e94:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e98:	4b79      	ldr	r3, [pc, #484]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea4:	d107      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea6:	f107 0318 	add.w	r3, r7, #24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f906 	bl	80080bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007eb4:	e0de      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eba:	e0db      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec0:	e0d8      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ec8:	f040 8085 	bne.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007ecc:	4b6c      	ldr	r3, [pc, #432]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007ed4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007edc:	d06b      	beq.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ee4:	d874      	bhi.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eec:	d056      	beq.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8007eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef4:	d86c      	bhi.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007efc:	d03b      	beq.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8007efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f04:	d864      	bhi.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f0c:	d021      	beq.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f14:	d85c      	bhi.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d004      	beq.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f22:	d004      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007f24:	e054      	b.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007f26:	f000 f8b3 	bl	8008090 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007f2c:	e0a2      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f2e:	4b54      	ldr	r3, [pc, #336]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f3a:	d107      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f3c:	f107 0318 	add.w	r3, r7, #24
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 f8bb 	bl	80080bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f4a:	e093      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f50:	e090      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f52:	4b4b      	ldr	r3, [pc, #300]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f5e:	d107      	bne.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f60:	f107 030c 	add.w	r3, r7, #12
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 f9fd 	bl	8008364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f6e:	e081      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f74:	e07e      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f76:	4b42      	ldr	r3, [pc, #264]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d109      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f82:	4b3f      	ldr	r3, [pc, #252]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	08db      	lsrs	r3, r3, #3
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	4a3d      	ldr	r2, [pc, #244]	; (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f94:	e06e      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f9a:	e06b      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f9c:	4b38      	ldr	r3, [pc, #224]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa8:	d102      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8007faa:	4b37      	ldr	r3, [pc, #220]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fae:	e061      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fb4:	e05e      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007fb6:	4b32      	ldr	r3, [pc, #200]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fc2:	d102      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8007fc4:	4b31      	ldr	r3, [pc, #196]	; (800808c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007fc8:	e054      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fce:	e051      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fd4:	e04e      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fdc:	d148      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007fde:	4b28      	ldr	r3, [pc, #160]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fe6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fee:	d02a      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ff6:	d838      	bhi.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d004      	beq.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008000:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008004:	d00d      	beq.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8008006:	e030      	b.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008008:	4b1d      	ldr	r3, [pc, #116]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008014:	d102      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8008016:	4b1d      	ldr	r3, [pc, #116]	; (800808c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008018:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800801a:	e02b      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008020:	e028      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008022:	4b17      	ldr	r3, [pc, #92]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800802e:	d107      	bne.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fae9 	bl	800860c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800803e:	e019      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008044:	e016      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008046:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800804e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008052:	d107      	bne.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008054:	f107 0318 	add.w	r3, r7, #24
 8008058:	4618      	mov	r0, r3
 800805a:	f000 f82f 	bl	80080bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008062:	e007      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008068:	e004      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800806e:	e001      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008076:	4618      	mov	r0, r3
 8008078:	3740      	adds	r7, #64	; 0x40
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	58024400 	.word	0x58024400
 8008084:	03d09000 	.word	0x03d09000
 8008088:	003d0900 	.word	0x003d0900
 800808c:	007a1200 	.word	0x007a1200

08008090 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008094:	f7fe fb5c 	bl	8006750 <HAL_RCC_GetHCLKFreq>
 8008098:	4602      	mov	r2, r0
 800809a:	4b06      	ldr	r3, [pc, #24]	; (80080b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	091b      	lsrs	r3, r3, #4
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	4904      	ldr	r1, [pc, #16]	; (80080b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80080a6:	5ccb      	ldrb	r3, [r1, r3]
 80080a8:	f003 031f 	and.w	r3, r3, #31
 80080ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	58024400 	.word	0x58024400
 80080b8:	0800a220 	.word	0x0800a220

080080bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80080bc:	b480      	push	{r7}
 80080be:	b089      	sub	sp, #36	; 0x24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080c4:	4ba1      	ldr	r3, [pc, #644]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	f003 0303 	and.w	r3, r3, #3
 80080cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80080ce:	4b9f      	ldr	r3, [pc, #636]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	0b1b      	lsrs	r3, r3, #12
 80080d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80080da:	4b9c      	ldr	r3, [pc, #624]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	091b      	lsrs	r3, r3, #4
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80080e6:	4b99      	ldr	r3, [pc, #612]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ea:	08db      	lsrs	r3, r3, #3
 80080ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	fb02 f303 	mul.w	r3, r2, r3
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 8111 	beq.w	800832c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	2b02      	cmp	r3, #2
 800810e:	f000 8083 	beq.w	8008218 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	2b02      	cmp	r3, #2
 8008116:	f200 80a1 	bhi.w	800825c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d056      	beq.n	80081d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008126:	e099      	b.n	800825c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008128:	4b88      	ldr	r3, [pc, #544]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0320 	and.w	r3, r3, #32
 8008130:	2b00      	cmp	r3, #0
 8008132:	d02d      	beq.n	8008190 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008134:	4b85      	ldr	r3, [pc, #532]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	08db      	lsrs	r3, r3, #3
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	4a84      	ldr	r2, [pc, #528]	; (8008350 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008140:	fa22 f303 	lsr.w	r3, r2, r3
 8008144:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800815e:	4b7b      	ldr	r3, [pc, #492]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800816e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008172:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800817a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800817e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800818e:	e087      	b.n	80082a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008358 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800819e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a2:	4b6a      	ldr	r3, [pc, #424]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081aa:	ee07 3a90 	vmov	s15, r3
 80081ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081d2:	e065      	b.n	80082a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800835c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e6:	4b59      	ldr	r3, [pc, #356]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800820a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008216:	e043      	b.n	80082a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008222:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800822a:	4b48      	ldr	r3, [pc, #288]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800823a:	ed97 6a03 	vldr	s12, [r7, #12]
 800823e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800824a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800824e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800825a:	e021      	b.n	80082a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	ee07 3a90 	vmov	s15, r3
 8008262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008266:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800835c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800826a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800826e:	4b37      	ldr	r3, [pc, #220]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008276:	ee07 3a90 	vmov	s15, r3
 800827a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800827e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008282:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800828a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800828e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800829e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80082a0:	4b2a      	ldr	r3, [pc, #168]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	0a5b      	lsrs	r3, r3, #9
 80082a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80082be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082c6:	ee17 2a90 	vmov	r2, s15
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80082ce:	4b1f      	ldr	r3, [pc, #124]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	0c1b      	lsrs	r3, r3, #16
 80082d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082d8:	ee07 3a90 	vmov	s15, r3
 80082dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80082ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082f4:	ee17 2a90 	vmov	r2, s15
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80082fc:	4b13      	ldr	r3, [pc, #76]	; (800834c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	0e1b      	lsrs	r3, r3, #24
 8008302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008312:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008316:	edd7 6a07 	vldr	s13, [r7, #28]
 800831a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800831e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008322:	ee17 2a90 	vmov	r2, s15
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800832a:	e008      	b.n	800833e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	609a      	str	r2, [r3, #8]
}
 800833e:	bf00      	nop
 8008340:	3724      	adds	r7, #36	; 0x24
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	58024400 	.word	0x58024400
 8008350:	03d09000 	.word	0x03d09000
 8008354:	46000000 	.word	0x46000000
 8008358:	4c742400 	.word	0x4c742400
 800835c:	4a742400 	.word	0x4a742400
 8008360:	4af42400 	.word	0x4af42400

08008364 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008364:	b480      	push	{r7}
 8008366:	b089      	sub	sp, #36	; 0x24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800836c:	4ba1      	ldr	r3, [pc, #644]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	f003 0303 	and.w	r3, r3, #3
 8008374:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008376:	4b9f      	ldr	r3, [pc, #636]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837a:	0d1b      	lsrs	r3, r3, #20
 800837c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008380:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008382:	4b9c      	ldr	r3, [pc, #624]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008386:	0a1b      	lsrs	r3, r3, #8
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800838e:	4b99      	ldr	r3, [pc, #612]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008392:	08db      	lsrs	r3, r3, #3
 8008394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	fb02 f303 	mul.w	r3, r2, r3
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 8111 	beq.w	80085d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	f000 8083 	beq.w	80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	f200 80a1 	bhi.w	8008504 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d056      	beq.n	800847c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80083ce:	e099      	b.n	8008504 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083d0:	4b88      	ldr	r3, [pc, #544]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0320 	and.w	r3, r3, #32
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d02d      	beq.n	8008438 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083dc:	4b85      	ldr	r3, [pc, #532]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	08db      	lsrs	r3, r3, #3
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	4a84      	ldr	r2, [pc, #528]	; (80085f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80083e8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	ee07 3a90 	vmov	s15, r3
 80083f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	ee07 3a90 	vmov	s15, r3
 80083fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008406:	4b7b      	ldr	r3, [pc, #492]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008416:	ed97 6a03 	vldr	s12, [r7, #12]
 800841a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80085fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800841e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008432:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008436:	e087      	b.n	8008548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008442:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008600 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844a:	4b6a      	ldr	r3, [pc, #424]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845a:	ed97 6a03 	vldr	s12, [r7, #12]
 800845e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80085fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800846e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800847a:	e065      	b.n	8008548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008486:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800848a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800848e:	4b59      	ldr	r3, [pc, #356]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008496:	ee07 3a90 	vmov	s15, r3
 800849a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849e:	ed97 6a03 	vldr	s12, [r7, #12]
 80084a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80085fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084be:	e043      	b.n	8008548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80084ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d2:	4b48      	ldr	r3, [pc, #288]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80085fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008502:	e021      	b.n	8008548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008516:	4b37      	ldr	r3, [pc, #220]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851e:	ee07 3a90 	vmov	s15, r3
 8008522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008526:	ed97 6a03 	vldr	s12, [r7, #12]
 800852a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80085fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800852e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800853a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800853e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008546:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008548:	4b2a      	ldr	r3, [pc, #168]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	0a5b      	lsrs	r3, r3, #9
 800854e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800855e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008562:	edd7 6a07 	vldr	s13, [r7, #28]
 8008566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800856a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800856e:	ee17 2a90 	vmov	r2, s15
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008576:	4b1f      	ldr	r3, [pc, #124]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	0c1b      	lsrs	r3, r3, #16
 800857c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800858c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008590:	edd7 6a07 	vldr	s13, [r7, #28]
 8008594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800859c:	ee17 2a90 	vmov	r2, s15
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80085a4:	4b13      	ldr	r3, [pc, #76]	; (80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	0e1b      	lsrs	r3, r3, #24
 80085aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085be:	edd7 6a07 	vldr	s13, [r7, #28]
 80085c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ca:	ee17 2a90 	vmov	r2, s15
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80085d2:	e008      	b.n	80085e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	609a      	str	r2, [r3, #8]
}
 80085e6:	bf00      	nop
 80085e8:	3724      	adds	r7, #36	; 0x24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	58024400 	.word	0x58024400
 80085f8:	03d09000 	.word	0x03d09000
 80085fc:	46000000 	.word	0x46000000
 8008600:	4c742400 	.word	0x4c742400
 8008604:	4a742400 	.word	0x4a742400
 8008608:	4af42400 	.word	0x4af42400

0800860c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800860c:	b480      	push	{r7}
 800860e:	b089      	sub	sp, #36	; 0x24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008614:	4ba0      	ldr	r3, [pc, #640]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	f003 0303 	and.w	r3, r3, #3
 800861c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800861e:	4b9e      	ldr	r3, [pc, #632]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008622:	091b      	lsrs	r3, r3, #4
 8008624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008628:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800862a:	4b9b      	ldr	r3, [pc, #620]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008634:	4b98      	ldr	r3, [pc, #608]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008638:	08db      	lsrs	r3, r3, #3
 800863a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	fb02 f303 	mul.w	r3, r2, r3
 8008644:	ee07 3a90 	vmov	s15, r3
 8008648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 8111 	beq.w	800887a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	2b02      	cmp	r3, #2
 800865c:	f000 8083 	beq.w	8008766 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b02      	cmp	r3, #2
 8008664:	f200 80a1 	bhi.w	80087aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d056      	beq.n	8008722 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008674:	e099      	b.n	80087aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008676:	4b88      	ldr	r3, [pc, #544]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d02d      	beq.n	80086de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008682:	4b85      	ldr	r3, [pc, #532]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	08db      	lsrs	r3, r3, #3
 8008688:	f003 0303 	and.w	r3, r3, #3
 800868c:	4a83      	ldr	r2, [pc, #524]	; (800889c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800868e:	fa22 f303 	lsr.w	r3, r2, r3
 8008692:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	ee07 3a90 	vmov	s15, r3
 800869a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	ee07 3a90 	vmov	s15, r3
 80086a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ac:	4b7a      	ldr	r3, [pc, #488]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b4:	ee07 3a90 	vmov	s15, r3
 80086b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80086dc:	e087      	b.n	80087ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	ee07 3a90 	vmov	s15, r3
 80086e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80088a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80086ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f0:	4b69      	ldr	r3, [pc, #420]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f8:	ee07 3a90 	vmov	s15, r3
 80086fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008700:	ed97 6a03 	vldr	s12, [r7, #12]
 8008704:	eddf 5a66 	vldr	s11, [pc, #408]	; 80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008720:	e065      	b.n	80087ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	ee07 3a90 	vmov	s15, r3
 8008728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80088a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008734:	4b58      	ldr	r3, [pc, #352]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873c:	ee07 3a90 	vmov	s15, r3
 8008740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008744:	ed97 6a03 	vldr	s12, [r7, #12]
 8008748:	eddf 5a55 	vldr	s11, [pc, #340]	; 80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800874c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008760:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008764:	e043      	b.n	80087ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	ee07 3a90 	vmov	s15, r3
 800876c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008770:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80088ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008778:	4b47      	ldr	r3, [pc, #284]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800877a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008780:	ee07 3a90 	vmov	s15, r3
 8008784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008788:	ed97 6a03 	vldr	s12, [r7, #12]
 800878c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800879c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087a8:	e021      	b.n	80087ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	ee07 3a90 	vmov	s15, r3
 80087b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80088a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80087b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087bc:	4b36      	ldr	r3, [pc, #216]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c4:	ee07 3a90 	vmov	s15, r3
 80087c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80087d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80087ee:	4b2a      	ldr	r3, [pc, #168]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f2:	0a5b      	lsrs	r3, r3, #9
 80087f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f8:	ee07 3a90 	vmov	s15, r3
 80087fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008804:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008808:	edd7 6a07 	vldr	s13, [r7, #28]
 800880c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008814:	ee17 2a90 	vmov	r2, s15
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800881c:	4b1e      	ldr	r3, [pc, #120]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008820:	0c1b      	lsrs	r3, r3, #16
 8008822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008826:	ee07 3a90 	vmov	s15, r3
 800882a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008832:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008836:	edd7 6a07 	vldr	s13, [r7, #28]
 800883a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800883e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008842:	ee17 2a90 	vmov	r2, s15
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800884a:	4b13      	ldr	r3, [pc, #76]	; (8008898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800884c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884e:	0e1b      	lsrs	r3, r3, #24
 8008850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008854:	ee07 3a90 	vmov	s15, r3
 8008858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008860:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008864:	edd7 6a07 	vldr	s13, [r7, #28]
 8008868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800886c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008870:	ee17 2a90 	vmov	r2, s15
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008878:	e008      	b.n	800888c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	609a      	str	r2, [r3, #8]
}
 800888c:	bf00      	nop
 800888e:	3724      	adds	r7, #36	; 0x24
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	58024400 	.word	0x58024400
 800889c:	03d09000 	.word	0x03d09000
 80088a0:	46000000 	.word	0x46000000
 80088a4:	4c742400 	.word	0x4c742400
 80088a8:	4a742400 	.word	0x4a742400
 80088ac:	4af42400 	.word	0x4af42400

080088b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088be:	4b53      	ldr	r3, [pc, #332]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80088c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d101      	bne.n	80088ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e099      	b.n	8008a02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80088ce:	4b4f      	ldr	r3, [pc, #316]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a4e      	ldr	r2, [pc, #312]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80088d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088da:	f7f9 f933 	bl	8001b44 <HAL_GetTick>
 80088de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088e0:	e008      	b.n	80088f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80088e2:	f7f9 f92f 	bl	8001b44 <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d901      	bls.n	80088f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e086      	b.n	8008a02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088f4:	4b45      	ldr	r3, [pc, #276]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1f0      	bne.n	80088e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008900:	4b42      	ldr	r3, [pc, #264]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 8008902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008904:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	031b      	lsls	r3, r3, #12
 800890e:	493f      	ldr	r1, [pc, #252]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 8008910:	4313      	orrs	r3, r2
 8008912:	628b      	str	r3, [r1, #40]	; 0x28
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	3b01      	subs	r3, #1
 800891a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	3b01      	subs	r3, #1
 8008924:	025b      	lsls	r3, r3, #9
 8008926:	b29b      	uxth	r3, r3
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	3b01      	subs	r3, #1
 8008930:	041b      	lsls	r3, r3, #16
 8008932:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008936:	431a      	orrs	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	3b01      	subs	r3, #1
 800893e:	061b      	lsls	r3, r3, #24
 8008940:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008944:	4931      	ldr	r1, [pc, #196]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 8008946:	4313      	orrs	r3, r2
 8008948:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800894a:	4b30      	ldr	r3, [pc, #192]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 800894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	492d      	ldr	r1, [pc, #180]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 8008958:	4313      	orrs	r3, r2
 800895a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800895c:	4b2b      	ldr	r3, [pc, #172]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	f023 0220 	bic.w	r2, r3, #32
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	4928      	ldr	r1, [pc, #160]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 800896a:	4313      	orrs	r3, r2
 800896c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800896e:	4b27      	ldr	r3, [pc, #156]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	4a26      	ldr	r2, [pc, #152]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 8008974:	f023 0310 	bic.w	r3, r3, #16
 8008978:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800897a:	4b24      	ldr	r3, [pc, #144]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 800897c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800897e:	4b24      	ldr	r3, [pc, #144]	; (8008a10 <RCCEx_PLL2_Config+0x160>)
 8008980:	4013      	ands	r3, r2
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	69d2      	ldr	r2, [r2, #28]
 8008986:	00d2      	lsls	r2, r2, #3
 8008988:	4920      	ldr	r1, [pc, #128]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 800898a:	4313      	orrs	r3, r2
 800898c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800898e:	4b1f      	ldr	r3, [pc, #124]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008992:	4a1e      	ldr	r2, [pc, #120]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 8008994:	f043 0310 	orr.w	r3, r3, #16
 8008998:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d106      	bne.n	80089ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80089a0:	4b1a      	ldr	r3, [pc, #104]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	4a19      	ldr	r2, [pc, #100]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80089a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089ac:	e00f      	b.n	80089ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d106      	bne.n	80089c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80089b4:	4b15      	ldr	r3, [pc, #84]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80089b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b8:	4a14      	ldr	r2, [pc, #80]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80089ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089c0:	e005      	b.n	80089ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80089c2:	4b12      	ldr	r3, [pc, #72]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	4a11      	ldr	r2, [pc, #68]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80089c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80089ce:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a0e      	ldr	r2, [pc, #56]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80089d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089da:	f7f9 f8b3 	bl	8001b44 <HAL_GetTick>
 80089de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089e0:	e008      	b.n	80089f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80089e2:	f7f9 f8af 	bl	8001b44 <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d901      	bls.n	80089f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e006      	b.n	8008a02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089f4:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <RCCEx_PLL2_Config+0x15c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0f0      	beq.n	80089e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	58024400 	.word	0x58024400
 8008a10:	ffff0007 	.word	0xffff0007

08008a14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a22:	4b53      	ldr	r3, [pc, #332]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d101      	bne.n	8008a32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e099      	b.n	8008b66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a32:	4b4f      	ldr	r3, [pc, #316]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a4e      	ldr	r2, [pc, #312]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a3e:	f7f9 f881 	bl	8001b44 <HAL_GetTick>
 8008a42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a44:	e008      	b.n	8008a58 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a46:	f7f9 f87d 	bl	8001b44 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d901      	bls.n	8008a58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e086      	b.n	8008b66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a58:	4b45      	ldr	r3, [pc, #276]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1f0      	bne.n	8008a46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008a64:	4b42      	ldr	r3, [pc, #264]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	051b      	lsls	r3, r3, #20
 8008a72:	493f      	ldr	r1, [pc, #252]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008a74:	4313      	orrs	r3, r2
 8008a76:	628b      	str	r3, [r1, #40]	; 0x28
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	025b      	lsls	r3, r3, #9
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	041b      	lsls	r3, r3, #16
 8008a96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	061b      	lsls	r3, r3, #24
 8008aa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008aa8:	4931      	ldr	r1, [pc, #196]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008aae:	4b30      	ldr	r3, [pc, #192]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	492d      	ldr	r1, [pc, #180]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008abc:	4313      	orrs	r3, r2
 8008abe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ac0:	4b2b      	ldr	r3, [pc, #172]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	4928      	ldr	r1, [pc, #160]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008ad2:	4b27      	ldr	r3, [pc, #156]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad6:	4a26      	ldr	r2, [pc, #152]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008adc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ade:	4b24      	ldr	r3, [pc, #144]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ae2:	4b24      	ldr	r3, [pc, #144]	; (8008b74 <RCCEx_PLL3_Config+0x160>)
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	69d2      	ldr	r2, [r2, #28]
 8008aea:	00d2      	lsls	r2, r2, #3
 8008aec:	4920      	ldr	r1, [pc, #128]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008af2:	4b1f      	ldr	r3, [pc, #124]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	4a1e      	ldr	r2, [pc, #120]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008afc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d106      	bne.n	8008b12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b04:	4b1a      	ldr	r3, [pc, #104]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	4a19      	ldr	r2, [pc, #100]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008b0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008b0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b10:	e00f      	b.n	8008b32 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d106      	bne.n	8008b26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b18:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	4a14      	ldr	r2, [pc, #80]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008b1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b24:	e005      	b.n	8008b32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b26:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	4a11      	ldr	r2, [pc, #68]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008b2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b32:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a0e      	ldr	r2, [pc, #56]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b3e:	f7f9 f801 	bl	8001b44 <HAL_GetTick>
 8008b42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b44:	e008      	b.n	8008b58 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b46:	f7f8 fffd 	bl	8001b44 <HAL_GetTick>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d901      	bls.n	8008b58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e006      	b.n	8008b66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b58:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <RCCEx_PLL3_Config+0x15c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d0f0      	beq.n	8008b46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	58024400 	.word	0x58024400
 8008b74:	ffff0007 	.word	0xffff0007

08008b78 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e02b      	b.n	8008be4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d106      	bne.n	8008ba6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7f7 feb9 	bl	8000918 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4610      	mov	r0, r2
 8008bba:	f001 f97b 	bl	8009eb4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	f001 f9cf 	bl	8009f6c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008bce:	4b07      	ldr	r3, [pc, #28]	; (8008bec <HAL_SDRAM_Init+0x74>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a06      	ldr	r2, [pc, #24]	; (8008bec <HAL_SDRAM_Init+0x74>)
 8008bd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bd8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	52004000 	.word	0x52004000

08008bf0 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d10a      	bne.n	8008c1c <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f80c 	bl	8008c24 <HAL_SDRAM_RefreshErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	695a      	ldr	r2, [r3, #20]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f042 0201 	orr.w	r2, r2, #1
 8008c1a:	615a      	str	r2, [r3, #20]
  }
}
 8008c1c:	bf00      	nop
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e049      	b.n	8008cde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d106      	bne.n	8008c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7f8 fe56 	bl	8001910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3304      	adds	r3, #4
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f000 fc62 	bl	8009540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d001      	beq.n	8008d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e054      	b.n	8008daa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f042 0201 	orr.w	r2, r2, #1
 8008d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a26      	ldr	r2, [pc, #152]	; (8008db8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d022      	beq.n	8008d68 <HAL_TIM_Base_Start_IT+0x80>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d2a:	d01d      	beq.n	8008d68 <HAL_TIM_Base_Start_IT+0x80>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a22      	ldr	r2, [pc, #136]	; (8008dbc <HAL_TIM_Base_Start_IT+0xd4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d018      	beq.n	8008d68 <HAL_TIM_Base_Start_IT+0x80>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a21      	ldr	r2, [pc, #132]	; (8008dc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d013      	beq.n	8008d68 <HAL_TIM_Base_Start_IT+0x80>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a1f      	ldr	r2, [pc, #124]	; (8008dc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d00e      	beq.n	8008d68 <HAL_TIM_Base_Start_IT+0x80>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a1e      	ldr	r2, [pc, #120]	; (8008dc8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d009      	beq.n	8008d68 <HAL_TIM_Base_Start_IT+0x80>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a1c      	ldr	r2, [pc, #112]	; (8008dcc <HAL_TIM_Base_Start_IT+0xe4>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d004      	beq.n	8008d68 <HAL_TIM_Base_Start_IT+0x80>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a1b      	ldr	r2, [pc, #108]	; (8008dd0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d115      	bne.n	8008d94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689a      	ldr	r2, [r3, #8]
 8008d6e:	4b19      	ldr	r3, [pc, #100]	; (8008dd4 <HAL_TIM_Base_Start_IT+0xec>)
 8008d70:	4013      	ands	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b06      	cmp	r3, #6
 8008d78:	d015      	beq.n	8008da6 <HAL_TIM_Base_Start_IT+0xbe>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d80:	d011      	beq.n	8008da6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f042 0201 	orr.w	r2, r2, #1
 8008d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d92:	e008      	b.n	8008da6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f042 0201 	orr.w	r2, r2, #1
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	e000      	b.n	8008da8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008da6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	40010000 	.word	0x40010000
 8008dbc:	40000400 	.word	0x40000400
 8008dc0:	40000800 	.word	0x40000800
 8008dc4:	40000c00 	.word	0x40000c00
 8008dc8:	40010400 	.word	0x40010400
 8008dcc:	40001800 	.word	0x40001800
 8008dd0:	40014000 	.word	0x40014000
 8008dd4:	00010007 	.word	0x00010007

08008dd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e049      	b.n	8008e7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d106      	bne.n	8008e04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f841 	bl	8008e86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3304      	adds	r3, #4
 8008e14:	4619      	mov	r1, r3
 8008e16:	4610      	mov	r0, r2
 8008e18:	f000 fb92 	bl	8009540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e8e:	bf00      	nop
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b082      	sub	sp, #8
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f003 0302 	and.w	r3, r3, #2
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d122      	bne.n	8008ef6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d11b      	bne.n	8008ef6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f06f 0202 	mvn.w	r2, #2
 8008ec6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	f003 0303 	and.w	r3, r3, #3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fb11 	bl	8009504 <HAL_TIM_IC_CaptureCallback>
 8008ee2:	e005      	b.n	8008ef0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fb03 	bl	80094f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fb14 	bl	8009518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d122      	bne.n	8008f4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	f003 0304 	and.w	r3, r3, #4
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d11b      	bne.n	8008f4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f06f 0204 	mvn.w	r2, #4
 8008f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fae7 	bl	8009504 <HAL_TIM_IC_CaptureCallback>
 8008f36:	e005      	b.n	8008f44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fad9 	bl	80094f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 faea 	bl	8009518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d122      	bne.n	8008f9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f003 0308 	and.w	r3, r3, #8
 8008f62:	2b08      	cmp	r3, #8
 8008f64:	d11b      	bne.n	8008f9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f06f 0208 	mvn.w	r2, #8
 8008f6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2204      	movs	r2, #4
 8008f74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69db      	ldr	r3, [r3, #28]
 8008f7c:	f003 0303 	and.w	r3, r3, #3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fabd 	bl	8009504 <HAL_TIM_IC_CaptureCallback>
 8008f8a:	e005      	b.n	8008f98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 faaf 	bl	80094f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fac0 	bl	8009518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b10      	cmp	r3, #16
 8008faa:	d122      	bne.n	8008ff2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f003 0310 	and.w	r3, r3, #16
 8008fb6:	2b10      	cmp	r3, #16
 8008fb8:	d11b      	bne.n	8008ff2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f06f 0210 	mvn.w	r2, #16
 8008fc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2208      	movs	r2, #8
 8008fc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fa93 	bl	8009504 <HAL_TIM_IC_CaptureCallback>
 8008fde:	e005      	b.n	8008fec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fa85 	bl	80094f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa96 	bl	8009518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d10e      	bne.n	800901e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b01      	cmp	r3, #1
 800900c:	d107      	bne.n	800901e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f06f 0201 	mvn.w	r2, #1
 8009016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7f8 f9e3 	bl	80013e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009028:	2b80      	cmp	r3, #128	; 0x80
 800902a:	d10e      	bne.n	800904a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009036:	2b80      	cmp	r3, #128	; 0x80
 8009038:	d107      	bne.n	800904a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 ff21 	bl	8009e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009058:	d10e      	bne.n	8009078 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009064:	2b80      	cmp	r3, #128	; 0x80
 8009066:	d107      	bne.n	8009078 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 ff14 	bl	8009ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009082:	2b40      	cmp	r3, #64	; 0x40
 8009084:	d10e      	bne.n	80090a4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009090:	2b40      	cmp	r3, #64	; 0x40
 8009092:	d107      	bne.n	80090a4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800909c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fa44 	bl	800952c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b20      	cmp	r3, #32
 80090b0:	d10e      	bne.n	80090d0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	f003 0320 	and.w	r3, r3, #32
 80090bc:	2b20      	cmp	r3, #32
 80090be:	d107      	bne.n	80090d0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f06f 0220 	mvn.w	r2, #32
 80090c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fed4 	bl	8009e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d101      	bne.n	80090f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090f2:	2302      	movs	r3, #2
 80090f4:	e0ff      	b.n	80092f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b14      	cmp	r3, #20
 8009102:	f200 80f0 	bhi.w	80092e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009106:	a201      	add	r2, pc, #4	; (adr r2, 800910c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910c:	08009161 	.word	0x08009161
 8009110:	080092e7 	.word	0x080092e7
 8009114:	080092e7 	.word	0x080092e7
 8009118:	080092e7 	.word	0x080092e7
 800911c:	080091a1 	.word	0x080091a1
 8009120:	080092e7 	.word	0x080092e7
 8009124:	080092e7 	.word	0x080092e7
 8009128:	080092e7 	.word	0x080092e7
 800912c:	080091e3 	.word	0x080091e3
 8009130:	080092e7 	.word	0x080092e7
 8009134:	080092e7 	.word	0x080092e7
 8009138:	080092e7 	.word	0x080092e7
 800913c:	08009223 	.word	0x08009223
 8009140:	080092e7 	.word	0x080092e7
 8009144:	080092e7 	.word	0x080092e7
 8009148:	080092e7 	.word	0x080092e7
 800914c:	08009265 	.word	0x08009265
 8009150:	080092e7 	.word	0x080092e7
 8009154:	080092e7 	.word	0x080092e7
 8009158:	080092e7 	.word	0x080092e7
 800915c:	080092a5 	.word	0x080092a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fa84 	bl	8009674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699a      	ldr	r2, [r3, #24]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 0208 	orr.w	r2, r2, #8
 800917a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	699a      	ldr	r2, [r3, #24]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0204 	bic.w	r2, r2, #4
 800918a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6999      	ldr	r1, [r3, #24]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	691a      	ldr	r2, [r3, #16]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	430a      	orrs	r2, r1
 800919c:	619a      	str	r2, [r3, #24]
      break;
 800919e:	e0a5      	b.n	80092ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68b9      	ldr	r1, [r7, #8]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 faf4 	bl	8009794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	699a      	ldr	r2, [r3, #24]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6999      	ldr	r1, [r3, #24]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	021a      	lsls	r2, r3, #8
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	619a      	str	r2, [r3, #24]
      break;
 80091e0:	e084      	b.n	80092ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68b9      	ldr	r1, [r7, #8]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 fb5d 	bl	80098a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69da      	ldr	r2, [r3, #28]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f042 0208 	orr.w	r2, r2, #8
 80091fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	69da      	ldr	r2, [r3, #28]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0204 	bic.w	r2, r2, #4
 800920c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	69d9      	ldr	r1, [r3, #28]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	691a      	ldr	r2, [r3, #16]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	61da      	str	r2, [r3, #28]
      break;
 8009220:	e064      	b.n	80092ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68b9      	ldr	r1, [r7, #8]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fbc5 	bl	80099b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69da      	ldr	r2, [r3, #28]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800923c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	69da      	ldr	r2, [r3, #28]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800924c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	69d9      	ldr	r1, [r3, #28]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	021a      	lsls	r2, r3, #8
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	61da      	str	r2, [r3, #28]
      break;
 8009262:	e043      	b.n	80092ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68b9      	ldr	r1, [r7, #8]
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fc0e 	bl	8009a8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0208 	orr.w	r2, r2, #8
 800927e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0204 	bic.w	r2, r2, #4
 800928e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	691a      	ldr	r2, [r3, #16]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80092a2:	e023      	b.n	80092ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fc52 	bl	8009b54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	021a      	lsls	r2, r3, #8
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80092e4:	e002      	b.n	80092ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	75fb      	strb	r3, [r7, #23]
      break;
 80092ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop

08009300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009314:	2b01      	cmp	r3, #1
 8009316:	d101      	bne.n	800931c <HAL_TIM_ConfigClockSource+0x1c>
 8009318:	2302      	movs	r3, #2
 800931a:	e0dc      	b.n	80094d6 <HAL_TIM_ConfigClockSource+0x1d6>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2202      	movs	r2, #2
 8009328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	4b6a      	ldr	r3, [pc, #424]	; (80094e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009338:	4013      	ands	r3, r2
 800933a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a64      	ldr	r2, [pc, #400]	; (80094e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009352:	4293      	cmp	r3, r2
 8009354:	f000 80a9 	beq.w	80094aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009358:	4a62      	ldr	r2, [pc, #392]	; (80094e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800935a:	4293      	cmp	r3, r2
 800935c:	f200 80ae 	bhi.w	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009360:	4a61      	ldr	r2, [pc, #388]	; (80094e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009362:	4293      	cmp	r3, r2
 8009364:	f000 80a1 	beq.w	80094aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009368:	4a5f      	ldr	r2, [pc, #380]	; (80094e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800936a:	4293      	cmp	r3, r2
 800936c:	f200 80a6 	bhi.w	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009370:	4a5e      	ldr	r2, [pc, #376]	; (80094ec <HAL_TIM_ConfigClockSource+0x1ec>)
 8009372:	4293      	cmp	r3, r2
 8009374:	f000 8099 	beq.w	80094aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009378:	4a5c      	ldr	r2, [pc, #368]	; (80094ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800937a:	4293      	cmp	r3, r2
 800937c:	f200 809e 	bhi.w	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009380:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009384:	f000 8091 	beq.w	80094aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009388:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800938c:	f200 8096 	bhi.w	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009394:	f000 8089 	beq.w	80094aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800939c:	f200 808e 	bhi.w	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 80093a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093a4:	d03e      	beq.n	8009424 <HAL_TIM_ConfigClockSource+0x124>
 80093a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093aa:	f200 8087 	bhi.w	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 80093ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b2:	f000 8086 	beq.w	80094c2 <HAL_TIM_ConfigClockSource+0x1c2>
 80093b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ba:	d87f      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 80093bc:	2b70      	cmp	r3, #112	; 0x70
 80093be:	d01a      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0xf6>
 80093c0:	2b70      	cmp	r3, #112	; 0x70
 80093c2:	d87b      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 80093c4:	2b60      	cmp	r3, #96	; 0x60
 80093c6:	d050      	beq.n	800946a <HAL_TIM_ConfigClockSource+0x16a>
 80093c8:	2b60      	cmp	r3, #96	; 0x60
 80093ca:	d877      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 80093cc:	2b50      	cmp	r3, #80	; 0x50
 80093ce:	d03c      	beq.n	800944a <HAL_TIM_ConfigClockSource+0x14a>
 80093d0:	2b50      	cmp	r3, #80	; 0x50
 80093d2:	d873      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 80093d4:	2b40      	cmp	r3, #64	; 0x40
 80093d6:	d058      	beq.n	800948a <HAL_TIM_ConfigClockSource+0x18a>
 80093d8:	2b40      	cmp	r3, #64	; 0x40
 80093da:	d86f      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 80093dc:	2b30      	cmp	r3, #48	; 0x30
 80093de:	d064      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x1aa>
 80093e0:	2b30      	cmp	r3, #48	; 0x30
 80093e2:	d86b      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 80093e4:	2b20      	cmp	r3, #32
 80093e6:	d060      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x1aa>
 80093e8:	2b20      	cmp	r3, #32
 80093ea:	d867      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d05c      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x1aa>
 80093f0:	2b10      	cmp	r3, #16
 80093f2:	d05a      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x1aa>
 80093f4:	e062      	b.n	80094bc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6818      	ldr	r0, [r3, #0]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	6899      	ldr	r1, [r3, #8]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f000 fc89 	bl	8009d1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	609a      	str	r2, [r3, #8]
      break;
 8009422:	e04f      	b.n	80094c4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	6899      	ldr	r1, [r3, #8]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f000 fc72 	bl	8009d1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689a      	ldr	r2, [r3, #8]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009446:	609a      	str	r2, [r3, #8]
      break;
 8009448:	e03c      	b.n	80094c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	6859      	ldr	r1, [r3, #4]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	461a      	mov	r2, r3
 8009458:	f000 fbe2 	bl	8009c20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2150      	movs	r1, #80	; 0x50
 8009462:	4618      	mov	r0, r3
 8009464:	f000 fc3c 	bl	8009ce0 <TIM_ITRx_SetConfig>
      break;
 8009468:	e02c      	b.n	80094c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6818      	ldr	r0, [r3, #0]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	6859      	ldr	r1, [r3, #4]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	461a      	mov	r2, r3
 8009478:	f000 fc01 	bl	8009c7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2160      	movs	r1, #96	; 0x60
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fc2c 	bl	8009ce0 <TIM_ITRx_SetConfig>
      break;
 8009488:	e01c      	b.n	80094c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	6859      	ldr	r1, [r3, #4]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	461a      	mov	r2, r3
 8009498:	f000 fbc2 	bl	8009c20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2140      	movs	r1, #64	; 0x40
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fc1c 	bl	8009ce0 <TIM_ITRx_SetConfig>
      break;
 80094a8:	e00c      	b.n	80094c4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4619      	mov	r1, r3
 80094b4:	4610      	mov	r0, r2
 80094b6:	f000 fc13 	bl	8009ce0 <TIM_ITRx_SetConfig>
      break;
 80094ba:	e003      	b.n	80094c4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	73fb      	strb	r3, [r7, #15]
      break;
 80094c0:	e000      	b.n	80094c4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80094c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	ffceff88 	.word	0xffceff88
 80094e4:	00100040 	.word	0x00100040
 80094e8:	00100030 	.word	0x00100030
 80094ec:	00100020 	.word	0x00100020

080094f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a40      	ldr	r2, [pc, #256]	; (8009654 <TIM_Base_SetConfig+0x114>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d013      	beq.n	8009580 <TIM_Base_SetConfig+0x40>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800955e:	d00f      	beq.n	8009580 <TIM_Base_SetConfig+0x40>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a3d      	ldr	r2, [pc, #244]	; (8009658 <TIM_Base_SetConfig+0x118>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d00b      	beq.n	8009580 <TIM_Base_SetConfig+0x40>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a3c      	ldr	r2, [pc, #240]	; (800965c <TIM_Base_SetConfig+0x11c>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d007      	beq.n	8009580 <TIM_Base_SetConfig+0x40>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a3b      	ldr	r2, [pc, #236]	; (8009660 <TIM_Base_SetConfig+0x120>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d003      	beq.n	8009580 <TIM_Base_SetConfig+0x40>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a3a      	ldr	r2, [pc, #232]	; (8009664 <TIM_Base_SetConfig+0x124>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d108      	bne.n	8009592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	4313      	orrs	r3, r2
 8009590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a2f      	ldr	r2, [pc, #188]	; (8009654 <TIM_Base_SetConfig+0x114>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d01f      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a0:	d01b      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a2c      	ldr	r2, [pc, #176]	; (8009658 <TIM_Base_SetConfig+0x118>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d017      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a2b      	ldr	r2, [pc, #172]	; (800965c <TIM_Base_SetConfig+0x11c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d013      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a2a      	ldr	r2, [pc, #168]	; (8009660 <TIM_Base_SetConfig+0x120>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00f      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a29      	ldr	r2, [pc, #164]	; (8009664 <TIM_Base_SetConfig+0x124>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d00b      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a28      	ldr	r2, [pc, #160]	; (8009668 <TIM_Base_SetConfig+0x128>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d007      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a27      	ldr	r2, [pc, #156]	; (800966c <TIM_Base_SetConfig+0x12c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d003      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a26      	ldr	r2, [pc, #152]	; (8009670 <TIM_Base_SetConfig+0x130>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d108      	bne.n	80095ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	689a      	ldr	r2, [r3, #8]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a10      	ldr	r2, [pc, #64]	; (8009654 <TIM_Base_SetConfig+0x114>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d00f      	beq.n	8009638 <TIM_Base_SetConfig+0xf8>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a12      	ldr	r2, [pc, #72]	; (8009664 <TIM_Base_SetConfig+0x124>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d00b      	beq.n	8009638 <TIM_Base_SetConfig+0xf8>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a11      	ldr	r2, [pc, #68]	; (8009668 <TIM_Base_SetConfig+0x128>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d007      	beq.n	8009638 <TIM_Base_SetConfig+0xf8>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a10      	ldr	r2, [pc, #64]	; (800966c <TIM_Base_SetConfig+0x12c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d003      	beq.n	8009638 <TIM_Base_SetConfig+0xf8>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a0f      	ldr	r2, [pc, #60]	; (8009670 <TIM_Base_SetConfig+0x130>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d103      	bne.n	8009640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	691a      	ldr	r2, [r3, #16]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	615a      	str	r2, [r3, #20]
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	40010000 	.word	0x40010000
 8009658:	40000400 	.word	0x40000400
 800965c:	40000800 	.word	0x40000800
 8009660:	40000c00 	.word	0x40000c00
 8009664:	40010400 	.word	0x40010400
 8009668:	40014000 	.word	0x40014000
 800966c:	40014400 	.word	0x40014400
 8009670:	40014800 	.word	0x40014800

08009674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	f023 0201 	bic.w	r2, r3, #1
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	4b37      	ldr	r3, [pc, #220]	; (800977c <TIM_OC1_SetConfig+0x108>)
 80096a0:	4013      	ands	r3, r2
 80096a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f023 0303 	bic.w	r3, r3, #3
 80096aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f023 0302 	bic.w	r3, r3, #2
 80096bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a2d      	ldr	r2, [pc, #180]	; (8009780 <TIM_OC1_SetConfig+0x10c>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d00f      	beq.n	80096f0 <TIM_OC1_SetConfig+0x7c>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a2c      	ldr	r2, [pc, #176]	; (8009784 <TIM_OC1_SetConfig+0x110>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d00b      	beq.n	80096f0 <TIM_OC1_SetConfig+0x7c>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a2b      	ldr	r2, [pc, #172]	; (8009788 <TIM_OC1_SetConfig+0x114>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d007      	beq.n	80096f0 <TIM_OC1_SetConfig+0x7c>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a2a      	ldr	r2, [pc, #168]	; (800978c <TIM_OC1_SetConfig+0x118>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d003      	beq.n	80096f0 <TIM_OC1_SetConfig+0x7c>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a29      	ldr	r2, [pc, #164]	; (8009790 <TIM_OC1_SetConfig+0x11c>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d10c      	bne.n	800970a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	f023 0308 	bic.w	r3, r3, #8
 80096f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	4313      	orrs	r3, r2
 8009700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f023 0304 	bic.w	r3, r3, #4
 8009708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a1c      	ldr	r2, [pc, #112]	; (8009780 <TIM_OC1_SetConfig+0x10c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00f      	beq.n	8009732 <TIM_OC1_SetConfig+0xbe>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a1b      	ldr	r2, [pc, #108]	; (8009784 <TIM_OC1_SetConfig+0x110>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00b      	beq.n	8009732 <TIM_OC1_SetConfig+0xbe>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a1a      	ldr	r2, [pc, #104]	; (8009788 <TIM_OC1_SetConfig+0x114>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d007      	beq.n	8009732 <TIM_OC1_SetConfig+0xbe>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a19      	ldr	r2, [pc, #100]	; (800978c <TIM_OC1_SetConfig+0x118>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d003      	beq.n	8009732 <TIM_OC1_SetConfig+0xbe>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a18      	ldr	r2, [pc, #96]	; (8009790 <TIM_OC1_SetConfig+0x11c>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d111      	bne.n	8009756 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	4313      	orrs	r3, r2
 800974a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	4313      	orrs	r3, r2
 8009754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	621a      	str	r2, [r3, #32]
}
 8009770:	bf00      	nop
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	fffeff8f 	.word	0xfffeff8f
 8009780:	40010000 	.word	0x40010000
 8009784:	40010400 	.word	0x40010400
 8009788:	40014000 	.word	0x40014000
 800978c:	40014400 	.word	0x40014400
 8009790:	40014800 	.word	0x40014800

08009794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	f023 0210 	bic.w	r2, r3, #16
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	4b34      	ldr	r3, [pc, #208]	; (8009890 <TIM_OC2_SetConfig+0xfc>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	021b      	lsls	r3, r3, #8
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f023 0320 	bic.w	r3, r3, #32
 80097de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	011b      	lsls	r3, r3, #4
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a29      	ldr	r2, [pc, #164]	; (8009894 <TIM_OC2_SetConfig+0x100>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d003      	beq.n	80097fc <TIM_OC2_SetConfig+0x68>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a28      	ldr	r2, [pc, #160]	; (8009898 <TIM_OC2_SetConfig+0x104>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d10d      	bne.n	8009818 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	011b      	lsls	r3, r3, #4
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009816:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a1e      	ldr	r2, [pc, #120]	; (8009894 <TIM_OC2_SetConfig+0x100>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d00f      	beq.n	8009840 <TIM_OC2_SetConfig+0xac>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a1d      	ldr	r2, [pc, #116]	; (8009898 <TIM_OC2_SetConfig+0x104>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d00b      	beq.n	8009840 <TIM_OC2_SetConfig+0xac>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a1c      	ldr	r2, [pc, #112]	; (800989c <TIM_OC2_SetConfig+0x108>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d007      	beq.n	8009840 <TIM_OC2_SetConfig+0xac>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a1b      	ldr	r2, [pc, #108]	; (80098a0 <TIM_OC2_SetConfig+0x10c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d003      	beq.n	8009840 <TIM_OC2_SetConfig+0xac>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a1a      	ldr	r2, [pc, #104]	; (80098a4 <TIM_OC2_SetConfig+0x110>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d113      	bne.n	8009868 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009846:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800984e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	4313      	orrs	r3, r2
 800985a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	4313      	orrs	r3, r2
 8009866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	621a      	str	r2, [r3, #32]
}
 8009882:	bf00      	nop
 8009884:	371c      	adds	r7, #28
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	feff8fff 	.word	0xfeff8fff
 8009894:	40010000 	.word	0x40010000
 8009898:	40010400 	.word	0x40010400
 800989c:	40014000 	.word	0x40014000
 80098a0:	40014400 	.word	0x40014400
 80098a4:	40014800 	.word	0x40014800

080098a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	69db      	ldr	r3, [r3, #28]
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	4b33      	ldr	r3, [pc, #204]	; (80099a0 <TIM_OC3_SetConfig+0xf8>)
 80098d4:	4013      	ands	r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f023 0303 	bic.w	r3, r3, #3
 80098de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	021b      	lsls	r3, r3, #8
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a28      	ldr	r2, [pc, #160]	; (80099a4 <TIM_OC3_SetConfig+0xfc>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d003      	beq.n	800990e <TIM_OC3_SetConfig+0x66>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a27      	ldr	r2, [pc, #156]	; (80099a8 <TIM_OC3_SetConfig+0x100>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d10d      	bne.n	800992a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	021b      	lsls	r3, r3, #8
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	4313      	orrs	r3, r2
 8009920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a1d      	ldr	r2, [pc, #116]	; (80099a4 <TIM_OC3_SetConfig+0xfc>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d00f      	beq.n	8009952 <TIM_OC3_SetConfig+0xaa>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a1c      	ldr	r2, [pc, #112]	; (80099a8 <TIM_OC3_SetConfig+0x100>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d00b      	beq.n	8009952 <TIM_OC3_SetConfig+0xaa>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a1b      	ldr	r2, [pc, #108]	; (80099ac <TIM_OC3_SetConfig+0x104>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d007      	beq.n	8009952 <TIM_OC3_SetConfig+0xaa>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a1a      	ldr	r2, [pc, #104]	; (80099b0 <TIM_OC3_SetConfig+0x108>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d003      	beq.n	8009952 <TIM_OC3_SetConfig+0xaa>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a19      	ldr	r2, [pc, #100]	; (80099b4 <TIM_OC3_SetConfig+0x10c>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d113      	bne.n	800997a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	4313      	orrs	r3, r2
 800996c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	011b      	lsls	r3, r3, #4
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	4313      	orrs	r3, r2
 8009978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	685a      	ldr	r2, [r3, #4]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	621a      	str	r2, [r3, #32]
}
 8009994:	bf00      	nop
 8009996:	371c      	adds	r7, #28
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	fffeff8f 	.word	0xfffeff8f
 80099a4:	40010000 	.word	0x40010000
 80099a8:	40010400 	.word	0x40010400
 80099ac:	40014000 	.word	0x40014000
 80099b0:	40014400 	.word	0x40014400
 80099b4:	40014800 	.word	0x40014800

080099b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4b24      	ldr	r3, [pc, #144]	; (8009a74 <TIM_OC4_SetConfig+0xbc>)
 80099e4:	4013      	ands	r3, r2
 80099e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	021b      	lsls	r3, r3, #8
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	031b      	lsls	r3, r3, #12
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a19      	ldr	r2, [pc, #100]	; (8009a78 <TIM_OC4_SetConfig+0xc0>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d00f      	beq.n	8009a38 <TIM_OC4_SetConfig+0x80>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a18      	ldr	r2, [pc, #96]	; (8009a7c <TIM_OC4_SetConfig+0xc4>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d00b      	beq.n	8009a38 <TIM_OC4_SetConfig+0x80>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a17      	ldr	r2, [pc, #92]	; (8009a80 <TIM_OC4_SetConfig+0xc8>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d007      	beq.n	8009a38 <TIM_OC4_SetConfig+0x80>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a16      	ldr	r2, [pc, #88]	; (8009a84 <TIM_OC4_SetConfig+0xcc>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d003      	beq.n	8009a38 <TIM_OC4_SetConfig+0x80>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a15      	ldr	r2, [pc, #84]	; (8009a88 <TIM_OC4_SetConfig+0xd0>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d109      	bne.n	8009a4c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	695b      	ldr	r3, [r3, #20]
 8009a44:	019b      	lsls	r3, r3, #6
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	621a      	str	r2, [r3, #32]
}
 8009a66:	bf00      	nop
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	feff8fff 	.word	0xfeff8fff
 8009a78:	40010000 	.word	0x40010000
 8009a7c:	40010400 	.word	0x40010400
 8009a80:	40014000 	.word	0x40014000
 8009a84:	40014400 	.word	0x40014400
 8009a88:	40014800 	.word	0x40014800

08009a8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4b21      	ldr	r3, [pc, #132]	; (8009b3c <TIM_OC5_SetConfig+0xb0>)
 8009ab8:	4013      	ands	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009acc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	041b      	lsls	r3, r3, #16
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a18      	ldr	r2, [pc, #96]	; (8009b40 <TIM_OC5_SetConfig+0xb4>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00f      	beq.n	8009b02 <TIM_OC5_SetConfig+0x76>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a17      	ldr	r2, [pc, #92]	; (8009b44 <TIM_OC5_SetConfig+0xb8>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d00b      	beq.n	8009b02 <TIM_OC5_SetConfig+0x76>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a16      	ldr	r2, [pc, #88]	; (8009b48 <TIM_OC5_SetConfig+0xbc>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d007      	beq.n	8009b02 <TIM_OC5_SetConfig+0x76>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a15      	ldr	r2, [pc, #84]	; (8009b4c <TIM_OC5_SetConfig+0xc0>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d003      	beq.n	8009b02 <TIM_OC5_SetConfig+0x76>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a14      	ldr	r2, [pc, #80]	; (8009b50 <TIM_OC5_SetConfig+0xc4>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d109      	bne.n	8009b16 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	697a      	ldr	r2, [r7, #20]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	693a      	ldr	r2, [r7, #16]
 8009b2e:	621a      	str	r2, [r3, #32]
}
 8009b30:	bf00      	nop
 8009b32:	371c      	adds	r7, #28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	fffeff8f 	.word	0xfffeff8f
 8009b40:	40010000 	.word	0x40010000
 8009b44:	40010400 	.word	0x40010400
 8009b48:	40014000 	.word	0x40014000
 8009b4c:	40014400 	.word	0x40014400
 8009b50:	40014800 	.word	0x40014800

08009b54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b087      	sub	sp, #28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	4b22      	ldr	r3, [pc, #136]	; (8009c08 <TIM_OC6_SetConfig+0xb4>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	021b      	lsls	r3, r3, #8
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	051b      	lsls	r3, r3, #20
 8009b9e:	693a      	ldr	r2, [r7, #16]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a19      	ldr	r2, [pc, #100]	; (8009c0c <TIM_OC6_SetConfig+0xb8>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d00f      	beq.n	8009bcc <TIM_OC6_SetConfig+0x78>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a18      	ldr	r2, [pc, #96]	; (8009c10 <TIM_OC6_SetConfig+0xbc>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d00b      	beq.n	8009bcc <TIM_OC6_SetConfig+0x78>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a17      	ldr	r2, [pc, #92]	; (8009c14 <TIM_OC6_SetConfig+0xc0>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d007      	beq.n	8009bcc <TIM_OC6_SetConfig+0x78>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a16      	ldr	r2, [pc, #88]	; (8009c18 <TIM_OC6_SetConfig+0xc4>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d003      	beq.n	8009bcc <TIM_OC6_SetConfig+0x78>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a15      	ldr	r2, [pc, #84]	; (8009c1c <TIM_OC6_SetConfig+0xc8>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d109      	bne.n	8009be0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	695b      	ldr	r3, [r3, #20]
 8009bd8:	029b      	lsls	r3, r3, #10
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	621a      	str	r2, [r3, #32]
}
 8009bfa:	bf00      	nop
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	feff8fff 	.word	0xfeff8fff
 8009c0c:	40010000 	.word	0x40010000
 8009c10:	40010400 	.word	0x40010400
 8009c14:	40014000 	.word	0x40014000
 8009c18:	40014400 	.word	0x40014400
 8009c1c:	40014800 	.word	0x40014800

08009c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6a1b      	ldr	r3, [r3, #32]
 8009c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	f023 0201 	bic.w	r2, r3, #1
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f023 030a 	bic.w	r3, r3, #10
 8009c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	621a      	str	r2, [r3, #32]
}
 8009c72:	bf00      	nop
 8009c74:	371c      	adds	r7, #28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr

08009c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c7e:	b480      	push	{r7}
 8009c80:	b087      	sub	sp, #28
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	60f8      	str	r0, [r7, #12]
 8009c86:	60b9      	str	r1, [r7, #8]
 8009c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	f023 0210 	bic.w	r2, r3, #16
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	031b      	lsls	r3, r3, #12
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009cba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	011b      	lsls	r3, r3, #4
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	621a      	str	r2, [r3, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
	...

08009ce0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	4b09      	ldr	r3, [pc, #36]	; (8009d18 <TIM_ITRx_SetConfig+0x38>)
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	f043 0307 	orr.w	r3, r3, #7
 8009d02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	609a      	str	r2, [r3, #8]
}
 8009d0a:	bf00      	nop
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	ffcfff8f 	.word	0xffcfff8f

08009d1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
 8009d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	021a      	lsls	r2, r3, #8
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	431a      	orrs	r2, r3
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	609a      	str	r2, [r3, #8]
}
 8009d50:	bf00      	nop
 8009d52:	371c      	adds	r7, #28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d101      	bne.n	8009d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d70:	2302      	movs	r3, #2
 8009d72:	e06d      	b.n	8009e50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a30      	ldr	r2, [pc, #192]	; (8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d004      	beq.n	8009da8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a2f      	ldr	r2, [pc, #188]	; (8009e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d108      	bne.n	8009dba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009dae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a20      	ldr	r2, [pc, #128]	; (8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d022      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de6:	d01d      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a1d      	ldr	r2, [pc, #116]	; (8009e64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d018      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a1c      	ldr	r2, [pc, #112]	; (8009e68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d013      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a1a      	ldr	r2, [pc, #104]	; (8009e6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d00e      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a15      	ldr	r2, [pc, #84]	; (8009e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d009      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a16      	ldr	r2, [pc, #88]	; (8009e70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d004      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a15      	ldr	r2, [pc, #84]	; (8009e74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d10c      	bne.n	8009e3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	40010000 	.word	0x40010000
 8009e60:	40010400 	.word	0x40010400
 8009e64:	40000400 	.word	0x40000400
 8009e68:	40000800 	.word	0x40000800
 8009e6c:	40000c00 	.word	0x40000c00
 8009e70:	40001800 	.word	0x40001800
 8009e74:	40014000 	.word	0x40014000

08009e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d121      	bne.n	8009f0a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	4b27      	ldr	r3, [pc, #156]	; (8009f68 <FMC_SDRAM_Init+0xb4>)
 8009ecc:	4013      	ands	r3, r2
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	6851      	ldr	r1, [r2, #4]
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	6892      	ldr	r2, [r2, #8]
 8009ed6:	4311      	orrs	r1, r2
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	68d2      	ldr	r2, [r2, #12]
 8009edc:	4311      	orrs	r1, r2
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	6912      	ldr	r2, [r2, #16]
 8009ee2:	4311      	orrs	r1, r2
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	6952      	ldr	r2, [r2, #20]
 8009ee8:	4311      	orrs	r1, r2
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	6992      	ldr	r2, [r2, #24]
 8009eee:	4311      	orrs	r1, r2
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	69d2      	ldr	r2, [r2, #28]
 8009ef4:	4311      	orrs	r1, r2
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	6a12      	ldr	r2, [r2, #32]
 8009efa:	4311      	orrs	r1, r2
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f00:	430a      	orrs	r2, r1
 8009f02:	431a      	orrs	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	e026      	b.n	8009f58 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	69d9      	ldr	r1, [r3, #28]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	4319      	orrs	r1, r3
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	430b      	orrs	r3, r1
 8009f22:	431a      	orrs	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	4b0e      	ldr	r3, [pc, #56]	; (8009f68 <FMC_SDRAM_Init+0xb4>)
 8009f2e:	4013      	ands	r3, r2
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	6851      	ldr	r1, [r2, #4]
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	6892      	ldr	r2, [r2, #8]
 8009f38:	4311      	orrs	r1, r2
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	68d2      	ldr	r2, [r2, #12]
 8009f3e:	4311      	orrs	r1, r2
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	6912      	ldr	r2, [r2, #16]
 8009f44:	4311      	orrs	r1, r2
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	6952      	ldr	r2, [r2, #20]
 8009f4a:	4311      	orrs	r1, r2
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	6992      	ldr	r2, [r2, #24]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	ffff8000 	.word	0xffff8000

08009f6c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d128      	bne.n	8009fd0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	1e59      	subs	r1, r3, #1
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	4319      	orrs	r1, r3
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	021b      	lsls	r3, r3, #8
 8009f9e:	4319      	orrs	r1, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	031b      	lsls	r3, r3, #12
 8009fa8:	4319      	orrs	r1, r3
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	041b      	lsls	r3, r3, #16
 8009fb2:	4319      	orrs	r1, r3
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	695b      	ldr	r3, [r3, #20]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	051b      	lsls	r3, r3, #20
 8009fbc:	4319      	orrs	r1, r3
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	061b      	lsls	r3, r3, #24
 8009fc6:	430b      	orrs	r3, r1
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	609a      	str	r2, [r3, #8]
 8009fce:	e02d      	b.n	800a02c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	689a      	ldr	r2, [r3, #8]
 8009fd4:	4b19      	ldr	r3, [pc, #100]	; (800a03c <FMC_SDRAM_Timing_Init+0xd0>)
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	68d2      	ldr	r2, [r2, #12]
 8009fdc:	3a01      	subs	r2, #1
 8009fde:	0311      	lsls	r1, r2, #12
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	6952      	ldr	r2, [r2, #20]
 8009fe4:	3a01      	subs	r2, #1
 8009fe6:	0512      	lsls	r2, r2, #20
 8009fe8:	430a      	orrs	r2, r1
 8009fea:	431a      	orrs	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	1e59      	subs	r1, r3, #1
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	3b01      	subs	r3, #1
 800a004:	011b      	lsls	r3, r3, #4
 800a006:	4319      	orrs	r1, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	3b01      	subs	r3, #1
 800a00e:	021b      	lsls	r3, r3, #8
 800a010:	4319      	orrs	r1, r3
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	3b01      	subs	r3, #1
 800a018:	041b      	lsls	r3, r3, #16
 800a01a:	4319      	orrs	r1, r3
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	3b01      	subs	r3, #1
 800a022:	061b      	lsls	r3, r3, #24
 800a024:	430b      	orrs	r3, r1
 800a026:	431a      	orrs	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	ff0f0fff 	.word	0xff0f0fff

0800a040 <isl76682_init>:

#define DEV_RANGE    ISL76682_RANGE_16K
#define DEV_MODE     ISL76682_MODE_AMBIENT

int isl76682_init(uint16_t addr)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b088      	sub	sp, #32
 800a044:	af04      	add	r7, sp, #16
 800a046:	4603      	mov	r3, r0
 800a048:	80fb      	strh	r3, [r7, #6]
	int res;
	uint8_t config;

	/* initialize device descriptor */

	lux_fac = (float)((1 << (10 + (2 * DEV_RANGE))) - 1) / 0xffff;
 800a04a:	4b16      	ldr	r3, [pc, #88]	; (800a0a4 <isl76682_init+0x64>)
 800a04c:	4a16      	ldr	r2, [pc, #88]	; (800a0a8 <isl76682_init+0x68>)
 800a04e:	601a      	str	r2, [r3, #0]

	/* acquire access to device */
	if (HAL_I2C_IsDeviceReady(&hi2c4, addr, 3, 1000) != HAL_OK) // shift karena ada start bit
 800a050:	88f9      	ldrh	r1, [r7, #6]
 800a052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a056:	2203      	movs	r2, #3
 800a058:	4814      	ldr	r0, [pc, #80]	; (800a0ac <isl76682_init+0x6c>)
 800a05a:	f7fa fc17 	bl	800488c <HAL_I2C_IsDeviceReady>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <isl76682_init+0x2a>
	{
	  /* Return false */
	  return -1;
 800a064:	f04f 33ff 	mov.w	r3, #4294967295
 800a068:	e018      	b.n	800a09c <isl76682_init+0x5c>
	}

	/* configure and enable the sensor */

	config = (ISL76682_CMD_EN | ISL76682_CMD_MODE |
 800a06a:	23c2      	movs	r3, #194	; 0xc2
 800a06c:	72fb      	strb	r3, [r7, #11]
	    ISL76682_RES_INT_16 | DEV_RANGE | (DEV_MODE << 5));
	res = HAL_I2C_Mem_Write(&hi2c4, addr, ISL76682_REG_CMD,
 800a06e:	88f9      	ldrh	r1, [r7, #6]
 800a070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a074:	9302      	str	r3, [sp, #8]
 800a076:	2301      	movs	r3, #1
 800a078:	9301      	str	r3, [sp, #4]
 800a07a:	f107 030b 	add.w	r3, r7, #11
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	2301      	movs	r3, #1
 800a082:	2200      	movs	r2, #0
 800a084:	4809      	ldr	r0, [pc, #36]	; (800a0ac <isl76682_init+0x6c>)
 800a086:	f7fa f9d3 	bl	8004430 <HAL_I2C_Mem_Write>
 800a08a:	4603      	mov	r3, r0
 800a08c:	60fb      	str	r3, [r7, #12]
	                        I2C_MEMADD_SIZE_8BIT, &config, sizeof(config), 1000);
	if (res < 0)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	da02      	bge.n	800a09a <isl76682_init+0x5a>
	{
	  return -1;
 800a094:	f04f 33ff 	mov.w	r3, #4294967295
 800a098:	e000      	b.n	800a09c <isl76682_init+0x5c>
	}

	return 0;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	240003d4 	.word	0x240003d4
 800a0a8:	3e7ffd00 	.word	0x3e7ffd00
 800a0ac:	240001f4 	.word	0x240001f4

0800a0b0 <isl76682_read>:

int isl76682_read(const uint16_t addr)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b088      	sub	sp, #32
 800a0b4:	af04      	add	r7, sp, #16
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	80fb      	strh	r3, [r7, #6]
  uint8_t low, high;
  uint16_t res;
  int ret;

  /* read lighting value */
  ret = HAL_I2C_Mem_Read(&hi2c4, addr, ISL76682_REG_LDATA,
 800a0ba:	88f9      	ldrh	r1, [r7, #6]
 800a0bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a0c0:	9302      	str	r3, [sp, #8]
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	9301      	str	r3, [sp, #4]
 800a0c6:	f107 0309 	add.w	r3, r7, #9
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	481b      	ldr	r0, [pc, #108]	; (800a140 <isl76682_read+0x90>)
 800a0d2:	f7fa fac1 	bl	8004658 <HAL_I2C_Mem_Read>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	60fb      	str	r3, [r7, #12]
                         I2C_MEMADD_SIZE_8BIT, &low, 1, 1000);
  ret += HAL_I2C_Mem_Read(&hi2c4, addr, ISL76682_REG_HDATA,
 800a0da:	88f9      	ldrh	r1, [r7, #6]
 800a0dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a0e0:	9302      	str	r3, [sp, #8]
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	9301      	str	r3, [sp, #4]
 800a0e6:	f107 0308 	add.w	r3, r7, #8
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	4813      	ldr	r0, [pc, #76]	; (800a140 <isl76682_read+0x90>)
 800a0f2:	f7fa fab1 	bl	8004658 <HAL_I2C_Mem_Read>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	60fb      	str	r3, [r7, #12]
                          I2C_MEMADD_SIZE_8BIT, &high, 1, 1000);
  if (ret != 0) //check error
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <isl76682_read+0x5c>
  {
    return -1;
 800a106:	f04f 33ff 	mov.w	r3, #4294967295
 800a10a:	e015      	b.n	800a138 <isl76682_read+0x88>
  }
  res = (high << 8) | low;
 800a10c:	7a3b      	ldrb	r3, [r7, #8]
 800a10e:	021b      	lsls	r3, r3, #8
 800a110:	b21a      	sxth	r2, r3
 800a112:	7a7b      	ldrb	r3, [r7, #9]
 800a114:	b21b      	sxth	r3, r3
 800a116:	4313      	orrs	r3, r2
 800a118:	b21b      	sxth	r3, r3
 800a11a:	817b      	strh	r3, [r7, #10]
  /* calculate and return the actual lux value */
  return (int)(lux_fac * res);
 800a11c:	897b      	ldrh	r3, [r7, #10]
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a126:	4b07      	ldr	r3, [pc, #28]	; (800a144 <isl76682_read+0x94>)
 800a128:	edd3 7a00 	vldr	s15, [r3]
 800a12c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a134:	ee17 3a90 	vmov	r3, s15
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	240001f4 	.word	0x240001f4
 800a144:	240003d4 	.word	0x240003d4

0800a148 <__libc_init_array>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	4d0d      	ldr	r5, [pc, #52]	; (800a180 <__libc_init_array+0x38>)
 800a14c:	4c0d      	ldr	r4, [pc, #52]	; (800a184 <__libc_init_array+0x3c>)
 800a14e:	1b64      	subs	r4, r4, r5
 800a150:	10a4      	asrs	r4, r4, #2
 800a152:	2600      	movs	r6, #0
 800a154:	42a6      	cmp	r6, r4
 800a156:	d109      	bne.n	800a16c <__libc_init_array+0x24>
 800a158:	4d0b      	ldr	r5, [pc, #44]	; (800a188 <__libc_init_array+0x40>)
 800a15a:	4c0c      	ldr	r4, [pc, #48]	; (800a18c <__libc_init_array+0x44>)
 800a15c:	f000 f82e 	bl	800a1bc <_init>
 800a160:	1b64      	subs	r4, r4, r5
 800a162:	10a4      	asrs	r4, r4, #2
 800a164:	2600      	movs	r6, #0
 800a166:	42a6      	cmp	r6, r4
 800a168:	d105      	bne.n	800a176 <__libc_init_array+0x2e>
 800a16a:	bd70      	pop	{r4, r5, r6, pc}
 800a16c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a170:	4798      	blx	r3
 800a172:	3601      	adds	r6, #1
 800a174:	e7ee      	b.n	800a154 <__libc_init_array+0xc>
 800a176:	f855 3b04 	ldr.w	r3, [r5], #4
 800a17a:	4798      	blx	r3
 800a17c:	3601      	adds	r6, #1
 800a17e:	e7f2      	b.n	800a166 <__libc_init_array+0x1e>
 800a180:	0800a230 	.word	0x0800a230
 800a184:	0800a230 	.word	0x0800a230
 800a188:	0800a230 	.word	0x0800a230
 800a18c:	0800a234 	.word	0x0800a234

0800a190 <memcpy>:
 800a190:	440a      	add	r2, r1
 800a192:	4291      	cmp	r1, r2
 800a194:	f100 33ff 	add.w	r3, r0, #4294967295
 800a198:	d100      	bne.n	800a19c <memcpy+0xc>
 800a19a:	4770      	bx	lr
 800a19c:	b510      	push	{r4, lr}
 800a19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1a6:	4291      	cmp	r1, r2
 800a1a8:	d1f9      	bne.n	800a19e <memcpy+0xe>
 800a1aa:	bd10      	pop	{r4, pc}

0800a1ac <memset>:
 800a1ac:	4402      	add	r2, r0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d100      	bne.n	800a1b6 <memset+0xa>
 800a1b4:	4770      	bx	lr
 800a1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ba:	e7f9      	b.n	800a1b0 <memset+0x4>

0800a1bc <_init>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	bf00      	nop
 800a1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c2:	bc08      	pop	{r3}
 800a1c4:	469e      	mov	lr, r3
 800a1c6:	4770      	bx	lr

0800a1c8 <_fini>:
 800a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ca:	bf00      	nop
 800a1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ce:	bc08      	pop	{r3}
 800a1d0:	469e      	mov	lr, r3
 800a1d2:	4770      	bx	lr
