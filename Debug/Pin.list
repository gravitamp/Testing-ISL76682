
Pin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cea8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800d140  0800d140  0001d140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d380  0800d380  0001d380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d384  0800d384  0001d384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800d388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000638  24000010  0800d398  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000648  0800d398  00020648  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00028523  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004863  00000000  00000000  00048561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001de8  00000000  00000000  0004cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001bc0  00000000  00000000  0004ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003da14  00000000  00000000  00050770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00029204  00000000  00000000  0008e184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001834f9  00000000  00000000  000b7388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0023a881  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000816c  00000000  00000000  0023a8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d128 	.word	0x0800d128

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800d128 	.word	0x0800d128

080002d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ea:	463b      	mov	r3, r7
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
 80002f8:	615a      	str	r2, [r3, #20]
 80002fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fc:	4b2f      	ldr	r3, [pc, #188]	; (80003bc <MX_ADC1_Init+0xe4>)
 80002fe:	4a30      	ldr	r2, [pc, #192]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000300:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000302:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000308:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <MX_ADC1_Init+0xe4>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030e:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000314:	4b29      	ldr	r3, [pc, #164]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000316:	2204      	movs	r2, #4
 8000318:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800031a:	4b28      	ldr	r3, [pc, #160]	; (80003bc <MX_ADC1_Init+0xe4>)
 800031c:	2200      	movs	r2, #0
 800031e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000320:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000322:	2200      	movs	r2, #0
 8000324:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000326:	4b25      	ldr	r3, [pc, #148]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000328:	2201      	movs	r2, #1
 800032a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032c:	4b23      	ldr	r3, [pc, #140]	; (80003bc <MX_ADC1_Init+0xe4>)
 800032e:	2200      	movs	r2, #0
 8000330:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000334:	2200      	movs	r2, #0
 8000336:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_ADC1_Init+0xe4>)
 800033a:	2200      	movs	r2, #0
 800033c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000340:	2200      	movs	r2, #0
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000346:	2200      	movs	r2, #0
 8000348:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_ADC1_Init+0xe4>)
 800034c:	2200      	movs	r2, #0
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000352:	2200      	movs	r2, #0
 8000354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000358:	4818      	ldr	r0, [pc, #96]	; (80003bc <MX_ADC1_Init+0xe4>)
 800035a:	f001 fef7 	bl	800214c <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000364:	f001 fa2c 	bl	80017c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	4619      	mov	r1, r3
 8000372:	4812      	ldr	r0, [pc, #72]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000374:	f002 fd0c 	bl	8002d90 <HAL_ADCEx_MultiModeConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800037e:	f001 fa1f 	bl	80017c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <MX_ADC1_Init+0xec>)
 8000384:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000386:	2306      	movs	r3, #6
 8000388:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_ADC1_Init+0xf0>)
 8000390:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000392:	2304      	movs	r3, #4
 8000394:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039e:	463b      	mov	r3, r7
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <MX_ADC1_Init+0xe4>)
 80003a4:	f002 f874 	bl	8002490 <HAL_ADC_ConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80003ae:	f001 fa07 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	3728      	adds	r7, #40	; 0x28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	2400002c 	.word	0x2400002c
 80003c0:	40022000 	.word	0x40022000
 80003c4:	10c00010 	.word	0x10c00010
 80003c8:	47ff0000 	.word	0x47ff0000

080003cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b0b8      	sub	sp, #224	; 0xe0
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003e4:	f107 0310 	add.w	r3, r7, #16
 80003e8:	22bc      	movs	r2, #188	; 0xbc
 80003ea:	2100      	movs	r1, #0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f00c fe93 	bl	800d118 <memset>
  if(adcHandle->Instance==ADC1)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a22      	ldr	r2, [pc, #136]	; (8000480 <HAL_ADC_MspInit+0xb4>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d13d      	bne.n	8000478 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000400:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4618      	mov	r0, r3
 8000410:	f008 f87c 	bl	800850c <HAL_RCCEx_PeriphCLKConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800041a:	f001 f9d1 	bl	80017c0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800041e:	4b19      	ldr	r3, [pc, #100]	; (8000484 <HAL_ADC_MspInit+0xb8>)
 8000420:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000424:	4a17      	ldr	r2, [pc, #92]	; (8000484 <HAL_ADC_MspInit+0xb8>)
 8000426:	f043 0320 	orr.w	r3, r3, #32
 800042a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <HAL_ADC_MspInit+0xb8>)
 8000430:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000434:	f003 0320 	and.w	r3, r3, #32
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <HAL_ADC_MspInit+0xb8>)
 800043e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000442:	4a10      	ldr	r2, [pc, #64]	; (8000484 <HAL_ADC_MspInit+0xb8>)
 8000444:	f043 0304 	orr.w	r3, r3, #4
 8000448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <HAL_ADC_MspInit+0xb8>)
 800044e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000452:	f003 0304 	and.w	r3, r3, #4
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = TEMP1_Pin|TEMP2_Pin;
 800045a:	2330      	movs	r3, #48	; 0x30
 800045c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000460:	2303      	movs	r3, #3
 8000462:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000470:	4619      	mov	r1, r3
 8000472:	4805      	ldr	r0, [pc, #20]	; (8000488 <HAL_ADC_MspInit+0xbc>)
 8000474:	f006 fa0c 	bl	8006890 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000478:	bf00      	nop
 800047a:	37e0      	adds	r7, #224	; 0xe0
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40022000 	.word	0x40022000
 8000484:	58024400 	.word	0x58024400
 8000488:	58020800 	.word	0x58020800

0800048c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <MX_CRC_Init+0x3c>)
 8000492:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <MX_CRC_Init+0x40>)
 8000494:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_CRC_Init+0x3c>)
 8000498:	2200      	movs	r2, #0
 800049a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <MX_CRC_Init+0x3c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_CRC_Init+0x3c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <MX_CRC_Init+0x3c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_CRC_Init+0x3c>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004b4:	4804      	ldr	r0, [pc, #16]	; (80004c8 <MX_CRC_Init+0x3c>)
 80004b6:	f002 fe59 	bl	800316c <HAL_CRC_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80004c0:	f001 f97e 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	24000090 	.word	0x24000090
 80004cc:	58024c00 	.word	0x58024c00

080004d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0b      	ldr	r2, [pc, #44]	; (800050c <HAL_CRC_MspInit+0x3c>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d10e      	bne.n	8000500 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_CRC_MspInit+0x40>)
 80004e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004e8:	4a09      	ldr	r2, [pc, #36]	; (8000510 <HAL_CRC_MspInit+0x40>)
 80004ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <HAL_CRC_MspInit+0x40>)
 80004f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	58024c00 	.word	0x58024c00
 8000510:	58024400 	.word	0x58024400

08000514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_DMA_Init+0x3c>)
 800051c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <MX_DMA_Init+0x3c>)
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_DMA_Init+0x3c>)
 800052c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000538:	2200      	movs	r2, #0
 800053a:	2100      	movs	r1, #0
 800053c:	200c      	movs	r0, #12
 800053e:	f002 fde0 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000542:	200c      	movs	r0, #12
 8000544:	f002 fdf7 	bl	8003136 <HAL_NVIC_EnableIRQ>

}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	58024400 	.word	0x58024400

08000554 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000558:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 800055a:	4a1a      	ldr	r2, [pc, #104]	; (80005c4 <MX_DMA2D_Init+0x70>)
 800055c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 8000566:	2202      	movs	r2, #2
 8000568:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 8000572:	2200      	movs	r2, #0
 8000574:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 8000578:	2202      	movs	r2, #2
 800057a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 800057e:	2200      	movs	r2, #0
 8000580:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 8000584:	2200      	movs	r2, #0
 8000586:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 800058a:	2200      	movs	r2, #0
 800058c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 8000590:	2200      	movs	r2, #0
 8000592:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 8000596:	2200      	movs	r2, #0
 8000598:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800059a:	4809      	ldr	r0, [pc, #36]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 800059c:	f005 f9ee 	bl	800597c <HAL_DMA2D_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005a6:	f001 f90b 	bl	80017c0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005aa:	2101      	movs	r1, #1
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_DMA2D_Init+0x6c>)
 80005ae:	f005 fa49 	bl	8005a44 <HAL_DMA2D_ConfigLayer>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80005b8:	f001 f902 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	240000b4 	.word	0x240000b4
 80005c4:	52001000 	.word	0x52001000

080005c8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <HAL_DMA2D_MspInit+0x3c>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d10e      	bne.n	80005f8 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_DMA2D_MspInit+0x40>)
 80005dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80005e0:	4a09      	ldr	r2, [pc, #36]	; (8000608 <HAL_DMA2D_MspInit+0x40>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <HAL_DMA2D_MspInit+0x40>)
 80005ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	52001000 	.word	0x52001000
 8000608:	58024400 	.word	0x58024400

0800060c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000612:	4a2f      	ldr	r2, [pc, #188]	; (80006d0 <MX_FDCAN1_Init+0xc4>)
 8000614:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000616:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000624:	2200      	movs	r2, #0
 8000626:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 800062a:	2200      	movs	r2, #0
 800062c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800062e:	4b27      	ldr	r3, [pc, #156]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000630:	2200      	movs	r2, #0
 8000632:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000636:	2204      	movs	r2, #4
 8000638:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 26;
 800063a:	4b24      	ldr	r3, [pc, #144]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 800063c:	221a      	movs	r2, #26
 800063e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 4;
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000642:	2204      	movs	r2, #4
 8000644:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000648:	2203      	movs	r2, #3
 800064a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 6;
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 800064e:	2206      	movs	r2, #6
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000652:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000654:	2204      	movs	r2, #4
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 800065a:	2202      	movs	r2, #2
 800065c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000660:	2205      	movs	r2, #5
 8000662:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000666:	2200      	movs	r2, #0
 8000668:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 800066c:	2201      	movs	r2, #1
 800066e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000672:	2200      	movs	r2, #0
 8000674:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000678:	2220      	movs	r2, #32
 800067a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 800067e:	2205      	movs	r2, #5
 8000680:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000684:	2220      	movs	r2, #32
 8000686:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_12;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 800068a:	2205      	movs	r2, #5
 800068c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000690:	2220      	movs	r2, #32
 8000692:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_12;
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 8000696:	2205      	movs	r2, #5
 8000698:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 800069c:	2200      	movs	r2, #0
 800069e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 80006a8:	2220      	movs	r2, #32
 80006aa:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 80006b4:	2205      	movs	r2, #5
 80006b6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_FDCAN1_Init+0xc0>)
 80006ba:	f005 fa71 	bl	8005ba0 <HAL_FDCAN_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80006c4:	f001 f87c 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	2400011c 	.word	0x2400011c
 80006d0:	4000a000 	.word	0x4000a000

080006d4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b0b8      	sub	sp, #224	; 0xe0
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	22bc      	movs	r2, #188	; 0xbc
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f00c fd0f 	bl	800d118 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a29      	ldr	r2, [pc, #164]	; (80007a4 <HAL_FDCAN_MspInit+0xd0>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d14a      	bne.n	800079a <HAL_FDCAN_MspInit+0xc6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000708:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800070a:	2300      	movs	r3, #0
 800070c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	4618      	mov	r0, r3
 8000714:	f007 fefa 	bl	800850c <HAL_RCCEx_PeriphCLKConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 800071e:	f001 f84f 	bl	80017c0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <HAL_FDCAN_MspInit+0xd4>)
 8000724:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000728:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <HAL_FDCAN_MspInit+0xd4>)
 800072a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <HAL_FDCAN_MspInit+0xd4>)
 8000734:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_FDCAN_MspInit+0xd4>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <HAL_FDCAN_MspInit+0xd4>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_FDCAN_MspInit+0xd4>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800075e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000762:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000778:	2309      	movs	r3, #9
 800077a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000782:	4619      	mov	r1, r3
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <HAL_FDCAN_MspInit+0xd8>)
 8000786:	f006 f883 	bl	8006890 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2013      	movs	r0, #19
 8000790:	f002 fcb7 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000794:	2013      	movs	r0, #19
 8000796:	f002 fcce 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800079a:	bf00      	nop
 800079c:	37e0      	adds	r7, #224	; 0xe0
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	4000a000 	.word	0x4000a000
 80007a8:	58024400 	.word	0x58024400
 80007ac:	58020000 	.word	0x58020000

080007b0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_FMC_Init+0x9c>)
 80007ca:	4a21      	ldr	r2, [pc, #132]	; (8000850 <MX_FMC_Init+0xa0>)
 80007cc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_FMC_Init+0x9c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_FMC_Init+0x9c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_FMC_Init+0x9c>)
 80007dc:	2204      	movs	r2, #4
 80007de:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_FMC_Init+0x9c>)
 80007e2:	2210      	movs	r2, #16
 80007e4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_FMC_Init+0x9c>)
 80007e8:	2240      	movs	r2, #64	; 0x40
 80007ea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_FMC_Init+0x9c>)
 80007ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007f2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_FMC_Init+0x9c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_FMC_Init+0x9c>)
 80007fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000800:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_FMC_Init+0x9c>)
 8000804:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_FMC_Init+0x9c>)
 800080c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 8000816:	2309      	movs	r3, #9
 8000818:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 800081a:	2306      	movs	r3, #6
 800081c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 8;
 800081e:	2308      	movs	r3, #8
 8000820:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 8000822:	2304      	movs	r3, #4
 8000824:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <MX_FMC_Init+0x9c>)
 8000834:	f009 fff6 	bl	800a824 <HAL_SDRAM_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 800083e:	f000 ffbf 	bl	80017c0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	240001bc 	.word	0x240001bc
 8000850:	52004140 	.word	0x52004140

08000854 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	b0b6      	sub	sp, #216	; 0xd8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800086a:	4b65      	ldr	r3, [pc, #404]	; (8000a00 <HAL_FMC_MspInit+0x1ac>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 80c1 	bne.w	80009f6 <HAL_FMC_MspInit+0x1a2>
    return;
  }
  FMC_Initialized = 1;
 8000874:	4b62      	ldr	r3, [pc, #392]	; (8000a00 <HAL_FMC_MspInit+0x1ac>)
 8000876:	2201      	movs	r2, #1
 8000878:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	22bc      	movs	r2, #188	; 0xbc
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f00c fc48 	bl	800d118 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800088c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 133;
 8000892:	2385      	movs	r3, #133	; 0x85
 8000894:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000896:	2304      	movs	r3, #4
 8000898:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 800089a:	2308      	movs	r3, #8
 800089c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 4;
 800089e:	2304      	movs	r3, #4
 80008a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	4618      	mov	r0, r3
 80008b4:	f007 fe2a 	bl	800850c <HAL_RCCEx_PeriphCLKConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <HAL_FMC_MspInit+0x6e>
    {
      Error_Handler();
 80008be:	f000 ff7f 	bl	80017c0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80008c2:	4b50      	ldr	r3, [pc, #320]	; (8000a04 <HAL_FMC_MspInit+0x1b0>)
 80008c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80008c8:	4a4e      	ldr	r2, [pc, #312]	; (8000a04 <HAL_FMC_MspInit+0x1b0>)
 80008ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008ce:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80008d2:	4b4c      	ldr	r3, [pc, #304]	; (8000a04 <HAL_FMC_MspInit+0x1b0>)
 80008d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80008d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008e0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008fa:	230c      	movs	r3, #12
 80008fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000900:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000904:	4619      	mov	r1, r3
 8000906:	4840      	ldr	r0, [pc, #256]	; (8000a08 <HAL_FMC_MspInit+0x1b4>)
 8000908:	f005 ffc2 	bl	8006890 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800090c:	230c      	movs	r3, #12
 800090e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000924:	230c      	movs	r3, #12
 8000926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800092e:	4619      	mov	r1, r3
 8000930:	4836      	ldr	r0, [pc, #216]	; (8000a0c <HAL_FMC_MspInit+0x1b8>)
 8000932:	f005 ffad 	bl	8006890 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800094e:	230c      	movs	r3, #12
 8000950:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000958:	4619      	mov	r1, r3
 800095a:	482d      	ldr	r0, [pc, #180]	; (8000a10 <HAL_FMC_MspInit+0x1bc>)
 800095c:	f005 ff98 	bl	8006890 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000960:	f248 1333 	movw	r3, #33075	; 0x8133
 8000964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800097a:	230c      	movs	r3, #12
 800097c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000980:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000984:	4619      	mov	r1, r3
 8000986:	4823      	ldr	r0, [pc, #140]	; (8000a14 <HAL_FMC_MspInit+0x1c0>)
 8000988:	f005 ff82 	bl	8006890 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800098c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a6:	230c      	movs	r3, #12
 80009a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009b0:	4619      	mov	r1, r3
 80009b2:	4819      	ldr	r0, [pc, #100]	; (8000a18 <HAL_FMC_MspInit+0x1c4>)
 80009b4:	f005 ff6c 	bl	8006890 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80009b8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009d2:	230c      	movs	r3, #12
 80009d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009dc:	4619      	mov	r1, r3
 80009de:	480f      	ldr	r0, [pc, #60]	; (8000a1c <HAL_FMC_MspInit+0x1c8>)
 80009e0:	f005 ff56 	bl	8006890 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2030      	movs	r0, #48	; 0x30
 80009ea:	f002 fb8a 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 80009ee:	2030      	movs	r0, #48	; 0x30
 80009f0:	f002 fba1 	bl	8003136 <HAL_NVIC_EnableIRQ>
 80009f4:	e000      	b.n	80009f8 <HAL_FMC_MspInit+0x1a4>
    return;
 80009f6:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80009f8:	37d8      	adds	r7, #216	; 0xd8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	240001f0 	.word	0x240001f0
 8000a04:	58024400 	.word	0x58024400
 8000a08:	58021400 	.word	0x58021400
 8000a0c:	58020800 	.word	0x58020800
 8000a10:	58020000 	.word	0x58020000
 8000a14:	58021800 	.word	0x58021800
 8000a18:	58021000 	.word	0x58021000
 8000a1c:	58020c00 	.word	0x58020c00

08000a20 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000a28:	f7ff ff14 	bl	8000854 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	; 0x38
 8000a38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4a:	4b63      	ldr	r3, [pc, #396]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	4a61      	ldr	r2, [pc, #388]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5a:	4b5f      	ldr	r3, [pc, #380]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	623b      	str	r3, [r7, #32]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a68:	4b5b      	ldr	r3, [pc, #364]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	4a5a      	ldr	r2, [pc, #360]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a70:	f043 0320 	orr.w	r3, r3, #32
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a78:	4b57      	ldr	r3, [pc, #348]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	f003 0320 	and.w	r3, r3, #32
 8000a82:	61fb      	str	r3, [r7, #28]
 8000a84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	4b54      	ldr	r3, [pc, #336]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	4a52      	ldr	r2, [pc, #328]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a96:	4b50      	ldr	r3, [pc, #320]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa4:	4b4c      	ldr	r3, [pc, #304]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	4a4b      	ldr	r2, [pc, #300]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab4:	4b48      	ldr	r3, [pc, #288]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b45      	ldr	r3, [pc, #276]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	4a43      	ldr	r2, [pc, #268]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad2:	4b41      	ldr	r3, [pc, #260]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	4a3c      	ldr	r2, [pc, #240]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af0:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afe:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b04:	4a34      	ldr	r2, [pc, #208]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0e:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b22:	4a2d      	ldr	r2, [pc, #180]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_TPS_Pin|ISEL_TPS_Pin|EN_MT3608_Pin|ERROR_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b40:	4826      	ldr	r0, [pc, #152]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000b42:	f006 f855 	bl	8006bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HVR_GPIO_Port, HVR_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4c:	4824      	ldr	r0, [pc, #144]	; (8000be0 <MX_GPIO_Init+0x1ac>)
 8000b4e:	f006 f84f 	bl	8006bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_EN_Pin|SHTDN_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 8000b58:	4822      	ldr	r0, [pc, #136]	; (8000be4 <MX_GPIO_Init+0x1b0>)
 8000b5a:	f006 f849 	bl	8006bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP1_Pin;
 8000b5e:	2310      	movs	r3, #16
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b62:	2303      	movs	r3, #3
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TEMP1_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481d      	ldr	r0, [pc, #116]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000b72:	f005 fe8d 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EN_TPS_Pin|ISEL_TPS_Pin|EN_MT3608_Pin|ERROR_Pin;
 8000b76:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4813      	ldr	r0, [pc, #76]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000b90:	f005 fe7e 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HVR_Pin;
 8000b94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HVR_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_GPIO_Init+0x1ac>)
 8000bae:	f005 fe6f 	bl	8006890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BL_EN_Pin|SHTDN_Pin;
 8000bb2:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MX_GPIO_Init+0x1b0>)
 8000bcc:	f005 fe60 	bl	8006890 <HAL_GPIO_Init>

}
 8000bd0:	bf00      	nop
 8000bd2:	3738      	adds	r7, #56	; 0x38
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	58020400 	.word	0x58020400
 8000be0:	58020c00 	.word	0x58020c00
 8000be4:	58020000 	.word	0x58020000
 8000be8:	58020800 	.word	0x58020800

08000bec <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <MX_I2C4_Init+0x74>)
 8000bf2:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <MX_I2C4_Init+0x78>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00000004;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_I2C4_Init+0x74>)
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_I2C4_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_I2C4_Init+0x74>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_I2C4_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_I2C4_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_I2C4_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_I2C4_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_I2C4_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c26:	480e      	ldr	r0, [pc, #56]	; (8000c60 <MX_I2C4_Init+0x74>)
 8000c28:	f005 fffc 	bl	8006c24 <HAL_I2C_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000c32:	f000 fdc5 	bl	80017c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4809      	ldr	r0, [pc, #36]	; (8000c60 <MX_I2C4_Init+0x74>)
 8000c3a:	f006 f89d 	bl	8006d78 <HAL_I2CEx_ConfigAnalogFilter>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000c44:	f000 fdbc 	bl	80017c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_I2C4_Init+0x74>)
 8000c4c:	f006 f8df 	bl	8006e0e <HAL_I2CEx_ConfigDigitalFilter>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c56:	f000 fdb3 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	240001f4 	.word	0x240001f4
 8000c64:	58001c00 	.word	0x58001c00

08000c68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0b8      	sub	sp, #224	; 0xe0
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	22bc      	movs	r2, #188	; 0xbc
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f00c fa45 	bl	800d118 <memset>
  if(i2cHandle->Instance==I2C4)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a29      	ldr	r2, [pc, #164]	; (8000d38 <HAL_I2C_MspInit+0xd0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d14b      	bne.n	8000d30 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000c98:	2310      	movs	r3, #16
 8000c9a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_CSI;
 8000c9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f007 fc2f 	bl	800850c <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000cb4:	f000 fd84 	bl	80017c0 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <HAL_I2C_MspInit+0xd4>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	4a1f      	ldr	r2, [pc, #124]	; (8000d3c <HAL_I2C_MspInit+0xd4>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_I2C_MspInit+0xd4>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4810      	ldr	r0, [pc, #64]	; (8000d40 <HAL_I2C_MspInit+0xd8>)
 8000cfe:	f005 fdc7 	bl	8006890 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_I2C_MspInit+0xd4>)
 8000d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d08:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <HAL_I2C_MspInit+0xd4>)
 8000d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_I2C_MspInit+0xd4>)
 8000d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	205f      	movs	r0, #95	; 0x5f
 8000d26:	f002 f9ec 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8000d2a:	205f      	movs	r0, #95	; 0x5f
 8000d2c:	f002 fa03 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000d30:	bf00      	nop
 8000d32:	37e0      	adds	r7, #224	; 0xe0
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	58001c00 	.word	0x58001c00
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020c00 	.word	0x58020c00

08000d44 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2234      	movs	r2, #52	; 0x34
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f00c f9e1 	bl	800d118 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d56:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000d58:	4a3a      	ldr	r2, [pc, #232]	; (8000e44 <MX_LTDC_Init+0x100>)
 8000d5a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d5c:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d68:	4b35      	ldr	r3, [pc, #212]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d6e:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 32;
 8000d74:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000d76:	2220      	movs	r2, #32
 8000d78:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 5;
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 112;
 8000d80:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000d82:	2270      	movs	r2, #112	; 0x70
 8000d84:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 18;
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000d88:	2212      	movs	r2, #18
 8000d8a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1392;
 8000d8c:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000d8e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8000d92:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 738;
 8000d94:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000d96:	f240 22e2 	movw	r2, #738	; 0x2e2
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1440;
 8000d9c:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000d9e:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 741;
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000da6:	f240 22e5 	movw	r2, #741	; 0x2e5
 8000daa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000dbc:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000dc4:	481e      	ldr	r0, [pc, #120]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000dc6:	f006 f86f 	bl	8006ea8 <HAL_LTDC_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000dd0:	f000 fcf6 	bl	80017c0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1280;
 8000dd8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ddc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 720;
 8000de2:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8000de6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000de8:	2302      	movs	r3, #2
 8000dea:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000dec:	23ff      	movs	r3, #255	; 0xff
 8000dee:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1280;
 8000e02:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 720;
 8000e08:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_LTDC_Init+0xfc>)
 8000e28:	f006 f9d0 	bl	80071cc <HAL_LTDC_ConfigLayer>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000e32:	f000 fcc5 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3738      	adds	r7, #56	; 0x38
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24000240 	.word	0x24000240
 8000e44:	50001000 	.word	0x50001000

08000e48 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0be      	sub	sp, #248	; 0xf8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e64:	22bc      	movs	r2, #188	; 0xbc
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f00c f955 	bl	800d118 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4ad9      	ldr	r2, [pc, #868]	; (80011d8 <HAL_LTDC_MspInit+0x390>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	f040 81ab 	bne.w	80011d0 <HAL_LTDC_MspInit+0x388>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e7a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3N = 20;
 8000e84:	2314      	movs	r3, #20
 8000e86:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 8000e90:	2304      	movs	r3, #4
 8000e92:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000e94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e98:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9e:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f007 fb2f 	bl	800850c <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_LTDC_MspInit+0x70>
    {
      Error_Handler();
 8000eb4:	f000 fc84 	bl	80017c0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000eb8:	4bc8      	ldr	r3, [pc, #800]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000eba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000ebe:	4ac7      	ldr	r2, [pc, #796]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000ec8:	4bc4      	ldr	r3, [pc, #784]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000eca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed6:	4bc1      	ldr	r3, [pc, #772]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	4abf      	ldr	r2, [pc, #764]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee6:	4bbd      	ldr	r3, [pc, #756]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	623b      	str	r3, [r7, #32]
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef4:	4bb9      	ldr	r3, [pc, #740]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	4ab8      	ldr	r2, [pc, #736]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000efc:	f043 0320 	orr.w	r3, r3, #32
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f04:	4bb5      	ldr	r3, [pc, #724]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	f003 0320 	and.w	r3, r3, #32
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	4bb2      	ldr	r3, [pc, #712]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f18:	4ab0      	ldr	r2, [pc, #704]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f22:	4bae      	ldr	r3, [pc, #696]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4baa      	ldr	r3, [pc, #680]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f36:	4aa9      	ldr	r2, [pc, #676]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f40:	4ba6      	ldr	r3, [pc, #664]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4ba3      	ldr	r3, [pc, #652]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f54:	4aa1      	ldr	r2, [pc, #644]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5e:	4b9f      	ldr	r3, [pc, #636]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f6c:	4b9b      	ldr	r3, [pc, #620]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f72:	4a9a      	ldr	r2, [pc, #616]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7c:	4b97      	ldr	r3, [pc, #604]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	4b94      	ldr	r3, [pc, #592]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f90:	4a92      	ldr	r2, [pc, #584]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9a:	4b90      	ldr	r3, [pc, #576]	; (80011dc <HAL_LTDC_MspInit+0x394>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fa8:	2370      	movs	r3, #112	; 0x70
 8000faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fc0:	230e      	movs	r3, #14
 8000fc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4884      	ldr	r0, [pc, #528]	; (80011e0 <HAL_LTDC_MspInit+0x398>)
 8000fce:	f005 fc5f 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fec:	230e      	movs	r3, #14
 8000fee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ff2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	487a      	ldr	r0, [pc, #488]	; (80011e4 <HAL_LTDC_MspInit+0x39c>)
 8000ffa:	f005 fc49 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000ffe:	f240 43c1 	movw	r3, #1217	; 0x4c1
 8001002:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001018:	230e      	movs	r3, #14
 800101a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001022:	4619      	mov	r1, r3
 8001024:	4870      	ldr	r0, [pc, #448]	; (80011e8 <HAL_LTDC_MspInit+0x3a0>)
 8001026:	f005 fc33 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800102a:	f240 437c 	movw	r3, #1148	; 0x47c
 800102e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001044:	230e      	movs	r3, #14
 8001046:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800104e:	4619      	mov	r1, r3
 8001050:	4866      	ldr	r0, [pc, #408]	; (80011ec <HAL_LTDC_MspInit+0x3a4>)
 8001052:	f005 fc1d 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001056:	2303      	movs	r3, #3
 8001058:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800106e:	2309      	movs	r3, #9
 8001070:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001078:	4619      	mov	r1, r3
 800107a:	485d      	ldr	r0, [pc, #372]	; (80011f0 <HAL_LTDC_MspInit+0x3a8>)
 800107c:	f005 fc08 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001080:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001084:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800109a:	230e      	movs	r3, #14
 800109c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010a4:	4619      	mov	r1, r3
 80010a6:	4852      	ldr	r0, [pc, #328]	; (80011f0 <HAL_LTDC_MspInit+0x3a8>)
 80010a8:	f005 fbf2 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_13;
 80010ac:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80010b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010c6:	230e      	movs	r3, #14
 80010c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4848      	ldr	r0, [pc, #288]	; (80011f4 <HAL_LTDC_MspInit+0x3ac>)
 80010d4:	f005 fbdc 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f0:	230e      	movs	r3, #14
 80010f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010fa:	4619      	mov	r1, r3
 80010fc:	483d      	ldr	r0, [pc, #244]	; (80011f4 <HAL_LTDC_MspInit+0x3ac>)
 80010fe:	f005 fbc7 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
 800111c:	230a      	movs	r3, #10
 800111e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001126:	4619      	mov	r1, r3
 8001128:	482f      	ldr	r0, [pc, #188]	; (80011e8 <HAL_LTDC_MspInit+0x3a0>)
 800112a:	f005 fbb1 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800112e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001148:	230d      	movs	r3, #13
 800114a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001152:	4619      	mov	r1, r3
 8001154:	4825      	ldr	r0, [pc, #148]	; (80011ec <HAL_LTDC_MspInit+0x3a4>)
 8001156:	f005 fb9b 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800115a:	2348      	movs	r3, #72	; 0x48
 800115c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001172:	230e      	movs	r3, #14
 8001174:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001178:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800117c:	4619      	mov	r1, r3
 800117e:	481e      	ldr	r0, [pc, #120]	; (80011f8 <HAL_LTDC_MspInit+0x3b0>)
 8001180:	f005 fb86 	bl	8006890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001188:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800119e:	2309      	movs	r3, #9
 80011a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011a8:	4619      	mov	r1, r3
 80011aa:	4812      	ldr	r0, [pc, #72]	; (80011f4 <HAL_LTDC_MspInit+0x3ac>)
 80011ac:	f005 fb70 	bl	8006890 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2058      	movs	r0, #88	; 0x58
 80011b6:	f001 ffa4 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011ba:	2058      	movs	r0, #88	; 0x58
 80011bc:	f001 ffbb 	bl	8003136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2059      	movs	r0, #89	; 0x59
 80011c6:	f001 ff9c 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80011ca:	2059      	movs	r0, #89	; 0x59
 80011cc:	f001 ffb3 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80011d0:	bf00      	nop
 80011d2:	37f8      	adds	r7, #248	; 0xf8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	50001000 	.word	0x50001000
 80011dc:	58024400 	.word	0x58024400
 80011e0:	58021000 	.word	0x58021000
 80011e4:	58021400 	.word	0x58021400
 80011e8:	58020800 	.word	0x58020800
 80011ec:	58020000 	.word	0x58020000
 80011f0:	58020400 	.word	0x58020400
 80011f4:	58021800 	.word	0x58021800
 80011f8:	58020c00 	.word	0x58020c00

080011fc <Set_LED>:

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];  // for brightness

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
  LED_Data[LEDnum][0] = LEDnum;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	b2d9      	uxtb	r1, r3
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <Set_LED+0x58>)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
  LED_Data[LEDnum][1] = Green;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	b2d9      	uxtb	r1, r3
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <Set_LED+0x58>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	460a      	mov	r2, r1
 8001224:	705a      	strb	r2, [r3, #1]
  LED_Data[LEDnum][2] = Red;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	b2d9      	uxtb	r1, r3
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <Set_LED+0x58>)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	460a      	mov	r2, r1
 8001234:	709a      	strb	r2, [r3, #2]
  LED_Data[LEDnum][3] = Blue;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2d9      	uxtb	r1, r3
 800123a:	4a06      	ldr	r2, [pc, #24]	; (8001254 <Set_LED+0x58>)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	460a      	mov	r2, r1
 8001244:	70da      	strb	r2, [r3, #3]
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	240002ec 	.word	0x240002ec

08001258 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8001258:	b580      	push	{r7, lr}
 800125a:	ed2d 8b02 	vpush	{d8}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

  if (brightness > 45) brightness = 45;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b2d      	cmp	r3, #45	; 0x2d
 8001268:	dd01      	ble.n	800126e <Set_Brightness+0x16>
 800126a:	232d      	movs	r3, #45	; 0x2d
 800126c:	607b      	str	r3, [r7, #4]
  for (int i=0; i<MAX_LED; i++)
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e051      	b.n	8001318 <Set_Brightness+0xc0>
  {
    LED_Mod[i][0] = LED_Data[i][0];
 8001274:	4a32      	ldr	r2, [pc, #200]	; (8001340 <Set_Brightness+0xe8>)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 800127c:	4a31      	ldr	r2, [pc, #196]	; (8001344 <Set_Brightness+0xec>)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    for (int j=1; j<4; j++)
 8001284:	2301      	movs	r3, #1
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	e040      	b.n	800130c <Set_Brightness+0xb4>
    {
      float angle = 90-brightness;  // in degrees
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001298:	edc7 7a03 	vstr	s15, [r7, #12]
      angle = angle*PI / 180;  // in rad
 800129c:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012a4:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001330 <Set_Brightness+0xd8>
 80012a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012ac:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8001338 <Set_Brightness+0xe0>
 80012b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012b8:	edc7 7a03 	vstr	s15, [r7, #12]
      LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 80012bc:	4a20      	ldr	r2, [pc, #128]	; (8001340 <Set_Brightness+0xe8>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	441a      	add	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80012d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012da:	eeb0 0b47 	vmov.f64	d0, d7
 80012de:	f00b f8b7 	bl	800c450 <tan>
 80012e2:	eeb0 6b40 	vmov.f64	d6, d0
 80012e6:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80012ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012ee:	edc7 7a00 	vstr	s15, [r7]
 80012f2:	783b      	ldrb	r3, [r7, #0]
 80012f4:	b2d9      	uxtb	r1, r3
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <Set_Brightness+0xec>)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	441a      	add	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4413      	add	r3, r2
 8001302:	460a      	mov	r2, r1
 8001304:	701a      	strb	r2, [r3, #0]
    for (int j=1; j<4; j++)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	3301      	adds	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	2b03      	cmp	r3, #3
 8001310:	ddbb      	ble.n	800128a <Set_Brightness+0x32>
  for (int i=0; i<MAX_LED; i++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2b09      	cmp	r3, #9
 800131c:	ddaa      	ble.n	8001274 <Set_Brightness+0x1c>
    }
  }

#endif

}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	ecbd 8b02 	vpop	{d8}
 800132a:	bd80      	pop	{r7, pc}
 800132c:	f3af 8000 	nop.w
 8001330:	53c8d4f1 	.word	0x53c8d4f1
 8001334:	400921fb 	.word	0x400921fb
 8001338:	00000000 	.word	0x00000000
 800133c:	40668000 	.word	0x40668000
 8001340:	240002ec 	.word	0x240002ec
 8001344:	24000314 	.word	0x24000314

08001348 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
  uint32_t indx=0;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t color;


  for (int i= 0; i<MAX_LED; i++)
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	e036      	b.n	80013c6 <WS2812_Send+0x7e>
  {
#if USE_BRIGHTNESS
    color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8001358:	4a2e      	ldr	r2, [pc, #184]	; (8001414 <WS2812_Send+0xcc>)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	785b      	ldrb	r3, [r3, #1]
 8001362:	041a      	lsls	r2, r3, #16
 8001364:	492b      	ldr	r1, [pc, #172]	; (8001414 <WS2812_Send+0xcc>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	789b      	ldrb	r3, [r3, #2]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	431a      	orrs	r2, r3
 8001372:	4928      	ldr	r1, [pc, #160]	; (8001414 <WS2812_Send+0xcc>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	78db      	ldrb	r3, [r3, #3]
 800137c:	4313      	orrs	r3, r2
 800137e:	607b      	str	r3, [r7, #4]
#else
    color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

    for (int i=23; i>=0; i--)
 8001380:	2317      	movs	r3, #23
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e019      	b.n	80013ba <WS2812_Send+0x72>
    {
      if (color&(1<<i))
 8001386:	2201      	movs	r2, #1
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	461a      	mov	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <WS2812_Send+0x5c>
      {
        pwmData[indx] = 100;  // 2/3 of 90
 8001398:	4a1f      	ldr	r2, [pc, #124]	; (8001418 <WS2812_Send+0xd0>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2164      	movs	r1, #100	; 0x64
 800139e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80013a2:	e004      	b.n	80013ae <WS2812_Send+0x66>
      }

      else pwmData[indx] = 50;  // 1/3 of 90
 80013a4:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <WS2812_Send+0xd0>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2132      	movs	r1, #50	; 0x32
 80013aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      indx++;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
    for (int i=23; i>=0; i--)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dae2      	bge.n	8001386 <WS2812_Send+0x3e>
  for (int i= 0; i<MAX_LED; i++)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	3301      	adds	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	2b09      	cmp	r3, #9
 80013ca:	ddc5      	ble.n	8001358 <WS2812_Send+0x10>
    }

  }

  for (int i=0; i<50; i++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	e00a      	b.n	80013e8 <WS2812_Send+0xa0>
  {
    pwmData[indx] = 0;
 80013d2:	4a11      	ldr	r2, [pc, #68]	; (8001418 <WS2812_Send+0xd0>)
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2100      	movs	r1, #0
 80013d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    indx++;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
  for (int i=0; i<50; i++)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b31      	cmp	r3, #49	; 0x31
 80013ec:	ddf1      	ble.n	80013d2 <WS2812_Send+0x8a>
  }

  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <WS2812_Send+0xd0>)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4809      	ldr	r0, [pc, #36]	; (800141c <WS2812_Send+0xd4>)
 80013f8:	f009 fb2c 	bl	800aa54 <HAL_TIM_PWM_Start_DMA>
  while (!datasentflag){};
 80013fc:	bf00      	nop
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <WS2812_Send+0xd8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0fb      	beq.n	80013fe <WS2812_Send+0xb6>
  datasentflag = 0;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <WS2812_Send+0xd8>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	24000314 	.word	0x24000314
 8001418:	2400033c 	.word	0x2400033c
 800141c:	24000580 	.word	0x24000580
 8001420:	240002e8 	.word	0x240002e8

08001424 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 800142c:	2100      	movs	r1, #0
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001430:	f009 fd36 	bl	800aea0 <HAL_TIM_PWM_Stop_DMA>
  datasentflag=1;
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	24000580 	.word	0x24000580
 8001448:	240002e8 	.word	0x240002e8

0800144c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001452:	4b6f      	ldr	r3, [pc, #444]	; (8001610 <main+0x1c4>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d11b      	bne.n	8001496 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800145e:	f3bf 8f4f 	dsb	sy
}
 8001462:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001464:	f3bf 8f6f 	isb	sy
}
 8001468:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800146a:	4b69      	ldr	r3, [pc, #420]	; (8001610 <main+0x1c4>)
 800146c:	2200      	movs	r2, #0
 800146e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001472:	f3bf 8f4f 	dsb	sy
}
 8001476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001478:	f3bf 8f6f 	isb	sy
}
 800147c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800147e:	4b64      	ldr	r3, [pc, #400]	; (8001610 <main+0x1c4>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	4a63      	ldr	r2, [pc, #396]	; (8001610 <main+0x1c4>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800148a:	f3bf 8f4f 	dsb	sy
}
 800148e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001490:	f3bf 8f6f 	isb	sy
}
 8001494:	e000      	b.n	8001498 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001496:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001498:	4b5d      	ldr	r3, [pc, #372]	; (8001610 <main+0x1c4>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d138      	bne.n	8001516 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80014a4:	4b5a      	ldr	r3, [pc, #360]	; (8001610 <main+0x1c4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80014ac:	f3bf 8f4f 	dsb	sy
}
 80014b0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80014b2:	4b57      	ldr	r3, [pc, #348]	; (8001610 <main+0x1c4>)
 80014b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014b8:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	0b5b      	lsrs	r3, r3, #13
 80014be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014c2:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	08db      	lsrs	r3, r3, #3
 80014c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014cc:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	015a      	lsls	r2, r3, #5
 80014d2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80014d6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014dc:	494c      	ldr	r1, [pc, #304]	; (8001610 <main+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	603a      	str	r2, [r7, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ef      	bne.n	80014ce <main+0x82>
    } while(sets-- != 0U);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	1e5a      	subs	r2, r3, #1
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e5      	bne.n	80014c4 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80014f8:	f3bf 8f4f 	dsb	sy
}
 80014fc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <main+0x1c4>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a43      	ldr	r2, [pc, #268]	; (8001610 <main+0x1c4>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800150a:	f3bf 8f4f 	dsb	sy
}
 800150e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001510:	f3bf 8f6f 	isb	sy
}
 8001514:	e000      	b.n	8001518 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001516:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001518:	f000 fbca 	bl	8001cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151c:	f000 f87a 	bl	8001614 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001520:	f000 f932 	bl	8001788 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001524:	f7ff fa86 	bl	8000a34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001528:	f7fe fff4 	bl	8000514 <MX_DMA_Init>
  MX_LTDC_Init();
 800152c:	f7ff fc0a 	bl	8000d44 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001530:	f7ff f810 	bl	8000554 <MX_DMA2D_Init>
  MX_ADC1_Init();
 8001534:	f7fe fed0 	bl	80002d8 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8001538:	f7ff f868 	bl	800060c <MX_FDCAN1_Init>
  MX_I2C4_Init();
 800153c:	f7ff fb56 	bl	8000bec <MX_I2C4_Init>
  MX_CRC_Init();
 8001540:	f7fe ffa4 	bl	800048c <MX_CRC_Init>
  MX_FMC_Init();
 8001544:	f7ff f934 	bl	80007b0 <MX_FMC_Init>
  MX_TIM3_Init();
 8001548:	f000 fa52 	bl	80019f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Set_LED(0, 255, 255, 0);
 800154c:	2300      	movs	r3, #0
 800154e:	22ff      	movs	r2, #255	; 0xff
 8001550:	21ff      	movs	r1, #255	; 0xff
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fe52 	bl	80011fc <Set_LED>
  Set_LED(1, 0, 255, 0);
 8001558:	2300      	movs	r3, #0
 800155a:	22ff      	movs	r2, #255	; 0xff
 800155c:	2100      	movs	r1, #0
 800155e:	2001      	movs	r0, #1
 8001560:	f7ff fe4c 	bl	80011fc <Set_LED>
  Set_LED(2, 0, 0, 255);
 8001564:	23ff      	movs	r3, #255	; 0xff
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2002      	movs	r0, #2
 800156c:	f7ff fe46 	bl	80011fc <Set_LED>
  Set_LED(3, 46, 89, 128);
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	2259      	movs	r2, #89	; 0x59
 8001574:	212e      	movs	r1, #46	; 0x2e
 8001576:	2003      	movs	r0, #3
 8001578:	f7ff fe40 	bl	80011fc <Set_LED>
  Set_LED(4, 156, 233, 100);
 800157c:	2364      	movs	r3, #100	; 0x64
 800157e:	22e9      	movs	r2, #233	; 0xe9
 8001580:	219c      	movs	r1, #156	; 0x9c
 8001582:	2004      	movs	r0, #4
 8001584:	f7ff fe3a 	bl	80011fc <Set_LED>
  Set_LED(5, 102, 0, 235);
 8001588:	23eb      	movs	r3, #235	; 0xeb
 800158a:	2200      	movs	r2, #0
 800158c:	2166      	movs	r1, #102	; 0x66
 800158e:	2005      	movs	r0, #5
 8001590:	f7ff fe34 	bl	80011fc <Set_LED>
  Set_LED(6, 47, 38, 77);
 8001594:	234d      	movs	r3, #77	; 0x4d
 8001596:	2226      	movs	r2, #38	; 0x26
 8001598:	212f      	movs	r1, #47	; 0x2f
 800159a:	2006      	movs	r0, #6
 800159c:	f7ff fe2e 	bl	80011fc <Set_LED>
  Set_LED(7, 255, 200, 0);
 80015a0:	2300      	movs	r3, #0
 80015a2:	22c8      	movs	r2, #200	; 0xc8
 80015a4:	21ff      	movs	r1, #255	; 0xff
 80015a6:	2007      	movs	r0, #7
 80015a8:	f7ff fe28 	bl	80011fc <Set_LED>

  for (int i=8; i<=10; i++)
 80015ac:	2308      	movs	r3, #8
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e008      	b.n	80015c4 <main+0x178>
    Set_LED(i, 0, 255, 0);
 80015b2:	2300      	movs	r3, #0
 80015b4:	22ff      	movs	r2, #255	; 0xff
 80015b6:	2100      	movs	r1, #0
 80015b8:	6978      	ldr	r0, [r7, #20]
 80015ba:	f7ff fe1f 	bl	80011fc <Set_LED>
  for (int i=8; i<=10; i++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	2b0a      	cmp	r3, #10
 80015c8:	ddf3      	ble.n	80015b2 <main+0x166>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    for (int i=0; i<46; i++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	e00a      	b.n	80015e6 <main+0x19a>
    {
      Set_Brightness(i);
 80015d0:	6938      	ldr	r0, [r7, #16]
 80015d2:	f7ff fe41 	bl	8001258 <Set_Brightness>
      WS2812_Send();
 80015d6:	f7ff feb7 	bl	8001348 <WS2812_Send>
      HAL_Delay (50);
 80015da:	2032      	movs	r0, #50	; 0x32
 80015dc:	f000 fbfa 	bl	8001dd4 <HAL_Delay>
    for (int i=0; i<46; i++)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	3301      	adds	r3, #1
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	2b2d      	cmp	r3, #45	; 0x2d
 80015ea:	ddf1      	ble.n	80015d0 <main+0x184>
    }

    for (int i=45; i>=0; i--)
 80015ec:	232d      	movs	r3, #45	; 0x2d
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e00a      	b.n	8001608 <main+0x1bc>
    {
      Set_Brightness(i);
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff fe30 	bl	8001258 <Set_Brightness>
      WS2812_Send();
 80015f8:	f7ff fea6 	bl	8001348 <WS2812_Send>
      HAL_Delay (50);
 80015fc:	2032      	movs	r0, #50	; 0x32
 80015fe:	f000 fbe9 	bl	8001dd4 <HAL_Delay>
    for (int i=45; i>=0; i--)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3b01      	subs	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	daf1      	bge.n	80015f2 <main+0x1a6>
    for (int i=0; i<46; i++)
 800160e:	e7dc      	b.n	80015ca <main+0x17e>
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b09e      	sub	sp, #120	; 0x78
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161e:	224c      	movs	r2, #76	; 0x4c
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f00b fd78 	bl	800d118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	2220      	movs	r2, #32
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f00b fd71 	bl	800d118 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001636:	2002      	movs	r0, #2
 8001638:	f005 ffa0 	bl	800757c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	4b4e      	ldr	r3, [pc, #312]	; (800177c <SystemClock_Config+0x168>)
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	4a4d      	ldr	r2, [pc, #308]	; (800177c <SystemClock_Config+0x168>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800164c:	4b4b      	ldr	r3, [pc, #300]	; (800177c <SystemClock_Config+0x168>)
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <SystemClock_Config+0x16c>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	4a49      	ldr	r2, [pc, #292]	; (8001780 <SystemClock_Config+0x16c>)
 800165c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001660:	6193      	str	r3, [r2, #24]
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <SystemClock_Config+0x16c>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800166e:	bf00      	nop
 8001670:	4b43      	ldr	r3, [pc, #268]	; (8001780 <SystemClock_Config+0x16c>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800167c:	d1f8      	bne.n	8001670 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <SystemClock_Config+0x170>)
 8001680:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001684:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <SystemClock_Config+0x170>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800168e:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <SystemClock_Config+0x170>)
 8001690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800169c:	2300      	movs	r3, #0
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <SystemClock_Config+0x16c>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a36      	ldr	r2, [pc, #216]	; (8001780 <SystemClock_Config+0x16c>)
 80016a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <SystemClock_Config+0x16c>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	4b31      	ldr	r3, [pc, #196]	; (800177c <SystemClock_Config+0x168>)
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	4a30      	ldr	r2, [pc, #192]	; (800177c <SystemClock_Config+0x168>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80016c2:	4b2e      	ldr	r3, [pc, #184]	; (800177c <SystemClock_Config+0x168>)
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016ce:	bf00      	nop
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <SystemClock_Config+0x16c>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016dc:	d1f8      	bne.n	80016d0 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <SystemClock_Config+0x170>)
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	f023 0303 	bic.w	r3, r3, #3
 80016e6:	4a27      	ldr	r2, [pc, #156]	; (8001784 <SystemClock_Config+0x170>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 80016ee:	2311      	movs	r3, #17
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80016fc:	2320      	movs	r3, #32
 80016fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001700:	2302      	movs	r3, #2
 8001702:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001704:	2302      	movs	r3, #2
 8001706:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001708:	2301      	movs	r3, #1
 800170a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 800170c:	2378      	movs	r3, #120	; 0x78
 800170e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001710:	2302      	movs	r3, #2
 8001712:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001714:	2304      	movs	r3, #4
 8001716:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001718:	2302      	movs	r3, #2
 800171a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800171c:	230c      	movs	r3, #12
 800171e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001720:	2300      	movs	r3, #0
 8001722:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172c:	4618      	mov	r0, r3
 800172e:	f005 ff5f 	bl	80075f0 <HAL_RCC_OscConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0x128>
  {
    Error_Handler();
 8001738:	f000 f842 	bl	80017c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173c:	233f      	movs	r3, #63	; 0x3f
 800173e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001740:	2303      	movs	r3, #3
 8001742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001748:	2308      	movs	r3, #8
 800174a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800174c:	2340      	movs	r3, #64	; 0x40
 800174e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8001750:	2350      	movs	r3, #80	; 0x50
 8001752:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800175a:	2340      	movs	r3, #64	; 0x40
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	2104      	movs	r1, #4
 8001764:	4618      	mov	r0, r3
 8001766:	f006 fb71 	bl	8007e4c <HAL_RCC_ClockConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0x160>
  {
    Error_Handler();
 8001770:	f000 f826 	bl	80017c0 <Error_Handler>
  }
}
 8001774:	bf00      	nop
 8001776:	3778      	adds	r7, #120	; 0x78
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	58000400 	.word	0x58000400
 8001780:	58024800 	.word	0x58024800
 8001784:	58024400 	.word	0x58024400

08001788 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0b0      	sub	sp, #192	; 0xc0
 800178c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	22bc      	movs	r2, #188	; 0xbc
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f00b fcbf 	bl	800d118 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800179a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800179e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSE;
 80017a0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	4618      	mov	r0, r3
 80017aa:	f006 feaf 	bl	800850c <HAL_RCCEx_PeriphCLKConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 80017b4:	f000 f804 	bl	80017c0 <Error_Handler>
  }
}
 80017b8:	bf00      	nop
 80017ba:	37c0      	adds	r7, #192	; 0xc0
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <Error_Handler+0x8>
	...

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_MspInit+0x30>)
 80017d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017d8:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_MspInit+0x30>)
 80017da:	f043 0302 	orr.w	r3, r3, #2
 80017de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_MspInit+0x30>)
 80017e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	58024400 	.word	0x58024400

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <NMI_Handler+0x4>

08001806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <HardFault_Handler+0x4>

0800180c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <MemManage_Handler+0x4>

08001812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <UsageFault_Handler+0x4>

0800181e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184c:	f000 faa2 	bl	8001d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}

08001854 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <DMA1_Stream1_IRQHandler+0x10>)
 800185a:	f002 fd7d 	bl	8004358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	240005cc 	.word	0x240005cc

08001868 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <FDCAN1_IT0_IRQHandler+0x10>)
 800186e:	f004 fb75 	bl	8005f5c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2400011c 	.word	0x2400011c

0800187c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <TIM3_IRQHandler+0x10>)
 8001882:	f009 fc05 	bl	800b090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	24000580 	.word	0x24000580

08001890 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <FMC_IRQHandler+0x10>)
 8001896:	f009 f801 	bl	800a89c <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	240001bc 	.word	0x240001bc

080018a4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <LTDC_IRQHandler+0x10>)
 80018aa:	f005 fbcd 	bl	8007048 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	24000240 	.word	0x24000240

080018b8 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <LTDC_ER_IRQHandler+0x10>)
 80018be:	f005 fbc3 	bl	8007048 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	24000240 	.word	0x24000240

080018cc <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <I2C4_EV_IRQHandler+0x10>)
 80018d2:	f005 fa37 	bl	8006d44 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	240001f4 	.word	0x240001f4

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018e4:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <SystemInit+0xe4>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a36      	ldr	r2, [pc, #216]	; (80019c4 <SystemInit+0xe4>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018f4:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <SystemInit+0xe8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 030f 	and.w	r3, r3, #15
 80018fc:	2b06      	cmp	r3, #6
 80018fe:	d807      	bhi.n	8001910 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <SystemInit+0xe8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 030f 	bic.w	r3, r3, #15
 8001908:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <SystemInit+0xe8>)
 800190a:	f043 0307 	orr.w	r3, r3, #7
 800190e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001910:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <SystemInit+0xec>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a2d      	ldr	r2, [pc, #180]	; (80019cc <SystemInit+0xec>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <SystemInit+0xec>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001922:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <SystemInit+0xec>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4929      	ldr	r1, [pc, #164]	; (80019cc <SystemInit+0xec>)
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <SystemInit+0xf0>)
 800192a:	4013      	ands	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <SystemInit+0xe8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <SystemInit+0xe8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 030f 	bic.w	r3, r3, #15
 8001942:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <SystemInit+0xe8>)
 8001944:	f043 0307 	orr.w	r3, r3, #7
 8001948:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <SystemInit+0xec>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <SystemInit+0xec>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <SystemInit+0xec>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <SystemInit+0xec>)
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <SystemInit+0xf4>)
 8001960:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <SystemInit+0xec>)
 8001964:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <SystemInit+0xf8>)
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <SystemInit+0xec>)
 800196a:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <SystemInit+0xfc>)
 800196c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <SystemInit+0xec>)
 8001970:	2200      	movs	r2, #0
 8001972:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <SystemInit+0xec>)
 8001976:	4a19      	ldr	r2, [pc, #100]	; (80019dc <SystemInit+0xfc>)
 8001978:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <SystemInit+0xec>)
 800197c:	2200      	movs	r2, #0
 800197e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <SystemInit+0xec>)
 8001982:	4a16      	ldr	r2, [pc, #88]	; (80019dc <SystemInit+0xfc>)
 8001984:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <SystemInit+0xec>)
 8001988:	2200      	movs	r2, #0
 800198a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <SystemInit+0xec>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <SystemInit+0xec>)
 8001992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001996:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <SystemInit+0xec>)
 800199a:	2200      	movs	r2, #0
 800199c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <SystemInit+0x100>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <SystemInit+0x104>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019aa:	d202      	bcs.n	80019b2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <SystemInit+0x108>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <SystemInit+0x10c>)
 80019b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00
 80019c8:	52002000 	.word	0x52002000
 80019cc:	58024400 	.word	0x58024400
 80019d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80019d4:	02020200 	.word	0x02020200
 80019d8:	01ff0000 	.word	0x01ff0000
 80019dc:	01010280 	.word	0x01010280
 80019e0:	5c001000 	.word	0x5c001000
 80019e4:	ffff0000 	.word	0xffff0000
 80019e8:	51008108 	.word	0x51008108
 80019ec:	52004000 	.word	0x52004000

080019f0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08e      	sub	sp, #56	; 0x38
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a10:	463b      	mov	r3, r7
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	615a      	str	r2, [r3, #20]
 8001a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a22:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a24:	4a2c      	ldr	r2, [pc, #176]	; (8001ad8 <MX_TIM3_Init+0xe8>)
 8001a26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a28:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150-1;
 8001a34:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a36:	2295      	movs	r2, #149	; 0x95
 8001a38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a46:	4823      	ldr	r0, [pc, #140]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a48:	f008 ff4c 	bl	800a8e4 <HAL_TIM_Base_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a52:	f7ff feb5 	bl	80017c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a60:	4619      	mov	r1, r3
 8001a62:	481c      	ldr	r0, [pc, #112]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a64:	f009 fd48 	bl	800b4f8 <HAL_TIM_ConfigClockSource>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a6e:	f7ff fea7 	bl	80017c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a72:	4818      	ldr	r0, [pc, #96]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a74:	f008 ff8d 	bl	800a992 <HAL_TIM_PWM_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a7e:	f7ff fe9f 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4810      	ldr	r0, [pc, #64]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001a92:	f00a fb6b 	bl	800c16c <HAL_TIMEx_MasterConfigSynchronization>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a9c:	f7ff fe90 	bl	80017c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa0:	2360      	movs	r3, #96	; 0x60
 8001aa2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001ab8:	f009 fc0a 	bl	800b2d0 <HAL_TIM_PWM_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ac2:	f7ff fe7d 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ac6:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <MX_TIM3_Init+0xe4>)
 8001ac8:	f000 f88e 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 8001acc:	bf00      	nop
 8001ace:	3738      	adds	r7, #56	; 0x38
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	24000580 	.word	0x24000580
 8001ad8:	40000400 	.word	0x40000400

08001adc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a36      	ldr	r2, [pc, #216]	; (8001bd4 <HAL_TIM_Base_MspInit+0xf8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d165      	bne.n	8001bca <HAL_TIM_Base_MspInit+0xee>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_TIM_Base_MspInit+0xfc>)
 8001b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b04:	4a34      	ldr	r2, [pc, #208]	; (8001bd8 <HAL_TIM_Base_MspInit+0xfc>)
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <HAL_TIM_Base_MspInit+0xfc>)
 8001b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_TIM_Base_MspInit+0xfc>)
 8001b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b22:	4a2d      	ldr	r2, [pc, #180]	; (8001bd8 <HAL_TIM_Base_MspInit+0xfc>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_TIM_Base_MspInit+0xfc>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BL_DIM_Pin;
 8001b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BL_DIM_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4821      	ldr	r0, [pc, #132]	; (8001bdc <HAL_TIM_Base_MspInit+0x100>)
 8001b58:	f004 fe9a 	bl	8006890 <HAL_GPIO_Init>

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Stream1;
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001b5e:	4a21      	ldr	r2, [pc, #132]	; (8001be4 <HAL_TIM_Base_MspInit+0x108>)
 8001b60:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001b64:	2217      	movs	r2, #23
 8001b66:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001b6a:	2240      	movs	r2, #64	; 0x40
 8001b6c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b7a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b82:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b8a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001b9e:	4810      	ldr	r0, [pc, #64]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001ba0:	f001 fbce 	bl	8003340 <HAL_DMA_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 8001baa:	f7ff fe09 	bl	80017c0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_TIM_Base_MspInit+0x104>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	201d      	movs	r0, #29
 8001bc0:	f001 fa9f 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bc4:	201d      	movs	r0, #29
 8001bc6:	f001 fab6 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40000400 	.word	0x40000400
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	58020800 	.word	0x58020800
 8001be0:	240005cc 	.word	0x240005cc
 8001be4:	40020028 	.word	0x40020028

08001be8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <HAL_TIM_MspPostInit+0x68>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d11e      	bne.n	8001c48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_TIM_MspPostInit+0x6c>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c10:	4a10      	ldr	r2, [pc, #64]	; (8001c54 <HAL_TIM_MspPostInit+0x6c>)
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_TIM_MspPostInit+0x6c>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c28:	2310      	movs	r3, #16
 8001c2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	4619      	mov	r1, r3
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <HAL_TIM_MspPostInit+0x70>)
 8001c44:	f004 fe24 	bl	8006890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c48:	bf00      	nop
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40000400 	.word	0x40000400
 8001c54:	58024400 	.word	0x58024400
 8001c58:	58020400 	.word	0x58020400

08001c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c60:	f7ff fe3e 	bl	80018e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c64:	480c      	ldr	r0, [pc, #48]	; (8001c98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c66:	490d      	ldr	r1, [pc, #52]	; (8001c9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c6c:	e002      	b.n	8001c74 <LoopCopyDataInit>

08001c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c72:	3304      	adds	r3, #4

08001c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c78:	d3f9      	bcc.n	8001c6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ca8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c80:	e001      	b.n	8001c86 <LoopFillZerobss>

08001c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c84:	3204      	adds	r2, #4

08001c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c88:	d3fb      	bcc.n	8001c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f00b fa13 	bl	800d0b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8e:	f7ff fbdd 	bl	800144c <main>
  bx  lr
 8001c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c9c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001ca0:	0800d388 	.word	0x0800d388
  ldr r2, =_sbss
 8001ca4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001ca8:	24000648 	.word	0x24000648

08001cac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC3_IRQHandler>
	...

08001cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb6:	2003      	movs	r0, #3
 8001cb8:	f001 fa18 	bl	80030ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cbc:	f006 fa7c 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_Init+0x68>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	4913      	ldr	r1, [pc, #76]	; (8001d1c <HAL_Init+0x6c>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_Init+0x68>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_Init+0x6c>)
 8001ce4:	5cd3      	ldrb	r3, [r2, r3]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf0:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <HAL_Init+0x70>)
 8001cf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_Init+0x74>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f000 f814 	bl	8001d28 <HAL_InitTick>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e002      	b.n	8001d10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d0a:	f7ff fd5f 	bl	80017cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	58024400 	.word	0x58024400
 8001d1c:	0800d18c 	.word	0x0800d18c
 8001d20:	24000004 	.word	0x24000004
 8001d24:	24000000 	.word	0x24000000

08001d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_InitTick+0x60>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e021      	b.n	8001d80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_InitTick+0x64>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_InitTick+0x60>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 f9fd 	bl	8003152 <HAL_SYSTICK_Config>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00e      	b.n	8001d80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d80a      	bhi.n	8001d7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f001 f9c7 	bl	8003102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <HAL_InitTick+0x68>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2400000c 	.word	0x2400000c
 8001d8c:	24000000 	.word	0x24000000
 8001d90:	24000008 	.word	0x24000008

08001d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x20>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_IncTick+0x24>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_IncTick+0x24>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	2400000c 	.word	0x2400000c
 8001db8:	24000644 	.word	0x24000644

08001dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_GetTick+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	24000644 	.word	0x24000644

08001dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff ffee 	bl	8001dbc <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d005      	beq.n	8001dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_Delay+0x44>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfa:	bf00      	nop
 8001dfc:	f7ff ffde 	bl	8001dbc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d8f7      	bhi.n	8001dfc <HAL_Delay+0x28>
  {
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2400000c 	.word	0x2400000c

08001e1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_GetREVID+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0c1b      	lsrs	r3, r3, #16
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	5c001000 	.word	0x5c001000

08001e34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3360      	adds	r3, #96	; 0x60
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	371c      	adds	r7, #28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	431a      	orrs	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	611a      	str	r2, [r3, #16]
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b087      	sub	sp, #28
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3360      	adds	r3, #96	; 0x60
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	601a      	str	r2, [r3, #0]
  }
}
 8001f38:	bf00      	nop
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3330      	adds	r3, #48	; 0x30
 8001f54:	461a      	mov	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	4413      	add	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	211f      	movs	r1, #31
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	0e9b      	lsrs	r3, r3, #26
 8001f7c:	f003 011f 	and.w	r1, r3, #31
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f90:	bf00      	nop
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3314      	adds	r3, #20
 8001fac:	461a      	mov	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	0e5b      	lsrs	r3, r3, #25
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	4413      	add	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	0d1b      	lsrs	r3, r3, #20
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	2107      	movs	r1, #7
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	0d1b      	lsrs	r3, r3, #20
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fe6:	bf00      	nop
 8001fe8:	371c      	adds	r7, #28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800200c:	43db      	mvns	r3, r3
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0318 	and.w	r3, r3, #24
 8002016:	4908      	ldr	r1, [pc, #32]	; (8002038 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002018:	40d9      	lsrs	r1, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	400b      	ands	r3, r1
 800201e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002022:	431a      	orrs	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	000fffff 	.word	0x000fffff

0800203c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <LL_ADC_DisableDeepPowerDown+0x20>)
 800204a:	4013      	ands	r3, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6093      	str	r3, [r2, #8]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	5fffffc0 	.word	0x5fffffc0

08002060 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002074:	d101      	bne.n	800207a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <LL_ADC_EnableInternalRegulator+0x24>)
 8002096:	4013      	ands	r3, r2
 8002098:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	6fffffc0 	.word	0x6fffffc0

080020b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020c4:	d101      	bne.n	80020ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <LL_ADC_IsEnabled+0x18>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LL_ADC_IsEnabled+0x1a>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b04      	cmp	r3, #4
 8002110:	d101      	bne.n	8002116 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b08      	cmp	r3, #8
 8002136:	d101      	bne.n	800213c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e18f      	b.n	8002486 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7fe f929 	bl	80003cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff67 	bl	8002060 <LL_ADC_IsDeepPowerDownEnabled>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d004      	beq.n	80021a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff4d 	bl	800203c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff82 	bl	80020b0 <LL_ADC_IsInternalRegulatorEnabled>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d114      	bne.n	80021dc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff66 	bl	8002088 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021bc:	4b87      	ldr	r3, [pc, #540]	; (80023dc <HAL_ADC_Init+0x290>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	099b      	lsrs	r3, r3, #6
 80021c2:	4a87      	ldr	r2, [pc, #540]	; (80023e0 <HAL_ADC_Init+0x294>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	3301      	adds	r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021ce:	e002      	b.n	80021d6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f9      	bne.n	80021d0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff65 	bl	80020b0 <LL_ADC_IsInternalRegulatorEnabled>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10d      	bne.n	8002208 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	f043 0210 	orr.w	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff76 	bl	80020fe <LL_ADC_REG_IsConversionOngoing>
 8002212:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 8129 	bne.w	8002474 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 8125 	bne.w	8002474 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002232:	f043 0202 	orr.w	r2, r3, #2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff4a 	bl	80020d8 <LL_ADC_IsEnabled>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d136      	bne.n	80022b8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a65      	ldr	r2, [pc, #404]	; (80023e4 <HAL_ADC_Init+0x298>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d004      	beq.n	800225e <HAL_ADC_Init+0x112>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a63      	ldr	r2, [pc, #396]	; (80023e8 <HAL_ADC_Init+0x29c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10e      	bne.n	800227c <HAL_ADC_Init+0x130>
 800225e:	4861      	ldr	r0, [pc, #388]	; (80023e4 <HAL_ADC_Init+0x298>)
 8002260:	f7ff ff3a 	bl	80020d8 <LL_ADC_IsEnabled>
 8002264:	4604      	mov	r4, r0
 8002266:	4860      	ldr	r0, [pc, #384]	; (80023e8 <HAL_ADC_Init+0x29c>)
 8002268:	f7ff ff36 	bl	80020d8 <LL_ADC_IsEnabled>
 800226c:	4603      	mov	r3, r0
 800226e:	4323      	orrs	r3, r4
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e008      	b.n	800228e <HAL_ADC_Init+0x142>
 800227c:	485b      	ldr	r0, [pc, #364]	; (80023ec <HAL_ADC_Init+0x2a0>)
 800227e:	f7ff ff2b 	bl	80020d8 <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d012      	beq.n	80022b8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a53      	ldr	r2, [pc, #332]	; (80023e4 <HAL_ADC_Init+0x298>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d004      	beq.n	80022a6 <HAL_ADC_Init+0x15a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a51      	ldr	r2, [pc, #324]	; (80023e8 <HAL_ADC_Init+0x29c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_Init+0x15e>
 80022a6:	4a52      	ldr	r2, [pc, #328]	; (80023f0 <HAL_ADC_Init+0x2a4>)
 80022a8:	e000      	b.n	80022ac <HAL_ADC_Init+0x160>
 80022aa:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_ADC_Init+0x2a8>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f7ff fdbe 	bl	8001e34 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80022b8:	f7ff fdb0 	bl	8001e1c <HAL_GetREVID>
 80022bc:	4603      	mov	r3, r0
 80022be:	f241 0203 	movw	r2, #4099	; 0x1003
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d914      	bls.n	80022f0 <HAL_ADC_Init+0x1a4>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d110      	bne.n	80022f0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7d5b      	ldrb	r3, [r3, #21]
 80022d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022d8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80022de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7f1b      	ldrb	r3, [r3, #28]
 80022e4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80022e6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022e8:	f043 030c 	orr.w	r3, r3, #12
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	e00d      	b.n	800230c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7d5b      	ldrb	r3, [r3, #21]
 80022f4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022fa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002300:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7f1b      	ldrb	r3, [r3, #28]
 8002306:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7f1b      	ldrb	r3, [r3, #28]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d106      	bne.n	8002322 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	3b01      	subs	r3, #1
 800231a:	045b      	lsls	r3, r3, #17
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <HAL_ADC_Init+0x2ac>)
 8002346:	4013      	ands	r3, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	69b9      	ldr	r1, [r7, #24]
 800234e:	430b      	orrs	r3, r1
 8002350:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fed1 	bl	80020fe <LL_ADC_REG_IsConversionOngoing>
 800235c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fede 	bl	8002124 <LL_ADC_INJ_IsConversionOngoing>
 8002368:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d15f      	bne.n	8002430 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d15c      	bne.n	8002430 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7d1b      	ldrb	r3, [r3, #20]
 800237a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <HAL_ADC_Init+0x2b0>)
 800238c:	4013      	ands	r3, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	69b9      	ldr	r1, [r7, #24]
 8002394:	430b      	orrs	r3, r1
 8002396:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d130      	bne.n	8002404 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_ADC_Init+0x2b4>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023b6:	3a01      	subs	r2, #1
 80023b8:	0411      	lsls	r1, r2, #16
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023be:	4311      	orrs	r1, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023c4:	4311      	orrs	r1, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023ca:	430a      	orrs	r2, r1
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	611a      	str	r2, [r3, #16]
 80023d8:	e01c      	b.n	8002414 <HAL_ADC_Init+0x2c8>
 80023da:	bf00      	nop
 80023dc:	24000000 	.word	0x24000000
 80023e0:	053e2d63 	.word	0x053e2d63
 80023e4:	40022000 	.word	0x40022000
 80023e8:	40022100 	.word	0x40022100
 80023ec:	58026000 	.word	0x58026000
 80023f0:	40022300 	.word	0x40022300
 80023f4:	58026300 	.word	0x58026300
 80023f8:	fff0c003 	.word	0xfff0c003
 80023fc:	ffffbffc 	.word	0xffffbffc
 8002400:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fb80 	bl	8002b30 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10c      	bne.n	8002452 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f023 010f 	bic.w	r1, r3, #15
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	1e5a      	subs	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
 8002450:	e007      	b.n	8002462 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 020f 	bic.w	r2, r2, #15
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
 8002472:	e007      	b.n	8002484 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	f043 0210 	orr.w	r2, r3, #16
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002484:	7ffb      	ldrb	r3, [r7, #31]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd90      	pop	{r4, r7, pc}
 800248e:	bf00      	nop

08002490 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b0a1      	sub	sp, #132	; 0x84
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a9d      	ldr	r2, [pc, #628]	; (8002720 <HAL_ADC_ConfigChannel+0x290>)
 80024aa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x2a>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e321      	b.n	8002afe <HAL_ADC_ConfigChannel+0x66e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fe19 	bl	80020fe <LL_ADC_REG_IsConversionOngoing>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 8306 	bne.w	8002ae0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d108      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x62>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2201      	movs	r2, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	e016      	b.n	8002520 <HAL_ADC_ConfigChannel+0x90>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002502:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e003      	b.n	8002516 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800250e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2201      	movs	r2, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	69d1      	ldr	r1, [r2, #28]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	430b      	orrs	r3, r1
 800252c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	f7ff fd02 	bl	8001f44 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fdda 	bl	80020fe <LL_ADC_REG_IsConversionOngoing>
 800254a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fde7 	bl	8002124 <LL_ADC_INJ_IsConversionOngoing>
 8002556:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 80b3 	bne.w	80026c6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 80af 	bne.w	80026c6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6819      	ldr	r1, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	461a      	mov	r2, r3
 8002576:	f7ff fd11 	bl	8001f9c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800257a:	4b6a      	ldr	r3, [pc, #424]	; (8002724 <HAL_ADC_ConfigChannel+0x294>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002586:	d10b      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x110>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	e01d      	b.n	80025dc <HAL_ADC_ConfigChannel+0x14c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10b      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x136>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	e00a      	b.n	80025dc <HAL_ADC_ConfigChannel+0x14c>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d027      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6919      	ldr	r1, [r3, #16]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f4:	f7ff fc52 	bl	8001e9c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6919      	ldr	r1, [r3, #16]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	7e5b      	ldrb	r3, [r3, #25]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d102      	bne.n	800260e <HAL_ADC_ConfigChannel+0x17e>
 8002608:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800260c:	e000      	b.n	8002610 <HAL_ADC_ConfigChannel+0x180>
 800260e:	2300      	movs	r3, #0
 8002610:	461a      	mov	r2, r3
 8002612:	f7ff fc7c 	bl	8001f0e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6919      	ldr	r1, [r3, #16]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	7e1b      	ldrb	r3, [r3, #24]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_ADC_ConfigChannel+0x19c>
 8002626:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800262a:	e000      	b.n	800262e <HAL_ADC_ConfigChannel+0x19e>
 800262c:	2300      	movs	r3, #0
 800262e:	461a      	mov	r2, r3
 8002630:	f7ff fc54 	bl	8001edc <LL_ADC_SetDataRightShift>
 8002634:	e047      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	069b      	lsls	r3, r3, #26
 8002646:	429a      	cmp	r2, r3
 8002648:	d107      	bne.n	800265a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002658:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002660:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	069b      	lsls	r3, r3, #26
 800266a:	429a      	cmp	r2, r3
 800266c:	d107      	bne.n	800267e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800267c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	069b      	lsls	r3, r3, #26
 800268e:	429a      	cmp	r2, r3
 8002690:	d107      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026a0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	069b      	lsls	r3, r3, #26
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d107      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026c4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fd04 	bl	80020d8 <LL_ADC_IsEnabled>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 820d 	bne.w	8002af2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6819      	ldr	r1, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	461a      	mov	r2, r3
 80026e6:	f7ff fc85 	bl	8001ff4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4a0c      	ldr	r2, [pc, #48]	; (8002720 <HAL_ADC_ConfigChannel+0x290>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	f040 8133 	bne.w	800295c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002702:	2b00      	cmp	r3, #0
 8002704:	d110      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x298>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	3301      	adds	r3, #1
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2b09      	cmp	r3, #9
 8002714:	bf94      	ite	ls
 8002716:	2301      	movls	r3, #1
 8002718:	2300      	movhi	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	e01e      	b.n	800275c <HAL_ADC_ConfigChannel+0x2cc>
 800271e:	bf00      	nop
 8002720:	47ff0000 	.word	0x47ff0000
 8002724:	5c001000 	.word	0x5c001000
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002738:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800273a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002740:	2320      	movs	r3, #32
 8002742:	e003      	b.n	800274c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2b09      	cmp	r3, #9
 8002754:	bf94      	ite	ls
 8002756:	2301      	movls	r3, #1
 8002758:	2300      	movhi	r3, #0
 800275a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800275c:	2b00      	cmp	r3, #0
 800275e:	d079      	beq.n	8002854 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002768:	2b00      	cmp	r3, #0
 800276a:	d107      	bne.n	800277c <HAL_ADC_ConfigChannel+0x2ec>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	3301      	adds	r3, #1
 8002774:	069b      	lsls	r3, r3, #26
 8002776:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800277a:	e015      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x318>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800278a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800278e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002794:	2320      	movs	r3, #32
 8002796:	e003      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	069b      	lsls	r3, r3, #26
 80027a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x338>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0e9b      	lsrs	r3, r3, #26
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2101      	movs	r1, #1
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	e017      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x368>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80027d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80027da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80027e0:	2320      	movs	r3, #32
 80027e2:	e003      	b.n	80027ec <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80027e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	ea42 0103 	orr.w	r1, r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <HAL_ADC_ConfigChannel+0x38e>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	3301      	adds	r3, #1
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	051b      	lsls	r3, r3, #20
 800281c:	e018      	b.n	8002850 <HAL_ADC_ConfigChannel+0x3c0>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002836:	2320      	movs	r3, #32
 8002838:	e003      	b.n	8002842 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002850:	430b      	orrs	r3, r1
 8002852:	e07e      	b.n	8002952 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x3e0>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	3301      	adds	r3, #1
 8002868:	069b      	lsls	r3, r3, #26
 800286a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800286e:	e015      	b.n	800289c <HAL_ADC_ConfigChannel+0x40c>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002888:	2320      	movs	r3, #32
 800288a:	e003      	b.n	8002894 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3301      	adds	r3, #1
 8002896:	069b      	lsls	r3, r3, #26
 8002898:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x42c>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2101      	movs	r1, #1
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	e017      	b.n	80028ec <HAL_ADC_ConfigChannel+0x45c>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	61bb      	str	r3, [r7, #24]
  return result;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80028d4:	2320      	movs	r3, #32
 80028d6:	e003      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2101      	movs	r1, #1
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	ea42 0103 	orr.w	r1, r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10d      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x488>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	3301      	adds	r3, #1
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	3b1e      	subs	r3, #30
 8002910:	051b      	lsls	r3, r3, #20
 8002912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002916:	e01b      	b.n	8002950 <HAL_ADC_ConfigChannel+0x4c0>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	fa93 f3a3 	rbit	r3, r3
 8002924:	60fb      	str	r3, [r7, #12]
  return result;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002930:	2320      	movs	r3, #32
 8002932:	e003      	b.n	800293c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	3301      	adds	r3, #1
 800293e:	f003 021f 	and.w	r2, r3, #31
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	3b1e      	subs	r3, #30
 800294a:	051b      	lsls	r3, r3, #20
 800294c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002950:	430b      	orrs	r3, r1
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	6892      	ldr	r2, [r2, #8]
 8002956:	4619      	mov	r1, r3
 8002958:	f7ff fb20 	bl	8001f9c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f280 80c6 	bge.w	8002af2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a67      	ldr	r2, [pc, #412]	; (8002b08 <HAL_ADC_ConfigChannel+0x678>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_ADC_ConfigChannel+0x4ea>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a65      	ldr	r2, [pc, #404]	; (8002b0c <HAL_ADC_ConfigChannel+0x67c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_ADC_ConfigChannel+0x4ee>
 800297a:	4b65      	ldr	r3, [pc, #404]	; (8002b10 <HAL_ADC_ConfigChannel+0x680>)
 800297c:	e000      	b.n	8002980 <HAL_ADC_ConfigChannel+0x4f0>
 800297e:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <HAL_ADC_ConfigChannel+0x684>)
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fa7d 	bl	8001e80 <LL_ADC_GetCommonPathInternalCh>
 8002986:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a5e      	ldr	r2, [pc, #376]	; (8002b08 <HAL_ADC_ConfigChannel+0x678>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d004      	beq.n	800299c <HAL_ADC_ConfigChannel+0x50c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5d      	ldr	r2, [pc, #372]	; (8002b0c <HAL_ADC_ConfigChannel+0x67c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d10e      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x52a>
 800299c:	485a      	ldr	r0, [pc, #360]	; (8002b08 <HAL_ADC_ConfigChannel+0x678>)
 800299e:	f7ff fb9b 	bl	80020d8 <LL_ADC_IsEnabled>
 80029a2:	4604      	mov	r4, r0
 80029a4:	4859      	ldr	r0, [pc, #356]	; (8002b0c <HAL_ADC_ConfigChannel+0x67c>)
 80029a6:	f7ff fb97 	bl	80020d8 <LL_ADC_IsEnabled>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4323      	orrs	r3, r4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	e008      	b.n	80029cc <HAL_ADC_ConfigChannel+0x53c>
 80029ba:	4857      	ldr	r0, [pc, #348]	; (8002b18 <HAL_ADC_ConfigChannel+0x688>)
 80029bc:	f7ff fb8c 	bl	80020d8 <LL_ADC_IsEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf0c      	ite	eq
 80029c6:	2301      	moveq	r3, #1
 80029c8:	2300      	movne	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d07d      	beq.n	8002acc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a51      	ldr	r2, [pc, #324]	; (8002b1c <HAL_ADC_ConfigChannel+0x68c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d130      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x5ac>
 80029da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d12b      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a4b      	ldr	r2, [pc, #300]	; (8002b18 <HAL_ADC_ConfigChannel+0x688>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	f040 8081 	bne.w	8002af2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a44      	ldr	r2, [pc, #272]	; (8002b08 <HAL_ADC_ConfigChannel+0x678>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d004      	beq.n	8002a04 <HAL_ADC_ConfigChannel+0x574>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a43      	ldr	r2, [pc, #268]	; (8002b0c <HAL_ADC_ConfigChannel+0x67c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x578>
 8002a04:	4a42      	ldr	r2, [pc, #264]	; (8002b10 <HAL_ADC_ConfigChannel+0x680>)
 8002a06:	e000      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x57a>
 8002a08:	4a42      	ldr	r2, [pc, #264]	; (8002b14 <HAL_ADC_ConfigChannel+0x684>)
 8002a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f7ff fa21 	bl	8001e5a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_ADC_ConfigChannel+0x690>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	4a41      	ldr	r2, [pc, #260]	; (8002b24 <HAL_ADC_ConfigChannel+0x694>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	3301      	adds	r3, #1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a2c:	e002      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f9      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a3a:	e05a      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a39      	ldr	r2, [pc, #228]	; (8002b28 <HAL_ADC_ConfigChannel+0x698>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d11e      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x5f4>
 8002a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d119      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a30      	ldr	r2, [pc, #192]	; (8002b18 <HAL_ADC_ConfigChannel+0x688>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d14b      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a2a      	ldr	r2, [pc, #168]	; (8002b08 <HAL_ADC_ConfigChannel+0x678>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_ADC_ConfigChannel+0x5de>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <HAL_ADC_ConfigChannel+0x67c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x5e2>
 8002a6e:	4a28      	ldr	r2, [pc, #160]	; (8002b10 <HAL_ADC_ConfigChannel+0x680>)
 8002a70:	e000      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x5e4>
 8002a72:	4a28      	ldr	r2, [pc, #160]	; (8002b14 <HAL_ADC_ConfigChannel+0x684>)
 8002a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	f7ff f9ec 	bl	8001e5a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a82:	e036      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a28      	ldr	r2, [pc, #160]	; (8002b2c <HAL_ADC_ConfigChannel+0x69c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d131      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x662>
 8002a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d12c      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <HAL_ADC_ConfigChannel+0x688>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d127      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <HAL_ADC_ConfigChannel+0x678>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x626>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a16      	ldr	r2, [pc, #88]	; (8002b0c <HAL_ADC_ConfigChannel+0x67c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x62a>
 8002ab6:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_ADC_ConfigChannel+0x680>)
 8002ab8:	e000      	b.n	8002abc <HAL_ADC_ConfigChannel+0x62c>
 8002aba:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <HAL_ADC_ConfigChannel+0x684>)
 8002abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f7ff f9c8 	bl	8001e5a <LL_ADC_SetCommonPathInternalCh>
 8002aca:	e012      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ade:	e008      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002afa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3784      	adds	r7, #132	; 0x84
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40022000 	.word	0x40022000
 8002b0c:	40022100 	.word	0x40022100
 8002b10:	40022300 	.word	0x40022300
 8002b14:	58026300 	.word	0x58026300
 8002b18:	58026000 	.word	0x58026000
 8002b1c:	cb840000 	.word	0xcb840000
 8002b20:	24000000 	.word	0x24000000
 8002b24:	053e2d63 	.word	0x053e2d63
 8002b28:	c7520000 	.word	0xc7520000
 8002b2c:	cfb80000 	.word	0xcfb80000

08002b30 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a79      	ldr	r2, [pc, #484]	; (8002d24 <ADC_ConfigureBoostMode+0x1f4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <ADC_ConfigureBoostMode+0x1c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a78      	ldr	r2, [pc, #480]	; (8002d28 <ADC_ConfigureBoostMode+0x1f8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d109      	bne.n	8002b60 <ADC_ConfigureBoostMode+0x30>
 8002b4c:	4b77      	ldr	r3, [pc, #476]	; (8002d2c <ADC_ConfigureBoostMode+0x1fc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e008      	b.n	8002b72 <ADC_ConfigureBoostMode+0x42>
 8002b60:	4b73      	ldr	r3, [pc, #460]	; (8002d30 <ADC_ConfigureBoostMode+0x200>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01c      	beq.n	8002bb0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b76:	f005 fc99 	bl	80084ac <HAL_RCC_GetHCLKFreq>
 8002b7a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b84:	d010      	beq.n	8002ba8 <ADC_ConfigureBoostMode+0x78>
 8002b86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b8a:	d871      	bhi.n	8002c70 <ADC_ConfigureBoostMode+0x140>
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d002      	beq.n	8002b98 <ADC_ConfigureBoostMode+0x68>
 8002b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b96:	d16b      	bne.n	8002c70 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	60fb      	str	r3, [r7, #12]
        break;
 8002ba6:	e066      	b.n	8002c76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	60fb      	str	r3, [r7, #12]
        break;
 8002bae:	e062      	b.n	8002c76 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002bb0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002bb4:	f006 fbf0 	bl	8009398 <HAL_RCCEx_GetPeriphCLKFreq>
 8002bb8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002bc2:	d051      	beq.n	8002c68 <ADC_ConfigureBoostMode+0x138>
 8002bc4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002bc8:	d854      	bhi.n	8002c74 <ADC_ConfigureBoostMode+0x144>
 8002bca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002bce:	d047      	beq.n	8002c60 <ADC_ConfigureBoostMode+0x130>
 8002bd0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002bd4:	d84e      	bhi.n	8002c74 <ADC_ConfigureBoostMode+0x144>
 8002bd6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002bda:	d03d      	beq.n	8002c58 <ADC_ConfigureBoostMode+0x128>
 8002bdc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002be0:	d848      	bhi.n	8002c74 <ADC_ConfigureBoostMode+0x144>
 8002be2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002be6:	d033      	beq.n	8002c50 <ADC_ConfigureBoostMode+0x120>
 8002be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bec:	d842      	bhi.n	8002c74 <ADC_ConfigureBoostMode+0x144>
 8002bee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002bf2:	d029      	beq.n	8002c48 <ADC_ConfigureBoostMode+0x118>
 8002bf4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002bf8:	d83c      	bhi.n	8002c74 <ADC_ConfigureBoostMode+0x144>
 8002bfa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002bfe:	d01a      	beq.n	8002c36 <ADC_ConfigureBoostMode+0x106>
 8002c00:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002c04:	d836      	bhi.n	8002c74 <ADC_ConfigureBoostMode+0x144>
 8002c06:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c0a:	d014      	beq.n	8002c36 <ADC_ConfigureBoostMode+0x106>
 8002c0c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c10:	d830      	bhi.n	8002c74 <ADC_ConfigureBoostMode+0x144>
 8002c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c16:	d00e      	beq.n	8002c36 <ADC_ConfigureBoostMode+0x106>
 8002c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c1c:	d82a      	bhi.n	8002c74 <ADC_ConfigureBoostMode+0x144>
 8002c1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c22:	d008      	beq.n	8002c36 <ADC_ConfigureBoostMode+0x106>
 8002c24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c28:	d824      	bhi.n	8002c74 <ADC_ConfigureBoostMode+0x144>
 8002c2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c2e:	d002      	beq.n	8002c36 <ADC_ConfigureBoostMode+0x106>
 8002c30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c34:	d11e      	bne.n	8002c74 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	0c9b      	lsrs	r3, r3, #18
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	60fb      	str	r3, [r7, #12]
        break;
 8002c46:	e016      	b.n	8002c76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	60fb      	str	r3, [r7, #12]
        break;
 8002c4e:	e012      	b.n	8002c76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	60fb      	str	r3, [r7, #12]
        break;
 8002c56:	e00e      	b.n	8002c76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	099b      	lsrs	r3, r3, #6
 8002c5c:	60fb      	str	r3, [r7, #12]
        break;
 8002c5e:	e00a      	b.n	8002c76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	09db      	lsrs	r3, r3, #7
 8002c64:	60fb      	str	r3, [r7, #12]
        break;
 8002c66:	e006      	b.n	8002c76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	60fb      	str	r3, [r7, #12]
        break;
 8002c6e:	e002      	b.n	8002c76 <ADC_ConfigureBoostMode+0x146>
        break;
 8002c70:	bf00      	nop
 8002c72:	e000      	b.n	8002c76 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002c74:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002c76:	f7ff f8d1 	bl	8001e1c <HAL_GetREVID>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d815      	bhi.n	8002cb0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a2b      	ldr	r2, [pc, #172]	; (8002d34 <ADC_ConfigureBoostMode+0x204>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d908      	bls.n	8002c9e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c9a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c9c:	e03e      	b.n	8002d1c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cac:	609a      	str	r2, [r3, #8]
}
 8002cae:	e035      	b.n	8002d1c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4a1f      	ldr	r2, [pc, #124]	; (8002d38 <ADC_ConfigureBoostMode+0x208>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d808      	bhi.n	8002cd0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ccc:	609a      	str	r2, [r3, #8]
}
 8002cce:	e025      	b.n	8002d1c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <ADC_ConfigureBoostMode+0x20c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d80a      	bhi.n	8002cee <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cea:	609a      	str	r2, [r3, #8]
}
 8002cec:	e016      	b.n	8002d1c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <ADC_ConfigureBoostMode+0x210>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d80a      	bhi.n	8002d0c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d08:	609a      	str	r2, [r3, #8]
}
 8002d0a:	e007      	b.n	8002d1c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002d1a:	609a      	str	r2, [r3, #8]
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40022000 	.word	0x40022000
 8002d28:	40022100 	.word	0x40022100
 8002d2c:	40022300 	.word	0x40022300
 8002d30:	58026300 	.word	0x58026300
 8002d34:	01312d00 	.word	0x01312d00
 8002d38:	005f5e10 	.word	0x005f5e10
 8002d3c:	00bebc20 	.word	0x00bebc20
 8002d40:	017d7840 	.word	0x017d7840

08002d44 <LL_ADC_IsEnabled>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <LL_ADC_IsEnabled+0x18>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <LL_ADC_IsEnabled+0x1a>
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_ADC_REG_IsConversionOngoing>:
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d101      	bne.n	8002d82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b09f      	sub	sp, #124	; 0x7c
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e0be      	b.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002db6:	2300      	movs	r3, #0
 8002db8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5c      	ldr	r2, [pc, #368]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d102      	bne.n	8002dce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002dc8:	4b5b      	ldr	r3, [pc, #364]	; (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	e001      	b.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10b      	bne.n	8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e09d      	b.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ffb9 	bl	8002d6a <LL_ADC_REG_IsConversionOngoing>
 8002df8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ffb3 	bl	8002d6a <LL_ADC_REG_IsConversionOngoing>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d17f      	bne.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d17c      	bne.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a47      	ldr	r2, [pc, #284]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a46      	ldr	r2, [pc, #280]	; (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002e24:	4b45      	ldr	r3, [pc, #276]	; (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e26:	e000      	b.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002e28:	4b45      	ldr	r3, [pc, #276]	; (8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e2a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d039      	beq.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e44:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a3a      	ldr	r2, [pc, #232]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d004      	beq.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a38      	ldr	r2, [pc, #224]	; (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d10e      	bne.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e5a:	4836      	ldr	r0, [pc, #216]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e5c:	f7ff ff72 	bl	8002d44 <LL_ADC_IsEnabled>
 8002e60:	4604      	mov	r4, r0
 8002e62:	4835      	ldr	r0, [pc, #212]	; (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e64:	f7ff ff6e 	bl	8002d44 <LL_ADC_IsEnabled>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4323      	orrs	r3, r4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e008      	b.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002e78:	4832      	ldr	r0, [pc, #200]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002e7a:	f7ff ff63 	bl	8002d44 <LL_ADC_IsEnabled>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d047      	beq.n	8002f1e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	6811      	ldr	r1, [r2, #0]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	6892      	ldr	r2, [r2, #8]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea6:	e03a      	b.n	8002f1e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d10e      	bne.n	8002ee6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002ec8:	481a      	ldr	r0, [pc, #104]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002eca:	f7ff ff3b 	bl	8002d44 <LL_ADC_IsEnabled>
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4819      	ldr	r0, [pc, #100]	; (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ed2:	f7ff ff37 	bl	8002d44 <LL_ADC_IsEnabled>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4323      	orrs	r3, r4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	e008      	b.n	8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002ee6:	4817      	ldr	r0, [pc, #92]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002ee8:	f7ff ff2c 	bl	8002d44 <LL_ADC_IsEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	2300      	movne	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d010      	beq.n	8002f1e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f06:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f08:	e009      	b.n	8002f1e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	f043 0220 	orr.w	r2, r3, #32
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002f1c:	e000      	b.n	8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f1e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	377c      	adds	r7, #124	; 0x7c
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd90      	pop	{r4, r7, pc}
 8002f34:	40022000 	.word	0x40022000
 8002f38:	40022100 	.word	0x40022100
 8002f3c:	40022300 	.word	0x40022300
 8002f40:	58026300 	.word	0x58026300
 8002f44:	58026000 	.word	0x58026000
 8002f48:	fffff0e0 	.word	0xfffff0e0

08002f4c <__NVIC_SetPriorityGrouping>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <__NVIC_SetPriorityGrouping+0x40>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <__NVIC_SetPriorityGrouping+0x44>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f7a:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <__NVIC_SetPriorityGrouping+0x40>)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	60d3      	str	r3, [r2, #12]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00
 8002f90:	05fa0000 	.word	0x05fa0000

08002f94 <__NVIC_GetPriorityGrouping>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <__NVIC_GetPriorityGrouping+0x18>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	f003 0307 	and.w	r3, r3, #7
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <__NVIC_EnableIRQ>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	db0b      	blt.n	8002fda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	4907      	ldr	r1, [pc, #28]	; (8002fe8 <__NVIC_EnableIRQ+0x38>)
 8002fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000e100 	.word	0xe000e100

08002fec <__NVIC_SetPriority>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db0a      	blt.n	8003016 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	490c      	ldr	r1, [pc, #48]	; (8003038 <__NVIC_SetPriority+0x4c>)
 8003006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	440b      	add	r3, r1
 8003010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003014:	e00a      	b.n	800302c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4908      	ldr	r1, [pc, #32]	; (800303c <__NVIC_SetPriority+0x50>)
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	3b04      	subs	r3, #4
 8003024:	0112      	lsls	r2, r2, #4
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	440b      	add	r3, r1
 800302a:	761a      	strb	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000e100 	.word	0xe000e100
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <NVIC_EncodePriority>:
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f1c3 0307 	rsb	r3, r3, #7
 800305a:	2b04      	cmp	r3, #4
 800305c:	bf28      	it	cs
 800305e:	2304      	movcs	r3, #4
 8003060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3304      	adds	r3, #4
 8003066:	2b06      	cmp	r3, #6
 8003068:	d902      	bls.n	8003070 <NVIC_EncodePriority+0x30>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3b03      	subs	r3, #3
 800306e:	e000      	b.n	8003072 <NVIC_EncodePriority+0x32>
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	401a      	ands	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003088:	f04f 31ff 	mov.w	r1, #4294967295
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43d9      	mvns	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	4313      	orrs	r3, r2
}
 800309a:	4618      	mov	r0, r3
 800309c:	3724      	adds	r7, #36	; 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b8:	d301      	bcc.n	80030be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00f      	b.n	80030de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030be:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <SysTick_Config+0x40>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c6:	210f      	movs	r1, #15
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	f7ff ff8e 	bl	8002fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <SysTick_Config+0x40>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <SysTick_Config+0x40>)
 80030d8:	2207      	movs	r2, #7
 80030da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	e000e010 	.word	0xe000e010

080030ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff29 	bl	8002f4c <__NVIC_SetPriorityGrouping>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003110:	f7ff ff40 	bl	8002f94 <__NVIC_GetPriorityGrouping>
 8003114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	6978      	ldr	r0, [r7, #20]
 800311c:	f7ff ff90 	bl	8003040 <NVIC_EncodePriority>
 8003120:	4602      	mov	r2, r0
 8003122:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff5f 	bl	8002fec <__NVIC_SetPriority>
}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff33 	bl	8002fb0 <__NVIC_EnableIRQ>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ffa4 	bl	80030a8 <SysTick_Config>
 8003160:	4603      	mov	r3, r0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e054      	b.n	8003228 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7f5b      	ldrb	r3, [r3, #29]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fd f99e 	bl	80004d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	791b      	ldrb	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10c      	bne.n	80031bc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a22      	ldr	r2, [pc, #136]	; (8003230 <HAL_CRC_Init+0xc4>)
 80031a8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0218 	bic.w	r2, r2, #24
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	e00c      	b.n	80031d6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6899      	ldr	r1, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	461a      	mov	r2, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f834 	bl	8003234 <HAL_CRCEx_Polynomial_Set>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e028      	b.n	8003228 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	795b      	ldrb	r3, [r3, #5]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f04f 32ff 	mov.w	r2, #4294967295
 80031e6:	611a      	str	r2, [r3, #16]
 80031e8:	e004      	b.n	80031f4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6912      	ldr	r2, [r2, #16]
 80031f2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	04c11db7 	.word	0x04c11db7

08003234 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003244:	231f      	movs	r3, #31
 8003246:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003248:	bf00      	nop
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	613a      	str	r2, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d009      	beq.n	8003268 <HAL_CRCEx_Polynomial_Set+0x34>
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b18      	cmp	r3, #24
 800326c:	d846      	bhi.n	80032fc <HAL_CRCEx_Polynomial_Set+0xc8>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	08003303 	.word	0x08003303
 8003278:	080032fd 	.word	0x080032fd
 800327c:	080032fd 	.word	0x080032fd
 8003280:	080032fd 	.word	0x080032fd
 8003284:	080032fd 	.word	0x080032fd
 8003288:	080032fd 	.word	0x080032fd
 800328c:	080032fd 	.word	0x080032fd
 8003290:	080032fd 	.word	0x080032fd
 8003294:	080032f1 	.word	0x080032f1
 8003298:	080032fd 	.word	0x080032fd
 800329c:	080032fd 	.word	0x080032fd
 80032a0:	080032fd 	.word	0x080032fd
 80032a4:	080032fd 	.word	0x080032fd
 80032a8:	080032fd 	.word	0x080032fd
 80032ac:	080032fd 	.word	0x080032fd
 80032b0:	080032fd 	.word	0x080032fd
 80032b4:	080032e5 	.word	0x080032e5
 80032b8:	080032fd 	.word	0x080032fd
 80032bc:	080032fd 	.word	0x080032fd
 80032c0:	080032fd 	.word	0x080032fd
 80032c4:	080032fd 	.word	0x080032fd
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	080032fd 	.word	0x080032fd
 80032d0:	080032fd 	.word	0x080032fd
 80032d4:	080032d9 	.word	0x080032d9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d913      	bls.n	8003306 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032e2:	e010      	b.n	8003306 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	d90f      	bls.n	800330a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032ee:	e00c      	b.n	800330a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	d90b      	bls.n	800330e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032fa:	e008      	b.n	800330e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003300:	e006      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003302:	bf00      	nop
 8003304:	e004      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003306:	bf00      	nop
 8003308:	e002      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800330a:	bf00      	nop
 800330c:	e000      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800330e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 0118 	bic.w	r1, r3, #24
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	430a      	orrs	r2, r1
 8003330:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003332:	7dfb      	ldrb	r3, [r7, #23]
}
 8003334:	4618      	mov	r0, r3
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003348:	f7fe fd38 	bl	8001dbc <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e316      	b.n	8003986 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a66      	ldr	r2, [pc, #408]	; (80034f8 <HAL_DMA_Init+0x1b8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d04a      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a65      	ldr	r2, [pc, #404]	; (80034fc <HAL_DMA_Init+0x1bc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d045      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a63      	ldr	r2, [pc, #396]	; (8003500 <HAL_DMA_Init+0x1c0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d040      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a62      	ldr	r2, [pc, #392]	; (8003504 <HAL_DMA_Init+0x1c4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d03b      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a60      	ldr	r2, [pc, #384]	; (8003508 <HAL_DMA_Init+0x1c8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d036      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a5f      	ldr	r2, [pc, #380]	; (800350c <HAL_DMA_Init+0x1cc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d031      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5d      	ldr	r2, [pc, #372]	; (8003510 <HAL_DMA_Init+0x1d0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d02c      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a5c      	ldr	r2, [pc, #368]	; (8003514 <HAL_DMA_Init+0x1d4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d027      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a5a      	ldr	r2, [pc, #360]	; (8003518 <HAL_DMA_Init+0x1d8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d022      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a59      	ldr	r2, [pc, #356]	; (800351c <HAL_DMA_Init+0x1dc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d01d      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a57      	ldr	r2, [pc, #348]	; (8003520 <HAL_DMA_Init+0x1e0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d018      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a56      	ldr	r2, [pc, #344]	; (8003524 <HAL_DMA_Init+0x1e4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a54      	ldr	r2, [pc, #336]	; (8003528 <HAL_DMA_Init+0x1e8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00e      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a53      	ldr	r2, [pc, #332]	; (800352c <HAL_DMA_Init+0x1ec>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d009      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a51      	ldr	r2, [pc, #324]	; (8003530 <HAL_DMA_Init+0x1f0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_DMA_Init+0xb8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a50      	ldr	r2, [pc, #320]	; (8003534 <HAL_DMA_Init+0x1f4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_DMA_Init+0xbc>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_DMA_Init+0xbe>
 80033fc:	2300      	movs	r3, #0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 813b 	beq.w	800367a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a37      	ldr	r2, [pc, #220]	; (80034f8 <HAL_DMA_Init+0x1b8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d04a      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a36      	ldr	r2, [pc, #216]	; (80034fc <HAL_DMA_Init+0x1bc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d045      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a34      	ldr	r2, [pc, #208]	; (8003500 <HAL_DMA_Init+0x1c0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d040      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a33      	ldr	r2, [pc, #204]	; (8003504 <HAL_DMA_Init+0x1c4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d03b      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a31      	ldr	r2, [pc, #196]	; (8003508 <HAL_DMA_Init+0x1c8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d036      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a30      	ldr	r2, [pc, #192]	; (800350c <HAL_DMA_Init+0x1cc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d031      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2e      	ldr	r2, [pc, #184]	; (8003510 <HAL_DMA_Init+0x1d0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d02c      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a2d      	ldr	r2, [pc, #180]	; (8003514 <HAL_DMA_Init+0x1d4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d027      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2b      	ldr	r2, [pc, #172]	; (8003518 <HAL_DMA_Init+0x1d8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d022      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2a      	ldr	r2, [pc, #168]	; (800351c <HAL_DMA_Init+0x1dc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d01d      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a28      	ldr	r2, [pc, #160]	; (8003520 <HAL_DMA_Init+0x1e0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d018      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a27      	ldr	r2, [pc, #156]	; (8003524 <HAL_DMA_Init+0x1e4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d013      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a25      	ldr	r2, [pc, #148]	; (8003528 <HAL_DMA_Init+0x1e8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00e      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a24      	ldr	r2, [pc, #144]	; (800352c <HAL_DMA_Init+0x1ec>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d009      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a22      	ldr	r2, [pc, #136]	; (8003530 <HAL_DMA_Init+0x1f0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d004      	beq.n	80034b4 <HAL_DMA_Init+0x174>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a21      	ldr	r2, [pc, #132]	; (8003534 <HAL_DMA_Init+0x1f4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d108      	bne.n	80034c6 <HAL_DMA_Init+0x186>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e007      	b.n	80034d6 <HAL_DMA_Init+0x196>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034d6:	e02f      	b.n	8003538 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034d8:	f7fe fc70 	bl	8001dbc <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b05      	cmp	r3, #5
 80034e4:	d928      	bls.n	8003538 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2203      	movs	r2, #3
 80034f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e246      	b.n	8003986 <HAL_DMA_Init+0x646>
 80034f8:	40020010 	.word	0x40020010
 80034fc:	40020028 	.word	0x40020028
 8003500:	40020040 	.word	0x40020040
 8003504:	40020058 	.word	0x40020058
 8003508:	40020070 	.word	0x40020070
 800350c:	40020088 	.word	0x40020088
 8003510:	400200a0 	.word	0x400200a0
 8003514:	400200b8 	.word	0x400200b8
 8003518:	40020410 	.word	0x40020410
 800351c:	40020428 	.word	0x40020428
 8003520:	40020440 	.word	0x40020440
 8003524:	40020458 	.word	0x40020458
 8003528:	40020470 	.word	0x40020470
 800352c:	40020488 	.word	0x40020488
 8003530:	400204a0 	.word	0x400204a0
 8003534:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1c8      	bne.n	80034d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4b83      	ldr	r3, [pc, #524]	; (8003760 <HAL_DMA_Init+0x420>)
 8003552:	4013      	ands	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800355e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003576:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	2b04      	cmp	r3, #4
 800358a:	d107      	bne.n	800359c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	4313      	orrs	r3, r2
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800359c:	4b71      	ldr	r3, [pc, #452]	; (8003764 <HAL_DMA_Init+0x424>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b71      	ldr	r3, [pc, #452]	; (8003768 <HAL_DMA_Init+0x428>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a8:	d328      	bcc.n	80035fc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b28      	cmp	r3, #40	; 0x28
 80035b0:	d903      	bls.n	80035ba <HAL_DMA_Init+0x27a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b2e      	cmp	r3, #46	; 0x2e
 80035b8:	d917      	bls.n	80035ea <HAL_DMA_Init+0x2aa>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b3e      	cmp	r3, #62	; 0x3e
 80035c0:	d903      	bls.n	80035ca <HAL_DMA_Init+0x28a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b42      	cmp	r3, #66	; 0x42
 80035c8:	d90f      	bls.n	80035ea <HAL_DMA_Init+0x2aa>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b46      	cmp	r3, #70	; 0x46
 80035d0:	d903      	bls.n	80035da <HAL_DMA_Init+0x29a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b48      	cmp	r3, #72	; 0x48
 80035d8:	d907      	bls.n	80035ea <HAL_DMA_Init+0x2aa>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b4e      	cmp	r3, #78	; 0x4e
 80035e0:	d905      	bls.n	80035ee <HAL_DMA_Init+0x2ae>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b52      	cmp	r3, #82	; 0x52
 80035e8:	d801      	bhi.n	80035ee <HAL_DMA_Init+0x2ae>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_DMA_Init+0x2b0>
 80035ee:	2300      	movs	r3, #0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035fa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f023 0307 	bic.w	r3, r3, #7
 8003612:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b04      	cmp	r3, #4
 8003624:	d117      	bne.n	8003656 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00e      	beq.n	8003656 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f002 f815 	bl	8005668 <DMA_CheckFifoParam>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2240      	movs	r2, #64	; 0x40
 8003648:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e197      	b.n	8003986 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f001 ff50 	bl	8005504 <DMA_CalcBaseAndBitshift>
 8003664:	4603      	mov	r3, r0
 8003666:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	223f      	movs	r2, #63	; 0x3f
 8003672:	409a      	lsls	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	e0cd      	b.n	8003816 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a3b      	ldr	r2, [pc, #236]	; (800376c <HAL_DMA_Init+0x42c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d022      	beq.n	80036ca <HAL_DMA_Init+0x38a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a39      	ldr	r2, [pc, #228]	; (8003770 <HAL_DMA_Init+0x430>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01d      	beq.n	80036ca <HAL_DMA_Init+0x38a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a38      	ldr	r2, [pc, #224]	; (8003774 <HAL_DMA_Init+0x434>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d018      	beq.n	80036ca <HAL_DMA_Init+0x38a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a36      	ldr	r2, [pc, #216]	; (8003778 <HAL_DMA_Init+0x438>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_DMA_Init+0x38a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a35      	ldr	r2, [pc, #212]	; (800377c <HAL_DMA_Init+0x43c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00e      	beq.n	80036ca <HAL_DMA_Init+0x38a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a33      	ldr	r2, [pc, #204]	; (8003780 <HAL_DMA_Init+0x440>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_DMA_Init+0x38a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a32      	ldr	r2, [pc, #200]	; (8003784 <HAL_DMA_Init+0x444>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_DMA_Init+0x38a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a30      	ldr	r2, [pc, #192]	; (8003788 <HAL_DMA_Init+0x448>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d101      	bne.n	80036ce <HAL_DMA_Init+0x38e>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_DMA_Init+0x390>
 80036ce:	2300      	movs	r3, #0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8097 	beq.w	8003804 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a24      	ldr	r2, [pc, #144]	; (800376c <HAL_DMA_Init+0x42c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d021      	beq.n	8003724 <HAL_DMA_Init+0x3e4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a22      	ldr	r2, [pc, #136]	; (8003770 <HAL_DMA_Init+0x430>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01c      	beq.n	8003724 <HAL_DMA_Init+0x3e4>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a21      	ldr	r2, [pc, #132]	; (8003774 <HAL_DMA_Init+0x434>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d017      	beq.n	8003724 <HAL_DMA_Init+0x3e4>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <HAL_DMA_Init+0x438>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d012      	beq.n	8003724 <HAL_DMA_Init+0x3e4>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_DMA_Init+0x43c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00d      	beq.n	8003724 <HAL_DMA_Init+0x3e4>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <HAL_DMA_Init+0x440>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d008      	beq.n	8003724 <HAL_DMA_Init+0x3e4>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <HAL_DMA_Init+0x444>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <HAL_DMA_Init+0x3e4>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a19      	ldr	r2, [pc, #100]	; (8003788 <HAL_DMA_Init+0x448>)
 8003722:	4293      	cmp	r3, r2
 8003724:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_DMA_Init+0x44c>)
 8003742:	4013      	ands	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b40      	cmp	r3, #64	; 0x40
 800374c:	d020      	beq.n	8003790 <HAL_DMA_Init+0x450>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b80      	cmp	r3, #128	; 0x80
 8003754:	d102      	bne.n	800375c <HAL_DMA_Init+0x41c>
 8003756:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800375a:	e01a      	b.n	8003792 <HAL_DMA_Init+0x452>
 800375c:	2300      	movs	r3, #0
 800375e:	e018      	b.n	8003792 <HAL_DMA_Init+0x452>
 8003760:	fe10803f 	.word	0xfe10803f
 8003764:	5c001000 	.word	0x5c001000
 8003768:	ffff0000 	.word	0xffff0000
 800376c:	58025408 	.word	0x58025408
 8003770:	5802541c 	.word	0x5802541c
 8003774:	58025430 	.word	0x58025430
 8003778:	58025444 	.word	0x58025444
 800377c:	58025458 	.word	0x58025458
 8003780:	5802546c 	.word	0x5802546c
 8003784:	58025480 	.word	0x58025480
 8003788:	58025494 	.word	0x58025494
 800378c:	fffe000f 	.word	0xfffe000f
 8003790:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68d2      	ldr	r2, [r2, #12]
 8003796:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80037a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80037a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80037b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b6e      	ldr	r3, [pc, #440]	; (8003990 <HAL_DMA_Init+0x650>)
 80037d8:	4413      	add	r3, r2
 80037da:	4a6e      	ldr	r2, [pc, #440]	; (8003994 <HAL_DMA_Init+0x654>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	009a      	lsls	r2, r3, #2
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f001 fe8b 	bl	8005504 <DMA_CalcBaseAndBitshift>
 80037ee:	4603      	mov	r3, r0
 80037f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f6:	f003 031f 	and.w	r3, r3, #31
 80037fa:	2201      	movs	r2, #1
 80037fc:	409a      	lsls	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	e008      	b.n	8003816 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2240      	movs	r2, #64	; 0x40
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2203      	movs	r2, #3
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0b7      	b.n	8003986 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a5f      	ldr	r2, [pc, #380]	; (8003998 <HAL_DMA_Init+0x658>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d072      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a5d      	ldr	r2, [pc, #372]	; (800399c <HAL_DMA_Init+0x65c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d06d      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a5c      	ldr	r2, [pc, #368]	; (80039a0 <HAL_DMA_Init+0x660>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d068      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a5a      	ldr	r2, [pc, #360]	; (80039a4 <HAL_DMA_Init+0x664>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d063      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a59      	ldr	r2, [pc, #356]	; (80039a8 <HAL_DMA_Init+0x668>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d05e      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a57      	ldr	r2, [pc, #348]	; (80039ac <HAL_DMA_Init+0x66c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d059      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a56      	ldr	r2, [pc, #344]	; (80039b0 <HAL_DMA_Init+0x670>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d054      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a54      	ldr	r2, [pc, #336]	; (80039b4 <HAL_DMA_Init+0x674>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d04f      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a53      	ldr	r2, [pc, #332]	; (80039b8 <HAL_DMA_Init+0x678>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d04a      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a51      	ldr	r2, [pc, #324]	; (80039bc <HAL_DMA_Init+0x67c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d045      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a50      	ldr	r2, [pc, #320]	; (80039c0 <HAL_DMA_Init+0x680>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d040      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a4e      	ldr	r2, [pc, #312]	; (80039c4 <HAL_DMA_Init+0x684>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d03b      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a4d      	ldr	r2, [pc, #308]	; (80039c8 <HAL_DMA_Init+0x688>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d036      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a4b      	ldr	r2, [pc, #300]	; (80039cc <HAL_DMA_Init+0x68c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d031      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a4a      	ldr	r2, [pc, #296]	; (80039d0 <HAL_DMA_Init+0x690>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d02c      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a48      	ldr	r2, [pc, #288]	; (80039d4 <HAL_DMA_Init+0x694>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d027      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a47      	ldr	r2, [pc, #284]	; (80039d8 <HAL_DMA_Init+0x698>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a45      	ldr	r2, [pc, #276]	; (80039dc <HAL_DMA_Init+0x69c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01d      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a44      	ldr	r2, [pc, #272]	; (80039e0 <HAL_DMA_Init+0x6a0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d018      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a42      	ldr	r2, [pc, #264]	; (80039e4 <HAL_DMA_Init+0x6a4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a41      	ldr	r2, [pc, #260]	; (80039e8 <HAL_DMA_Init+0x6a8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a3f      	ldr	r2, [pc, #252]	; (80039ec <HAL_DMA_Init+0x6ac>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a3e      	ldr	r2, [pc, #248]	; (80039f0 <HAL_DMA_Init+0x6b0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_DMA_Init+0x5c6>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a3c      	ldr	r2, [pc, #240]	; (80039f4 <HAL_DMA_Init+0x6b4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_DMA_Init+0x5ca>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_DMA_Init+0x5cc>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d032      	beq.n	8003976 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f001 ff25 	bl	8005760 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d102      	bne.n	8003924 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003938:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d010      	beq.n	8003964 <HAL_DMA_Init+0x624>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b08      	cmp	r3, #8
 8003948:	d80c      	bhi.n	8003964 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f001 ffa2 	bl	8005894 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	e008      	b.n	8003976 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	a7fdabf8 	.word	0xa7fdabf8
 8003994:	cccccccd 	.word	0xcccccccd
 8003998:	40020010 	.word	0x40020010
 800399c:	40020028 	.word	0x40020028
 80039a0:	40020040 	.word	0x40020040
 80039a4:	40020058 	.word	0x40020058
 80039a8:	40020070 	.word	0x40020070
 80039ac:	40020088 	.word	0x40020088
 80039b0:	400200a0 	.word	0x400200a0
 80039b4:	400200b8 	.word	0x400200b8
 80039b8:	40020410 	.word	0x40020410
 80039bc:	40020428 	.word	0x40020428
 80039c0:	40020440 	.word	0x40020440
 80039c4:	40020458 	.word	0x40020458
 80039c8:	40020470 	.word	0x40020470
 80039cc:	40020488 	.word	0x40020488
 80039d0:	400204a0 	.word	0x400204a0
 80039d4:	400204b8 	.word	0x400204b8
 80039d8:	58025408 	.word	0x58025408
 80039dc:	5802541c 	.word	0x5802541c
 80039e0:	58025430 	.word	0x58025430
 80039e4:	58025444 	.word	0x58025444
 80039e8:	58025458 	.word	0x58025458
 80039ec:	5802546c 	.word	0x5802546c
 80039f0:	58025480 	.word	0x58025480
 80039f4:	58025494 	.word	0x58025494

080039f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e226      	b.n	8003e62 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_DMA_Start_IT+0x2a>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e21f      	b.n	8003e62 <HAL_DMA_Start_IT+0x46a>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	f040 820a 	bne.w	8003e4c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a68      	ldr	r2, [pc, #416]	; (8003bec <HAL_DMA_Start_IT+0x1f4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d04a      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a66      	ldr	r2, [pc, #408]	; (8003bf0 <HAL_DMA_Start_IT+0x1f8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d045      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a65      	ldr	r2, [pc, #404]	; (8003bf4 <HAL_DMA_Start_IT+0x1fc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d040      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a63      	ldr	r2, [pc, #396]	; (8003bf8 <HAL_DMA_Start_IT+0x200>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d03b      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a62      	ldr	r2, [pc, #392]	; (8003bfc <HAL_DMA_Start_IT+0x204>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d036      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a60      	ldr	r2, [pc, #384]	; (8003c00 <HAL_DMA_Start_IT+0x208>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d031      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a5f      	ldr	r2, [pc, #380]	; (8003c04 <HAL_DMA_Start_IT+0x20c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d02c      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5d      	ldr	r2, [pc, #372]	; (8003c08 <HAL_DMA_Start_IT+0x210>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d027      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a5c      	ldr	r2, [pc, #368]	; (8003c0c <HAL_DMA_Start_IT+0x214>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a5a      	ldr	r2, [pc, #360]	; (8003c10 <HAL_DMA_Start_IT+0x218>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a59      	ldr	r2, [pc, #356]	; (8003c14 <HAL_DMA_Start_IT+0x21c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a57      	ldr	r2, [pc, #348]	; (8003c18 <HAL_DMA_Start_IT+0x220>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a56      	ldr	r2, [pc, #344]	; (8003c1c <HAL_DMA_Start_IT+0x224>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a54      	ldr	r2, [pc, #336]	; (8003c20 <HAL_DMA_Start_IT+0x228>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a53      	ldr	r2, [pc, #332]	; (8003c24 <HAL_DMA_Start_IT+0x22c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a51      	ldr	r2, [pc, #324]	; (8003c28 <HAL_DMA_Start_IT+0x230>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d108      	bne.n	8003af8 <HAL_DMA_Start_IT+0x100>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e007      	b.n	8003b08 <HAL_DMA_Start_IT+0x110>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f001 fb4c 	bl	80051ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a34      	ldr	r2, [pc, #208]	; (8003bec <HAL_DMA_Start_IT+0x1f4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d04a      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a33      	ldr	r2, [pc, #204]	; (8003bf0 <HAL_DMA_Start_IT+0x1f8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d045      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a31      	ldr	r2, [pc, #196]	; (8003bf4 <HAL_DMA_Start_IT+0x1fc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d040      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a30      	ldr	r2, [pc, #192]	; (8003bf8 <HAL_DMA_Start_IT+0x200>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d03b      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2e      	ldr	r2, [pc, #184]	; (8003bfc <HAL_DMA_Start_IT+0x204>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d036      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2d      	ldr	r2, [pc, #180]	; (8003c00 <HAL_DMA_Start_IT+0x208>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d031      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2b      	ldr	r2, [pc, #172]	; (8003c04 <HAL_DMA_Start_IT+0x20c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d02c      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <HAL_DMA_Start_IT+0x210>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d027      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a28      	ldr	r2, [pc, #160]	; (8003c0c <HAL_DMA_Start_IT+0x214>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d022      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a27      	ldr	r2, [pc, #156]	; (8003c10 <HAL_DMA_Start_IT+0x218>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d01d      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <HAL_DMA_Start_IT+0x21c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d018      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a24      	ldr	r2, [pc, #144]	; (8003c18 <HAL_DMA_Start_IT+0x220>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a22      	ldr	r2, [pc, #136]	; (8003c1c <HAL_DMA_Start_IT+0x224>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00e      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <HAL_DMA_Start_IT+0x228>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d009      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_DMA_Start_IT+0x22c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x1bc>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <HAL_DMA_Start_IT+0x230>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_DMA_Start_IT+0x1c0>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <HAL_DMA_Start_IT+0x1c2>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d036      	beq.n	8003c2c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 021e 	bic.w	r2, r3, #30
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0216 	orr.w	r2, r2, #22
 8003bd0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d03e      	beq.n	8003c58 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0208 	orr.w	r2, r2, #8
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e035      	b.n	8003c58 <HAL_DMA_Start_IT+0x260>
 8003bec:	40020010 	.word	0x40020010
 8003bf0:	40020028 	.word	0x40020028
 8003bf4:	40020040 	.word	0x40020040
 8003bf8:	40020058 	.word	0x40020058
 8003bfc:	40020070 	.word	0x40020070
 8003c00:	40020088 	.word	0x40020088
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	400200b8 	.word	0x400200b8
 8003c0c:	40020410 	.word	0x40020410
 8003c10:	40020428 	.word	0x40020428
 8003c14:	40020440 	.word	0x40020440
 8003c18:	40020458 	.word	0x40020458
 8003c1c:	40020470 	.word	0x40020470
 8003c20:	40020488 	.word	0x40020488
 8003c24:	400204a0 	.word	0x400204a0
 8003c28:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 020e 	bic.w	r2, r3, #14
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 020a 	orr.w	r2, r2, #10
 8003c3e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0204 	orr.w	r2, r2, #4
 8003c56:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a83      	ldr	r2, [pc, #524]	; (8003e6c <HAL_DMA_Start_IT+0x474>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d072      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a82      	ldr	r2, [pc, #520]	; (8003e70 <HAL_DMA_Start_IT+0x478>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d06d      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a80      	ldr	r2, [pc, #512]	; (8003e74 <HAL_DMA_Start_IT+0x47c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d068      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a7f      	ldr	r2, [pc, #508]	; (8003e78 <HAL_DMA_Start_IT+0x480>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d063      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a7d      	ldr	r2, [pc, #500]	; (8003e7c <HAL_DMA_Start_IT+0x484>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d05e      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a7c      	ldr	r2, [pc, #496]	; (8003e80 <HAL_DMA_Start_IT+0x488>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d059      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a7a      	ldr	r2, [pc, #488]	; (8003e84 <HAL_DMA_Start_IT+0x48c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d054      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a79      	ldr	r2, [pc, #484]	; (8003e88 <HAL_DMA_Start_IT+0x490>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d04f      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a77      	ldr	r2, [pc, #476]	; (8003e8c <HAL_DMA_Start_IT+0x494>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d04a      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a76      	ldr	r2, [pc, #472]	; (8003e90 <HAL_DMA_Start_IT+0x498>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d045      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a74      	ldr	r2, [pc, #464]	; (8003e94 <HAL_DMA_Start_IT+0x49c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d040      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a73      	ldr	r2, [pc, #460]	; (8003e98 <HAL_DMA_Start_IT+0x4a0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d03b      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a71      	ldr	r2, [pc, #452]	; (8003e9c <HAL_DMA_Start_IT+0x4a4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d036      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a70      	ldr	r2, [pc, #448]	; (8003ea0 <HAL_DMA_Start_IT+0x4a8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d031      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6e      	ldr	r2, [pc, #440]	; (8003ea4 <HAL_DMA_Start_IT+0x4ac>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d02c      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a6d      	ldr	r2, [pc, #436]	; (8003ea8 <HAL_DMA_Start_IT+0x4b0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d027      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a6b      	ldr	r2, [pc, #428]	; (8003eac <HAL_DMA_Start_IT+0x4b4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d022      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a6a      	ldr	r2, [pc, #424]	; (8003eb0 <HAL_DMA_Start_IT+0x4b8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d01d      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a68      	ldr	r2, [pc, #416]	; (8003eb4 <HAL_DMA_Start_IT+0x4bc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d018      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a67      	ldr	r2, [pc, #412]	; (8003eb8 <HAL_DMA_Start_IT+0x4c0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d013      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a65      	ldr	r2, [pc, #404]	; (8003ebc <HAL_DMA_Start_IT+0x4c4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00e      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a64      	ldr	r2, [pc, #400]	; (8003ec0 <HAL_DMA_Start_IT+0x4c8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d009      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a62      	ldr	r2, [pc, #392]	; (8003ec4 <HAL_DMA_Start_IT+0x4cc>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d004      	beq.n	8003d48 <HAL_DMA_Start_IT+0x350>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a61      	ldr	r2, [pc, #388]	; (8003ec8 <HAL_DMA_Start_IT+0x4d0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_DMA_Start_IT+0x354>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <HAL_DMA_Start_IT+0x356>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01a      	beq.n	8003d88 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d6e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d86:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a37      	ldr	r2, [pc, #220]	; (8003e6c <HAL_DMA_Start_IT+0x474>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d04a      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a36      	ldr	r2, [pc, #216]	; (8003e70 <HAL_DMA_Start_IT+0x478>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d045      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a34      	ldr	r2, [pc, #208]	; (8003e74 <HAL_DMA_Start_IT+0x47c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d040      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a33      	ldr	r2, [pc, #204]	; (8003e78 <HAL_DMA_Start_IT+0x480>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d03b      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a31      	ldr	r2, [pc, #196]	; (8003e7c <HAL_DMA_Start_IT+0x484>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d036      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a30      	ldr	r2, [pc, #192]	; (8003e80 <HAL_DMA_Start_IT+0x488>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d031      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a2e      	ldr	r2, [pc, #184]	; (8003e84 <HAL_DMA_Start_IT+0x48c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d02c      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a2d      	ldr	r2, [pc, #180]	; (8003e88 <HAL_DMA_Start_IT+0x490>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d027      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <HAL_DMA_Start_IT+0x494>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d022      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <HAL_DMA_Start_IT+0x498>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d01d      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a28      	ldr	r2, [pc, #160]	; (8003e94 <HAL_DMA_Start_IT+0x49c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <HAL_DMA_Start_IT+0x4a0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a25      	ldr	r2, [pc, #148]	; (8003e9c <HAL_DMA_Start_IT+0x4a4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a24      	ldr	r2, [pc, #144]	; (8003ea0 <HAL_DMA_Start_IT+0x4a8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a22      	ldr	r2, [pc, #136]	; (8003ea4 <HAL_DMA_Start_IT+0x4ac>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_DMA_Start_IT+0x430>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <HAL_DMA_Start_IT+0x4b0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d108      	bne.n	8003e3a <HAL_DMA_Start_IT+0x442>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	e012      	b.n	8003e60 <HAL_DMA_Start_IT+0x468>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e009      	b.n	8003e60 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40020010 	.word	0x40020010
 8003e70:	40020028 	.word	0x40020028
 8003e74:	40020040 	.word	0x40020040
 8003e78:	40020058 	.word	0x40020058
 8003e7c:	40020070 	.word	0x40020070
 8003e80:	40020088 	.word	0x40020088
 8003e84:	400200a0 	.word	0x400200a0
 8003e88:	400200b8 	.word	0x400200b8
 8003e8c:	40020410 	.word	0x40020410
 8003e90:	40020428 	.word	0x40020428
 8003e94:	40020440 	.word	0x40020440
 8003e98:	40020458 	.word	0x40020458
 8003e9c:	40020470 	.word	0x40020470
 8003ea0:	40020488 	.word	0x40020488
 8003ea4:	400204a0 	.word	0x400204a0
 8003ea8:	400204b8 	.word	0x400204b8
 8003eac:	58025408 	.word	0x58025408
 8003eb0:	5802541c 	.word	0x5802541c
 8003eb4:	58025430 	.word	0x58025430
 8003eb8:	58025444 	.word	0x58025444
 8003ebc:	58025458 	.word	0x58025458
 8003ec0:	5802546c 	.word	0x5802546c
 8003ec4:	58025480 	.word	0x58025480
 8003ec8:	58025494 	.word	0x58025494

08003ecc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e237      	b.n	800434e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2280      	movs	r2, #128	; 0x80
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e22c      	b.n	800434e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5c      	ldr	r2, [pc, #368]	; (800406c <HAL_DMA_Abort_IT+0x1a0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d04a      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a5b      	ldr	r2, [pc, #364]	; (8004070 <HAL_DMA_Abort_IT+0x1a4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d045      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a59      	ldr	r2, [pc, #356]	; (8004074 <HAL_DMA_Abort_IT+0x1a8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d040      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a58      	ldr	r2, [pc, #352]	; (8004078 <HAL_DMA_Abort_IT+0x1ac>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d03b      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a56      	ldr	r2, [pc, #344]	; (800407c <HAL_DMA_Abort_IT+0x1b0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d036      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a55      	ldr	r2, [pc, #340]	; (8004080 <HAL_DMA_Abort_IT+0x1b4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d031      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a53      	ldr	r2, [pc, #332]	; (8004084 <HAL_DMA_Abort_IT+0x1b8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d02c      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a52      	ldr	r2, [pc, #328]	; (8004088 <HAL_DMA_Abort_IT+0x1bc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d027      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a50      	ldr	r2, [pc, #320]	; (800408c <HAL_DMA_Abort_IT+0x1c0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a4f      	ldr	r2, [pc, #316]	; (8004090 <HAL_DMA_Abort_IT+0x1c4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d01d      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a4d      	ldr	r2, [pc, #308]	; (8004094 <HAL_DMA_Abort_IT+0x1c8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a4c      	ldr	r2, [pc, #304]	; (8004098 <HAL_DMA_Abort_IT+0x1cc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a4a      	ldr	r2, [pc, #296]	; (800409c <HAL_DMA_Abort_IT+0x1d0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a49      	ldr	r2, [pc, #292]	; (80040a0 <HAL_DMA_Abort_IT+0x1d4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a47      	ldr	r2, [pc, #284]	; (80040a4 <HAL_DMA_Abort_IT+0x1d8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xc8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a46      	ldr	r2, [pc, #280]	; (80040a8 <HAL_DMA_Abort_IT+0x1dc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <HAL_DMA_Abort_IT+0xcc>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <HAL_DMA_Abort_IT+0xce>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 8086 	beq.w	80040ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a2f      	ldr	r2, [pc, #188]	; (800406c <HAL_DMA_Abort_IT+0x1a0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d04a      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2e      	ldr	r2, [pc, #184]	; (8004070 <HAL_DMA_Abort_IT+0x1a4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d045      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2c      	ldr	r2, [pc, #176]	; (8004074 <HAL_DMA_Abort_IT+0x1a8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d040      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2b      	ldr	r2, [pc, #172]	; (8004078 <HAL_DMA_Abort_IT+0x1ac>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d03b      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a29      	ldr	r2, [pc, #164]	; (800407c <HAL_DMA_Abort_IT+0x1b0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d036      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a28      	ldr	r2, [pc, #160]	; (8004080 <HAL_DMA_Abort_IT+0x1b4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d031      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a26      	ldr	r2, [pc, #152]	; (8004084 <HAL_DMA_Abort_IT+0x1b8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d02c      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a25      	ldr	r2, [pc, #148]	; (8004088 <HAL_DMA_Abort_IT+0x1bc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d027      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a23      	ldr	r2, [pc, #140]	; (800408c <HAL_DMA_Abort_IT+0x1c0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d022      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a22      	ldr	r2, [pc, #136]	; (8004090 <HAL_DMA_Abort_IT+0x1c4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d01d      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a20      	ldr	r2, [pc, #128]	; (8004094 <HAL_DMA_Abort_IT+0x1c8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d018      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <HAL_DMA_Abort_IT+0x1cc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d013      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1d      	ldr	r2, [pc, #116]	; (800409c <HAL_DMA_Abort_IT+0x1d0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00e      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_DMA_Abort_IT+0x1d4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d009      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1a      	ldr	r2, [pc, #104]	; (80040a4 <HAL_DMA_Abort_IT+0x1d8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_DMA_Abort_IT+0x17c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <HAL_DMA_Abort_IT+0x1dc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d108      	bne.n	800405a <HAL_DMA_Abort_IT+0x18e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e178      	b.n	800434c <HAL_DMA_Abort_IT+0x480>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e16f      	b.n	800434c <HAL_DMA_Abort_IT+0x480>
 800406c:	40020010 	.word	0x40020010
 8004070:	40020028 	.word	0x40020028
 8004074:	40020040 	.word	0x40020040
 8004078:	40020058 	.word	0x40020058
 800407c:	40020070 	.word	0x40020070
 8004080:	40020088 	.word	0x40020088
 8004084:	400200a0 	.word	0x400200a0
 8004088:	400200b8 	.word	0x400200b8
 800408c:	40020410 	.word	0x40020410
 8004090:	40020428 	.word	0x40020428
 8004094:	40020440 	.word	0x40020440
 8004098:	40020458 	.word	0x40020458
 800409c:	40020470 	.word	0x40020470
 80040a0:	40020488 	.word	0x40020488
 80040a4:	400204a0 	.word	0x400204a0
 80040a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 020e 	bic.w	r2, r2, #14
 80040ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a6c      	ldr	r2, [pc, #432]	; (8004274 <HAL_DMA_Abort_IT+0x3a8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d04a      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a6b      	ldr	r2, [pc, #428]	; (8004278 <HAL_DMA_Abort_IT+0x3ac>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d045      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a69      	ldr	r2, [pc, #420]	; (800427c <HAL_DMA_Abort_IT+0x3b0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d040      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a68      	ldr	r2, [pc, #416]	; (8004280 <HAL_DMA_Abort_IT+0x3b4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03b      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a66      	ldr	r2, [pc, #408]	; (8004284 <HAL_DMA_Abort_IT+0x3b8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d036      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a65      	ldr	r2, [pc, #404]	; (8004288 <HAL_DMA_Abort_IT+0x3bc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d031      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a63      	ldr	r2, [pc, #396]	; (800428c <HAL_DMA_Abort_IT+0x3c0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02c      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a62      	ldr	r2, [pc, #392]	; (8004290 <HAL_DMA_Abort_IT+0x3c4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d027      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a60      	ldr	r2, [pc, #384]	; (8004294 <HAL_DMA_Abort_IT+0x3c8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a5f      	ldr	r2, [pc, #380]	; (8004298 <HAL_DMA_Abort_IT+0x3cc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01d      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a5d      	ldr	r2, [pc, #372]	; (800429c <HAL_DMA_Abort_IT+0x3d0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a5c      	ldr	r2, [pc, #368]	; (80042a0 <HAL_DMA_Abort_IT+0x3d4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a5a      	ldr	r2, [pc, #360]	; (80042a4 <HAL_DMA_Abort_IT+0x3d8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a59      	ldr	r2, [pc, #356]	; (80042a8 <HAL_DMA_Abort_IT+0x3dc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a57      	ldr	r2, [pc, #348]	; (80042ac <HAL_DMA_Abort_IT+0x3e0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_DMA_Abort_IT+0x290>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a56      	ldr	r2, [pc, #344]	; (80042b0 <HAL_DMA_Abort_IT+0x3e4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d108      	bne.n	800416e <HAL_DMA_Abort_IT+0x2a2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e007      	b.n	800417e <HAL_DMA_Abort_IT+0x2b2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a3c      	ldr	r2, [pc, #240]	; (8004274 <HAL_DMA_Abort_IT+0x3a8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d072      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a3a      	ldr	r2, [pc, #232]	; (8004278 <HAL_DMA_Abort_IT+0x3ac>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d06d      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a39      	ldr	r2, [pc, #228]	; (800427c <HAL_DMA_Abort_IT+0x3b0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d068      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a37      	ldr	r2, [pc, #220]	; (8004280 <HAL_DMA_Abort_IT+0x3b4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d063      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a36      	ldr	r2, [pc, #216]	; (8004284 <HAL_DMA_Abort_IT+0x3b8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d05e      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a34      	ldr	r2, [pc, #208]	; (8004288 <HAL_DMA_Abort_IT+0x3bc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d059      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a33      	ldr	r2, [pc, #204]	; (800428c <HAL_DMA_Abort_IT+0x3c0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d054      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a31      	ldr	r2, [pc, #196]	; (8004290 <HAL_DMA_Abort_IT+0x3c4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d04f      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a30      	ldr	r2, [pc, #192]	; (8004294 <HAL_DMA_Abort_IT+0x3c8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d04a      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2e      	ldr	r2, [pc, #184]	; (8004298 <HAL_DMA_Abort_IT+0x3cc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d045      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2d      	ldr	r2, [pc, #180]	; (800429c <HAL_DMA_Abort_IT+0x3d0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d040      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <HAL_DMA_Abort_IT+0x3d4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d03b      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <HAL_DMA_Abort_IT+0x3d8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d036      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a28      	ldr	r2, [pc, #160]	; (80042a8 <HAL_DMA_Abort_IT+0x3dc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d031      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a27      	ldr	r2, [pc, #156]	; (80042ac <HAL_DMA_Abort_IT+0x3e0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d02c      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a25      	ldr	r2, [pc, #148]	; (80042b0 <HAL_DMA_Abort_IT+0x3e4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d027      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a24      	ldr	r2, [pc, #144]	; (80042b4 <HAL_DMA_Abort_IT+0x3e8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d022      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <HAL_DMA_Abort_IT+0x3ec>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01d      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a21      	ldr	r2, [pc, #132]	; (80042bc <HAL_DMA_Abort_IT+0x3f0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d018      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HAL_DMA_Abort_IT+0x3f4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <HAL_DMA_Abort_IT+0x3f8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <HAL_DMA_Abort_IT+0x3fc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <HAL_DMA_Abort_IT+0x400>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_DMA_Abort_IT+0x3a2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_DMA_Abort_IT+0x404>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d132      	bne.n	80042d4 <HAL_DMA_Abort_IT+0x408>
 800426e:	2301      	movs	r3, #1
 8004270:	e031      	b.n	80042d6 <HAL_DMA_Abort_IT+0x40a>
 8004272:	bf00      	nop
 8004274:	40020010 	.word	0x40020010
 8004278:	40020028 	.word	0x40020028
 800427c:	40020040 	.word	0x40020040
 8004280:	40020058 	.word	0x40020058
 8004284:	40020070 	.word	0x40020070
 8004288:	40020088 	.word	0x40020088
 800428c:	400200a0 	.word	0x400200a0
 8004290:	400200b8 	.word	0x400200b8
 8004294:	40020410 	.word	0x40020410
 8004298:	40020428 	.word	0x40020428
 800429c:	40020440 	.word	0x40020440
 80042a0:	40020458 	.word	0x40020458
 80042a4:	40020470 	.word	0x40020470
 80042a8:	40020488 	.word	0x40020488
 80042ac:	400204a0 	.word	0x400204a0
 80042b0:	400204b8 	.word	0x400204b8
 80042b4:	58025408 	.word	0x58025408
 80042b8:	5802541c 	.word	0x5802541c
 80042bc:	58025430 	.word	0x58025430
 80042c0:	58025444 	.word	0x58025444
 80042c4:	58025458 	.word	0x58025458
 80042c8:	5802546c 	.word	0x5802546c
 80042cc:	58025480 	.word	0x58025480
 80042d0:	58025494 	.word	0x58025494
 80042d4:	2300      	movs	r3, #0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d028      	beq.n	800432c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	2201      	movs	r2, #1
 80042fa:	409a      	lsls	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004308:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00c      	beq.n	800432c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800431c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004320:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800432a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop

08004358 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004364:	4b67      	ldr	r3, [pc, #412]	; (8004504 <HAL_DMA_IRQHandler+0x1ac>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a67      	ldr	r2, [pc, #412]	; (8004508 <HAL_DMA_IRQHandler+0x1b0>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	0a9b      	lsrs	r3, r3, #10
 8004370:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a5f      	ldr	r2, [pc, #380]	; (800450c <HAL_DMA_IRQHandler+0x1b4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d04a      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5d      	ldr	r2, [pc, #372]	; (8004510 <HAL_DMA_IRQHandler+0x1b8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d045      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a5c      	ldr	r2, [pc, #368]	; (8004514 <HAL_DMA_IRQHandler+0x1bc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d040      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a5a      	ldr	r2, [pc, #360]	; (8004518 <HAL_DMA_IRQHandler+0x1c0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d03b      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a59      	ldr	r2, [pc, #356]	; (800451c <HAL_DMA_IRQHandler+0x1c4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d036      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a57      	ldr	r2, [pc, #348]	; (8004520 <HAL_DMA_IRQHandler+0x1c8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d031      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a56      	ldr	r2, [pc, #344]	; (8004524 <HAL_DMA_IRQHandler+0x1cc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d02c      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a54      	ldr	r2, [pc, #336]	; (8004528 <HAL_DMA_IRQHandler+0x1d0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d027      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a53      	ldr	r2, [pc, #332]	; (800452c <HAL_DMA_IRQHandler+0x1d4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d022      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a51      	ldr	r2, [pc, #324]	; (8004530 <HAL_DMA_IRQHandler+0x1d8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01d      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a50      	ldr	r2, [pc, #320]	; (8004534 <HAL_DMA_IRQHandler+0x1dc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d018      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a4e      	ldr	r2, [pc, #312]	; (8004538 <HAL_DMA_IRQHandler+0x1e0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4d      	ldr	r2, [pc, #308]	; (800453c <HAL_DMA_IRQHandler+0x1e4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a4b      	ldr	r2, [pc, #300]	; (8004540 <HAL_DMA_IRQHandler+0x1e8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a4a      	ldr	r2, [pc, #296]	; (8004544 <HAL_DMA_IRQHandler+0x1ec>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a48      	ldr	r2, [pc, #288]	; (8004548 <HAL_DMA_IRQHandler+0x1f0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d101      	bne.n	800442e <HAL_DMA_IRQHandler+0xd6>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <HAL_DMA_IRQHandler+0xd8>
 800442e:	2300      	movs	r3, #0
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 842b 	beq.w	8004c8c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2208      	movs	r2, #8
 8004440:	409a      	lsls	r2, r3
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80a2 	beq.w	8004590 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2e      	ldr	r2, [pc, #184]	; (800450c <HAL_DMA_IRQHandler+0x1b4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d04a      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2d      	ldr	r2, [pc, #180]	; (8004510 <HAL_DMA_IRQHandler+0x1b8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d045      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2b      	ldr	r2, [pc, #172]	; (8004514 <HAL_DMA_IRQHandler+0x1bc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d040      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2a      	ldr	r2, [pc, #168]	; (8004518 <HAL_DMA_IRQHandler+0x1c0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d03b      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a28      	ldr	r2, [pc, #160]	; (800451c <HAL_DMA_IRQHandler+0x1c4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d036      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a27      	ldr	r2, [pc, #156]	; (8004520 <HAL_DMA_IRQHandler+0x1c8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d031      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a25      	ldr	r2, [pc, #148]	; (8004524 <HAL_DMA_IRQHandler+0x1cc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d02c      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a24      	ldr	r2, [pc, #144]	; (8004528 <HAL_DMA_IRQHandler+0x1d0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d027      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a22      	ldr	r2, [pc, #136]	; (800452c <HAL_DMA_IRQHandler+0x1d4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d022      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a21      	ldr	r2, [pc, #132]	; (8004530 <HAL_DMA_IRQHandler+0x1d8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d01d      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1f      	ldr	r2, [pc, #124]	; (8004534 <HAL_DMA_IRQHandler+0x1dc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1e      	ldr	r2, [pc, #120]	; (8004538 <HAL_DMA_IRQHandler+0x1e0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1c      	ldr	r2, [pc, #112]	; (800453c <HAL_DMA_IRQHandler+0x1e4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1b      	ldr	r2, [pc, #108]	; (8004540 <HAL_DMA_IRQHandler+0x1e8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a19      	ldr	r2, [pc, #100]	; (8004544 <HAL_DMA_IRQHandler+0x1ec>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a18      	ldr	r2, [pc, #96]	; (8004548 <HAL_DMA_IRQHandler+0x1f0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d12f      	bne.n	800454c <HAL_DMA_IRQHandler+0x1f4>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	e02e      	b.n	8004560 <HAL_DMA_IRQHandler+0x208>
 8004502:	bf00      	nop
 8004504:	24000000 	.word	0x24000000
 8004508:	1b4e81b5 	.word	0x1b4e81b5
 800450c:	40020010 	.word	0x40020010
 8004510:	40020028 	.word	0x40020028
 8004514:	40020040 	.word	0x40020040
 8004518:	40020058 	.word	0x40020058
 800451c:	40020070 	.word	0x40020070
 8004520:	40020088 	.word	0x40020088
 8004524:	400200a0 	.word	0x400200a0
 8004528:	400200b8 	.word	0x400200b8
 800452c:	40020410 	.word	0x40020410
 8004530:	40020428 	.word	0x40020428
 8004534:	40020440 	.word	0x40020440
 8004538:	40020458 	.word	0x40020458
 800453c:	40020470 	.word	0x40020470
 8004540:	40020488 	.word	0x40020488
 8004544:	400204a0 	.word	0x400204a0
 8004548:	400204b8 	.word	0x400204b8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf14      	ite	ne
 800455a:	2301      	movne	r3, #1
 800455c:	2300      	moveq	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d015      	beq.n	8004590 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0204 	bic.w	r2, r2, #4
 8004572:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2208      	movs	r2, #8
 800457e:	409a      	lsls	r2, r3
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	fa22 f303 	lsr.w	r3, r2, r3
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d06e      	beq.n	8004684 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a69      	ldr	r2, [pc, #420]	; (8004750 <HAL_DMA_IRQHandler+0x3f8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d04a      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a67      	ldr	r2, [pc, #412]	; (8004754 <HAL_DMA_IRQHandler+0x3fc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d045      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a66      	ldr	r2, [pc, #408]	; (8004758 <HAL_DMA_IRQHandler+0x400>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d040      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a64      	ldr	r2, [pc, #400]	; (800475c <HAL_DMA_IRQHandler+0x404>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d03b      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a63      	ldr	r2, [pc, #396]	; (8004760 <HAL_DMA_IRQHandler+0x408>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d036      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a61      	ldr	r2, [pc, #388]	; (8004764 <HAL_DMA_IRQHandler+0x40c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d031      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a60      	ldr	r2, [pc, #384]	; (8004768 <HAL_DMA_IRQHandler+0x410>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d02c      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a5e      	ldr	r2, [pc, #376]	; (800476c <HAL_DMA_IRQHandler+0x414>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d027      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5d      	ldr	r2, [pc, #372]	; (8004770 <HAL_DMA_IRQHandler+0x418>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d022      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a5b      	ldr	r2, [pc, #364]	; (8004774 <HAL_DMA_IRQHandler+0x41c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d01d      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a5a      	ldr	r2, [pc, #360]	; (8004778 <HAL_DMA_IRQHandler+0x420>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d018      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a58      	ldr	r2, [pc, #352]	; (800477c <HAL_DMA_IRQHandler+0x424>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a57      	ldr	r2, [pc, #348]	; (8004780 <HAL_DMA_IRQHandler+0x428>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00e      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a55      	ldr	r2, [pc, #340]	; (8004784 <HAL_DMA_IRQHandler+0x42c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d009      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a54      	ldr	r2, [pc, #336]	; (8004788 <HAL_DMA_IRQHandler+0x430>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d004      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a52      	ldr	r2, [pc, #328]	; (800478c <HAL_DMA_IRQHandler+0x434>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d10a      	bne.n	800465c <HAL_DMA_IRQHandler+0x304>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e003      	b.n	8004664 <HAL_DMA_IRQHandler+0x30c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	2201      	movs	r2, #1
 8004672:	409a      	lsls	r2, r3
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	f043 0202 	orr.w	r2, r3, #2
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	2204      	movs	r2, #4
 800468e:	409a      	lsls	r2, r3
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 808f 	beq.w	80047b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <HAL_DMA_IRQHandler+0x3f8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d04a      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a2a      	ldr	r2, [pc, #168]	; (8004754 <HAL_DMA_IRQHandler+0x3fc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d045      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a29      	ldr	r2, [pc, #164]	; (8004758 <HAL_DMA_IRQHandler+0x400>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d040      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a27      	ldr	r2, [pc, #156]	; (800475c <HAL_DMA_IRQHandler+0x404>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d03b      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a26      	ldr	r2, [pc, #152]	; (8004760 <HAL_DMA_IRQHandler+0x408>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d036      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a24      	ldr	r2, [pc, #144]	; (8004764 <HAL_DMA_IRQHandler+0x40c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d031      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a23      	ldr	r2, [pc, #140]	; (8004768 <HAL_DMA_IRQHandler+0x410>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d02c      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a21      	ldr	r2, [pc, #132]	; (800476c <HAL_DMA_IRQHandler+0x414>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d027      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a20      	ldr	r2, [pc, #128]	; (8004770 <HAL_DMA_IRQHandler+0x418>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d022      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <HAL_DMA_IRQHandler+0x41c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01d      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <HAL_DMA_IRQHandler+0x420>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d018      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1b      	ldr	r2, [pc, #108]	; (800477c <HAL_DMA_IRQHandler+0x424>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1a      	ldr	r2, [pc, #104]	; (8004780 <HAL_DMA_IRQHandler+0x428>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a18      	ldr	r2, [pc, #96]	; (8004784 <HAL_DMA_IRQHandler+0x42c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a17      	ldr	r2, [pc, #92]	; (8004788 <HAL_DMA_IRQHandler+0x430>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a15      	ldr	r2, [pc, #84]	; (800478c <HAL_DMA_IRQHandler+0x434>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d12a      	bne.n	8004790 <HAL_DMA_IRQHandler+0x438>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e023      	b.n	8004798 <HAL_DMA_IRQHandler+0x440>
 8004750:	40020010 	.word	0x40020010
 8004754:	40020028 	.word	0x40020028
 8004758:	40020040 	.word	0x40020040
 800475c:	40020058 	.word	0x40020058
 8004760:	40020070 	.word	0x40020070
 8004764:	40020088 	.word	0x40020088
 8004768:	400200a0 	.word	0x400200a0
 800476c:	400200b8 	.word	0x400200b8
 8004770:	40020410 	.word	0x40020410
 8004774:	40020428 	.word	0x40020428
 8004778:	40020440 	.word	0x40020440
 800477c:	40020458 	.word	0x40020458
 8004780:	40020470 	.word	0x40020470
 8004784:	40020488 	.word	0x40020488
 8004788:	400204a0 	.word	0x400204a0
 800478c:	400204b8 	.word	0x400204b8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2204      	movs	r2, #4
 80047a6:	409a      	lsls	r2, r3
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f043 0204 	orr.w	r2, r3, #4
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	2210      	movs	r2, #16
 80047c2:	409a      	lsls	r2, r3
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80a6 	beq.w	800491a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a85      	ldr	r2, [pc, #532]	; (80049e8 <HAL_DMA_IRQHandler+0x690>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d04a      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a83      	ldr	r2, [pc, #524]	; (80049ec <HAL_DMA_IRQHandler+0x694>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d045      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a82      	ldr	r2, [pc, #520]	; (80049f0 <HAL_DMA_IRQHandler+0x698>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d040      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a80      	ldr	r2, [pc, #512]	; (80049f4 <HAL_DMA_IRQHandler+0x69c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d03b      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7f      	ldr	r2, [pc, #508]	; (80049f8 <HAL_DMA_IRQHandler+0x6a0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d036      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a7d      	ldr	r2, [pc, #500]	; (80049fc <HAL_DMA_IRQHandler+0x6a4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d031      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a7c      	ldr	r2, [pc, #496]	; (8004a00 <HAL_DMA_IRQHandler+0x6a8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d02c      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a7a      	ldr	r2, [pc, #488]	; (8004a04 <HAL_DMA_IRQHandler+0x6ac>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d027      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a79      	ldr	r2, [pc, #484]	; (8004a08 <HAL_DMA_IRQHandler+0x6b0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d022      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a77      	ldr	r2, [pc, #476]	; (8004a0c <HAL_DMA_IRQHandler+0x6b4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01d      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a76      	ldr	r2, [pc, #472]	; (8004a10 <HAL_DMA_IRQHandler+0x6b8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d018      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a74      	ldr	r2, [pc, #464]	; (8004a14 <HAL_DMA_IRQHandler+0x6bc>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a73      	ldr	r2, [pc, #460]	; (8004a18 <HAL_DMA_IRQHandler+0x6c0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a71      	ldr	r2, [pc, #452]	; (8004a1c <HAL_DMA_IRQHandler+0x6c4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a70      	ldr	r2, [pc, #448]	; (8004a20 <HAL_DMA_IRQHandler+0x6c8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a6e      	ldr	r2, [pc, #440]	; (8004a24 <HAL_DMA_IRQHandler+0x6cc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d10a      	bne.n	8004884 <HAL_DMA_IRQHandler+0x52c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e009      	b.n	8004898 <HAL_DMA_IRQHandler+0x540>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf14      	ite	ne
 8004892:	2301      	movne	r3, #1
 8004894:	2300      	moveq	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d03e      	beq.n	800491a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	2210      	movs	r2, #16
 80048a6:	409a      	lsls	r2, r3
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d018      	beq.n	80048ec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d108      	bne.n	80048da <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d024      	beq.n	800491a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
 80048d8:	e01f      	b.n	800491a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01b      	beq.n	800491a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
 80048ea:	e016      	b.n	800491a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d107      	bne.n	800490a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0208 	bic.w	r2, r2, #8
 8004908:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	2220      	movs	r2, #32
 8004924:	409a      	lsls	r2, r3
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 8110 	beq.w	8004b50 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a2c      	ldr	r2, [pc, #176]	; (80049e8 <HAL_DMA_IRQHandler+0x690>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d04a      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a2b      	ldr	r2, [pc, #172]	; (80049ec <HAL_DMA_IRQHandler+0x694>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d045      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a29      	ldr	r2, [pc, #164]	; (80049f0 <HAL_DMA_IRQHandler+0x698>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d040      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a28      	ldr	r2, [pc, #160]	; (80049f4 <HAL_DMA_IRQHandler+0x69c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d03b      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a26      	ldr	r2, [pc, #152]	; (80049f8 <HAL_DMA_IRQHandler+0x6a0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d036      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a25      	ldr	r2, [pc, #148]	; (80049fc <HAL_DMA_IRQHandler+0x6a4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d031      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a23      	ldr	r2, [pc, #140]	; (8004a00 <HAL_DMA_IRQHandler+0x6a8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02c      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a22      	ldr	r2, [pc, #136]	; (8004a04 <HAL_DMA_IRQHandler+0x6ac>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d027      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <HAL_DMA_IRQHandler+0x6b0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <HAL_DMA_IRQHandler+0x6b4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d01d      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1d      	ldr	r2, [pc, #116]	; (8004a10 <HAL_DMA_IRQHandler+0x6b8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1c      	ldr	r2, [pc, #112]	; (8004a14 <HAL_DMA_IRQHandler+0x6bc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1a      	ldr	r2, [pc, #104]	; (8004a18 <HAL_DMA_IRQHandler+0x6c0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a19      	ldr	r2, [pc, #100]	; (8004a1c <HAL_DMA_IRQHandler+0x6c4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <HAL_DMA_IRQHandler+0x6c8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <HAL_DMA_IRQHandler+0x6cc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d12b      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x6d0>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bf14      	ite	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	2300      	moveq	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	e02a      	b.n	8004a3c <HAL_DMA_IRQHandler+0x6e4>
 80049e6:	bf00      	nop
 80049e8:	40020010 	.word	0x40020010
 80049ec:	40020028 	.word	0x40020028
 80049f0:	40020040 	.word	0x40020040
 80049f4:	40020058 	.word	0x40020058
 80049f8:	40020070 	.word	0x40020070
 80049fc:	40020088 	.word	0x40020088
 8004a00:	400200a0 	.word	0x400200a0
 8004a04:	400200b8 	.word	0x400200b8
 8004a08:	40020410 	.word	0x40020410
 8004a0c:	40020428 	.word	0x40020428
 8004a10:	40020440 	.word	0x40020440
 8004a14:	40020458 	.word	0x40020458
 8004a18:	40020470 	.word	0x40020470
 8004a1c:	40020488 	.word	0x40020488
 8004a20:	400204a0 	.word	0x400204a0
 8004a24:	400204b8 	.word	0x400204b8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf14      	ite	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	2300      	moveq	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8087 	beq.w	8004b50 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d139      	bne.n	8004ad2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0216 	bic.w	r2, r2, #22
 8004a6c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a7c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d103      	bne.n	8004a8e <HAL_DMA_IRQHandler+0x736>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0208 	bic.w	r2, r2, #8
 8004a9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	223f      	movs	r2, #63	; 0x3f
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 834a 	beq.w	800515c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	4798      	blx	r3
          }
          return;
 8004ad0:	e344      	b.n	800515c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d018      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d108      	bne.n	8004b00 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d02c      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	4798      	blx	r3
 8004afe:	e027      	b.n	8004b50 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d023      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
 8004b10:	e01e      	b.n	8004b50 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10f      	bne.n	8004b40 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0210 	bic.w	r2, r2, #16
 8004b2e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8306 	beq.w	8005166 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 8088 	beq.w	8004c78 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a7a      	ldr	r2, [pc, #488]	; (8004d60 <HAL_DMA_IRQHandler+0xa08>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d04a      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a79      	ldr	r2, [pc, #484]	; (8004d64 <HAL_DMA_IRQHandler+0xa0c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d045      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a77      	ldr	r2, [pc, #476]	; (8004d68 <HAL_DMA_IRQHandler+0xa10>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d040      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a76      	ldr	r2, [pc, #472]	; (8004d6c <HAL_DMA_IRQHandler+0xa14>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d03b      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a74      	ldr	r2, [pc, #464]	; (8004d70 <HAL_DMA_IRQHandler+0xa18>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d036      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a73      	ldr	r2, [pc, #460]	; (8004d74 <HAL_DMA_IRQHandler+0xa1c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d031      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a71      	ldr	r2, [pc, #452]	; (8004d78 <HAL_DMA_IRQHandler+0xa20>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d02c      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a70      	ldr	r2, [pc, #448]	; (8004d7c <HAL_DMA_IRQHandler+0xa24>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d027      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a6e      	ldr	r2, [pc, #440]	; (8004d80 <HAL_DMA_IRQHandler+0xa28>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d022      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a6d      	ldr	r2, [pc, #436]	; (8004d84 <HAL_DMA_IRQHandler+0xa2c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d01d      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a6b      	ldr	r2, [pc, #428]	; (8004d88 <HAL_DMA_IRQHandler+0xa30>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d018      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a6a      	ldr	r2, [pc, #424]	; (8004d8c <HAL_DMA_IRQHandler+0xa34>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a68      	ldr	r2, [pc, #416]	; (8004d90 <HAL_DMA_IRQHandler+0xa38>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00e      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a67      	ldr	r2, [pc, #412]	; (8004d94 <HAL_DMA_IRQHandler+0xa3c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a65      	ldr	r2, [pc, #404]	; (8004d98 <HAL_DMA_IRQHandler+0xa40>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a64      	ldr	r2, [pc, #400]	; (8004d9c <HAL_DMA_IRQHandler+0xa44>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d108      	bne.n	8004c22 <HAL_DMA_IRQHandler+0x8ca>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0201 	bic.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e007      	b.n	8004c32 <HAL_DMA_IRQHandler+0x8da>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3301      	adds	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d307      	bcc.n	8004c4e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f2      	bne.n	8004c32 <HAL_DMA_IRQHandler+0x8da>
 8004c4c:	e000      	b.n	8004c50 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c4e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2203      	movs	r2, #3
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c66:	e003      	b.n	8004c70 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8272 	beq.w	8005166 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	4798      	blx	r3
 8004c8a:	e26c      	b.n	8005166 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a43      	ldr	r2, [pc, #268]	; (8004da0 <HAL_DMA_IRQHandler+0xa48>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d022      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a42      	ldr	r2, [pc, #264]	; (8004da4 <HAL_DMA_IRQHandler+0xa4c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d01d      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a40      	ldr	r2, [pc, #256]	; (8004da8 <HAL_DMA_IRQHandler+0xa50>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d018      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a3f      	ldr	r2, [pc, #252]	; (8004dac <HAL_DMA_IRQHandler+0xa54>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a3d      	ldr	r2, [pc, #244]	; (8004db0 <HAL_DMA_IRQHandler+0xa58>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00e      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a3c      	ldr	r2, [pc, #240]	; (8004db4 <HAL_DMA_IRQHandler+0xa5c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a3a      	ldr	r2, [pc, #232]	; (8004db8 <HAL_DMA_IRQHandler+0xa60>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a39      	ldr	r2, [pc, #228]	; (8004dbc <HAL_DMA_IRQHandler+0xa64>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d101      	bne.n	8004ce0 <HAL_DMA_IRQHandler+0x988>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <HAL_DMA_IRQHandler+0x98a>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 823f 	beq.w	8005166 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80cd 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0xb48>
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80c7 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d049      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8210 	beq.w	8005160 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d48:	e20a      	b.n	8005160 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8206 	beq.w	8005160 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d5c:	e200      	b.n	8005160 <HAL_DMA_IRQHandler+0xe08>
 8004d5e:	bf00      	nop
 8004d60:	40020010 	.word	0x40020010
 8004d64:	40020028 	.word	0x40020028
 8004d68:	40020040 	.word	0x40020040
 8004d6c:	40020058 	.word	0x40020058
 8004d70:	40020070 	.word	0x40020070
 8004d74:	40020088 	.word	0x40020088
 8004d78:	400200a0 	.word	0x400200a0
 8004d7c:	400200b8 	.word	0x400200b8
 8004d80:	40020410 	.word	0x40020410
 8004d84:	40020428 	.word	0x40020428
 8004d88:	40020440 	.word	0x40020440
 8004d8c:	40020458 	.word	0x40020458
 8004d90:	40020470 	.word	0x40020470
 8004d94:	40020488 	.word	0x40020488
 8004d98:	400204a0 	.word	0x400204a0
 8004d9c:	400204b8 	.word	0x400204b8
 8004da0:	58025408 	.word	0x58025408
 8004da4:	5802541c 	.word	0x5802541c
 8004da8:	58025430 	.word	0x58025430
 8004dac:	58025444 	.word	0x58025444
 8004db0:	58025458 	.word	0x58025458
 8004db4:	5802546c 	.word	0x5802546c
 8004db8:	58025480 	.word	0x58025480
 8004dbc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d160      	bne.n	8004e8c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7f      	ldr	r2, [pc, #508]	; (8004fcc <HAL_DMA_IRQHandler+0xc74>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d04a      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a7d      	ldr	r2, [pc, #500]	; (8004fd0 <HAL_DMA_IRQHandler+0xc78>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d045      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a7c      	ldr	r2, [pc, #496]	; (8004fd4 <HAL_DMA_IRQHandler+0xc7c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d040      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a7a      	ldr	r2, [pc, #488]	; (8004fd8 <HAL_DMA_IRQHandler+0xc80>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d03b      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a79      	ldr	r2, [pc, #484]	; (8004fdc <HAL_DMA_IRQHandler+0xc84>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d036      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a77      	ldr	r2, [pc, #476]	; (8004fe0 <HAL_DMA_IRQHandler+0xc88>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d031      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a76      	ldr	r2, [pc, #472]	; (8004fe4 <HAL_DMA_IRQHandler+0xc8c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d02c      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a74      	ldr	r2, [pc, #464]	; (8004fe8 <HAL_DMA_IRQHandler+0xc90>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d027      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a73      	ldr	r2, [pc, #460]	; (8004fec <HAL_DMA_IRQHandler+0xc94>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a71      	ldr	r2, [pc, #452]	; (8004ff0 <HAL_DMA_IRQHandler+0xc98>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01d      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a70      	ldr	r2, [pc, #448]	; (8004ff4 <HAL_DMA_IRQHandler+0xc9c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a6e      	ldr	r2, [pc, #440]	; (8004ff8 <HAL_DMA_IRQHandler+0xca0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a6d      	ldr	r2, [pc, #436]	; (8004ffc <HAL_DMA_IRQHandler+0xca4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a6b      	ldr	r2, [pc, #428]	; (8005000 <HAL_DMA_IRQHandler+0xca8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a6a      	ldr	r2, [pc, #424]	; (8005004 <HAL_DMA_IRQHandler+0xcac>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a68      	ldr	r2, [pc, #416]	; (8005008 <HAL_DMA_IRQHandler+0xcb0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <HAL_DMA_IRQHandler+0xb24>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0208 	bic.w	r2, r2, #8
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e007      	b.n	8004e8c <HAL_DMA_IRQHandler+0xb34>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0204 	bic.w	r2, r2, #4
 8004e8a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8165 	beq.w	8005160 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e9e:	e15f      	b.n	8005160 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80c5 	beq.w	8005040 <HAL_DMA_IRQHandler+0xce8>
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80bf 	beq.w	8005040 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	2202      	movs	r2, #2
 8004ecc:	409a      	lsls	r2, r3
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d018      	beq.n	8004f0e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 813a 	beq.w	8005164 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ef8:	e134      	b.n	8005164 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 8130 	beq.w	8005164 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f0c:	e12a      	b.n	8005164 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 8089 	bne.w	800502c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2b      	ldr	r2, [pc, #172]	; (8004fcc <HAL_DMA_IRQHandler+0xc74>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d04a      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a29      	ldr	r2, [pc, #164]	; (8004fd0 <HAL_DMA_IRQHandler+0xc78>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d045      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a28      	ldr	r2, [pc, #160]	; (8004fd4 <HAL_DMA_IRQHandler+0xc7c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d040      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <HAL_DMA_IRQHandler+0xc80>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d03b      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a25      	ldr	r2, [pc, #148]	; (8004fdc <HAL_DMA_IRQHandler+0xc84>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d036      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a23      	ldr	r2, [pc, #140]	; (8004fe0 <HAL_DMA_IRQHandler+0xc88>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d031      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <HAL_DMA_IRQHandler+0xc8c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d02c      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <HAL_DMA_IRQHandler+0xc90>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d027      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_DMA_IRQHandler+0xc94>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d022      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <HAL_DMA_IRQHandler+0xc98>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01d      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1c      	ldr	r2, [pc, #112]	; (8004ff4 <HAL_DMA_IRQHandler+0xc9c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d018      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <HAL_DMA_IRQHandler+0xca0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <HAL_DMA_IRQHandler+0xca4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a17      	ldr	r2, [pc, #92]	; (8005000 <HAL_DMA_IRQHandler+0xca8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a16      	ldr	r2, [pc, #88]	; (8005004 <HAL_DMA_IRQHandler+0xcac>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a14      	ldr	r2, [pc, #80]	; (8005008 <HAL_DMA_IRQHandler+0xcb0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d128      	bne.n	800500c <HAL_DMA_IRQHandler+0xcb4>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0214 	bic.w	r2, r2, #20
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e027      	b.n	800501c <HAL_DMA_IRQHandler+0xcc4>
 8004fcc:	40020010 	.word	0x40020010
 8004fd0:	40020028 	.word	0x40020028
 8004fd4:	40020040 	.word	0x40020040
 8004fd8:	40020058 	.word	0x40020058
 8004fdc:	40020070 	.word	0x40020070
 8004fe0:	40020088 	.word	0x40020088
 8004fe4:	400200a0 	.word	0x400200a0
 8004fe8:	400200b8 	.word	0x400200b8
 8004fec:	40020410 	.word	0x40020410
 8004ff0:	40020428 	.word	0x40020428
 8004ff4:	40020440 	.word	0x40020440
 8004ff8:	40020458 	.word	0x40020458
 8004ffc:	40020470 	.word	0x40020470
 8005000:	40020488 	.word	0x40020488
 8005004:	400204a0 	.word	0x400204a0
 8005008:	400204b8 	.word	0x400204b8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 020a 	bic.w	r2, r2, #10
 800501a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8097 	beq.w	8005164 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800503e:	e091      	b.n	8005164 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	2208      	movs	r2, #8
 800504a:	409a      	lsls	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	4013      	ands	r3, r2
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8088 	beq.w	8005166 <HAL_DMA_IRQHandler+0xe0e>
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8082 	beq.w	8005166 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a41      	ldr	r2, [pc, #260]	; (800516c <HAL_DMA_IRQHandler+0xe14>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d04a      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a3f      	ldr	r2, [pc, #252]	; (8005170 <HAL_DMA_IRQHandler+0xe18>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d045      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a3e      	ldr	r2, [pc, #248]	; (8005174 <HAL_DMA_IRQHandler+0xe1c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d040      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a3c      	ldr	r2, [pc, #240]	; (8005178 <HAL_DMA_IRQHandler+0xe20>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d03b      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a3b      	ldr	r2, [pc, #236]	; (800517c <HAL_DMA_IRQHandler+0xe24>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d036      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a39      	ldr	r2, [pc, #228]	; (8005180 <HAL_DMA_IRQHandler+0xe28>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d031      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a38      	ldr	r2, [pc, #224]	; (8005184 <HAL_DMA_IRQHandler+0xe2c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d02c      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a36      	ldr	r2, [pc, #216]	; (8005188 <HAL_DMA_IRQHandler+0xe30>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d027      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a35      	ldr	r2, [pc, #212]	; (800518c <HAL_DMA_IRQHandler+0xe34>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d022      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a33      	ldr	r2, [pc, #204]	; (8005190 <HAL_DMA_IRQHandler+0xe38>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01d      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a32      	ldr	r2, [pc, #200]	; (8005194 <HAL_DMA_IRQHandler+0xe3c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d018      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a30      	ldr	r2, [pc, #192]	; (8005198 <HAL_DMA_IRQHandler+0xe40>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a2f      	ldr	r2, [pc, #188]	; (800519c <HAL_DMA_IRQHandler+0xe44>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00e      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2d      	ldr	r2, [pc, #180]	; (80051a0 <HAL_DMA_IRQHandler+0xe48>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d009      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2c      	ldr	r2, [pc, #176]	; (80051a4 <HAL_DMA_IRQHandler+0xe4c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d004      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a2a      	ldr	r2, [pc, #168]	; (80051a8 <HAL_DMA_IRQHandler+0xe50>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d108      	bne.n	8005114 <HAL_DMA_IRQHandler+0xdbc>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 021c 	bic.w	r2, r2, #28
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	e007      	b.n	8005124 <HAL_DMA_IRQHandler+0xdcc>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 020e 	bic.w	r2, r2, #14
 8005122:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	2201      	movs	r2, #1
 800512e:	409a      	lsls	r2, r3
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	4798      	blx	r3
 800515a:	e004      	b.n	8005166 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800515c:	bf00      	nop
 800515e:	e002      	b.n	8005166 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005160:	bf00      	nop
 8005162:	e000      	b.n	8005166 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005164:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005166:	3728      	adds	r7, #40	; 0x28
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40020010 	.word	0x40020010
 8005170:	40020028 	.word	0x40020028
 8005174:	40020040 	.word	0x40020040
 8005178:	40020058 	.word	0x40020058
 800517c:	40020070 	.word	0x40020070
 8005180:	40020088 	.word	0x40020088
 8005184:	400200a0 	.word	0x400200a0
 8005188:	400200b8 	.word	0x400200b8
 800518c:	40020410 	.word	0x40020410
 8005190:	40020428 	.word	0x40020428
 8005194:	40020440 	.word	0x40020440
 8005198:	40020458 	.word	0x40020458
 800519c:	40020470 	.word	0x40020470
 80051a0:	40020488 	.word	0x40020488
 80051a4:	400204a0 	.word	0x400204a0
 80051a8:	400204b8 	.word	0x400204b8

080051ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a7f      	ldr	r2, [pc, #508]	; (80053c8 <DMA_SetConfig+0x21c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d072      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a7d      	ldr	r2, [pc, #500]	; (80053cc <DMA_SetConfig+0x220>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d06d      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a7c      	ldr	r2, [pc, #496]	; (80053d0 <DMA_SetConfig+0x224>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d068      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a7a      	ldr	r2, [pc, #488]	; (80053d4 <DMA_SetConfig+0x228>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d063      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a79      	ldr	r2, [pc, #484]	; (80053d8 <DMA_SetConfig+0x22c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d05e      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a77      	ldr	r2, [pc, #476]	; (80053dc <DMA_SetConfig+0x230>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d059      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a76      	ldr	r2, [pc, #472]	; (80053e0 <DMA_SetConfig+0x234>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d054      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a74      	ldr	r2, [pc, #464]	; (80053e4 <DMA_SetConfig+0x238>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d04f      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a73      	ldr	r2, [pc, #460]	; (80053e8 <DMA_SetConfig+0x23c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d04a      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a71      	ldr	r2, [pc, #452]	; (80053ec <DMA_SetConfig+0x240>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d045      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a70      	ldr	r2, [pc, #448]	; (80053f0 <DMA_SetConfig+0x244>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d040      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a6e      	ldr	r2, [pc, #440]	; (80053f4 <DMA_SetConfig+0x248>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d03b      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6d      	ldr	r2, [pc, #436]	; (80053f8 <DMA_SetConfig+0x24c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d036      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a6b      	ldr	r2, [pc, #428]	; (80053fc <DMA_SetConfig+0x250>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d031      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a6a      	ldr	r2, [pc, #424]	; (8005400 <DMA_SetConfig+0x254>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d02c      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a68      	ldr	r2, [pc, #416]	; (8005404 <DMA_SetConfig+0x258>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d027      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a67      	ldr	r2, [pc, #412]	; (8005408 <DMA_SetConfig+0x25c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d022      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a65      	ldr	r2, [pc, #404]	; (800540c <DMA_SetConfig+0x260>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d01d      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a64      	ldr	r2, [pc, #400]	; (8005410 <DMA_SetConfig+0x264>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a62      	ldr	r2, [pc, #392]	; (8005414 <DMA_SetConfig+0x268>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a61      	ldr	r2, [pc, #388]	; (8005418 <DMA_SetConfig+0x26c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a5f      	ldr	r2, [pc, #380]	; (800541c <DMA_SetConfig+0x270>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a5e      	ldr	r2, [pc, #376]	; (8005420 <DMA_SetConfig+0x274>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <DMA_SetConfig+0x10a>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a5c      	ldr	r2, [pc, #368]	; (8005424 <DMA_SetConfig+0x278>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d101      	bne.n	80052ba <DMA_SetConfig+0x10e>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <DMA_SetConfig+0x110>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00d      	beq.n	80052dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d004      	beq.n	80052dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a39      	ldr	r2, [pc, #228]	; (80053c8 <DMA_SetConfig+0x21c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d04a      	beq.n	800537c <DMA_SetConfig+0x1d0>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a38      	ldr	r2, [pc, #224]	; (80053cc <DMA_SetConfig+0x220>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d045      	beq.n	800537c <DMA_SetConfig+0x1d0>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a36      	ldr	r2, [pc, #216]	; (80053d0 <DMA_SetConfig+0x224>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d040      	beq.n	800537c <DMA_SetConfig+0x1d0>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a35      	ldr	r2, [pc, #212]	; (80053d4 <DMA_SetConfig+0x228>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d03b      	beq.n	800537c <DMA_SetConfig+0x1d0>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a33      	ldr	r2, [pc, #204]	; (80053d8 <DMA_SetConfig+0x22c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d036      	beq.n	800537c <DMA_SetConfig+0x1d0>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a32      	ldr	r2, [pc, #200]	; (80053dc <DMA_SetConfig+0x230>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d031      	beq.n	800537c <DMA_SetConfig+0x1d0>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a30      	ldr	r2, [pc, #192]	; (80053e0 <DMA_SetConfig+0x234>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d02c      	beq.n	800537c <DMA_SetConfig+0x1d0>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a2f      	ldr	r2, [pc, #188]	; (80053e4 <DMA_SetConfig+0x238>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d027      	beq.n	800537c <DMA_SetConfig+0x1d0>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2d      	ldr	r2, [pc, #180]	; (80053e8 <DMA_SetConfig+0x23c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d022      	beq.n	800537c <DMA_SetConfig+0x1d0>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2c      	ldr	r2, [pc, #176]	; (80053ec <DMA_SetConfig+0x240>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d01d      	beq.n	800537c <DMA_SetConfig+0x1d0>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a2a      	ldr	r2, [pc, #168]	; (80053f0 <DMA_SetConfig+0x244>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d018      	beq.n	800537c <DMA_SetConfig+0x1d0>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a29      	ldr	r2, [pc, #164]	; (80053f4 <DMA_SetConfig+0x248>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d013      	beq.n	800537c <DMA_SetConfig+0x1d0>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a27      	ldr	r2, [pc, #156]	; (80053f8 <DMA_SetConfig+0x24c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00e      	beq.n	800537c <DMA_SetConfig+0x1d0>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a26      	ldr	r2, [pc, #152]	; (80053fc <DMA_SetConfig+0x250>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d009      	beq.n	800537c <DMA_SetConfig+0x1d0>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a24      	ldr	r2, [pc, #144]	; (8005400 <DMA_SetConfig+0x254>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d004      	beq.n	800537c <DMA_SetConfig+0x1d0>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a23      	ldr	r2, [pc, #140]	; (8005404 <DMA_SetConfig+0x258>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d101      	bne.n	8005380 <DMA_SetConfig+0x1d4>
 800537c:	2301      	movs	r3, #1
 800537e:	e000      	b.n	8005382 <DMA_SetConfig+0x1d6>
 8005380:	2300      	movs	r3, #0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d059      	beq.n	800543a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	223f      	movs	r2, #63	; 0x3f
 8005390:	409a      	lsls	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	2b40      	cmp	r3, #64	; 0x40
 80053b4:	d138      	bne.n	8005428 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053c6:	e086      	b.n	80054d6 <DMA_SetConfig+0x32a>
 80053c8:	40020010 	.word	0x40020010
 80053cc:	40020028 	.word	0x40020028
 80053d0:	40020040 	.word	0x40020040
 80053d4:	40020058 	.word	0x40020058
 80053d8:	40020070 	.word	0x40020070
 80053dc:	40020088 	.word	0x40020088
 80053e0:	400200a0 	.word	0x400200a0
 80053e4:	400200b8 	.word	0x400200b8
 80053e8:	40020410 	.word	0x40020410
 80053ec:	40020428 	.word	0x40020428
 80053f0:	40020440 	.word	0x40020440
 80053f4:	40020458 	.word	0x40020458
 80053f8:	40020470 	.word	0x40020470
 80053fc:	40020488 	.word	0x40020488
 8005400:	400204a0 	.word	0x400204a0
 8005404:	400204b8 	.word	0x400204b8
 8005408:	58025408 	.word	0x58025408
 800540c:	5802541c 	.word	0x5802541c
 8005410:	58025430 	.word	0x58025430
 8005414:	58025444 	.word	0x58025444
 8005418:	58025458 	.word	0x58025458
 800541c:	5802546c 	.word	0x5802546c
 8005420:	58025480 	.word	0x58025480
 8005424:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	60da      	str	r2, [r3, #12]
}
 8005438:	e04d      	b.n	80054d6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a29      	ldr	r2, [pc, #164]	; (80054e4 <DMA_SetConfig+0x338>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d022      	beq.n	800548a <DMA_SetConfig+0x2de>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a27      	ldr	r2, [pc, #156]	; (80054e8 <DMA_SetConfig+0x33c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01d      	beq.n	800548a <DMA_SetConfig+0x2de>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a26      	ldr	r2, [pc, #152]	; (80054ec <DMA_SetConfig+0x340>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d018      	beq.n	800548a <DMA_SetConfig+0x2de>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a24      	ldr	r2, [pc, #144]	; (80054f0 <DMA_SetConfig+0x344>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <DMA_SetConfig+0x2de>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a23      	ldr	r2, [pc, #140]	; (80054f4 <DMA_SetConfig+0x348>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00e      	beq.n	800548a <DMA_SetConfig+0x2de>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a21      	ldr	r2, [pc, #132]	; (80054f8 <DMA_SetConfig+0x34c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <DMA_SetConfig+0x2de>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a20      	ldr	r2, [pc, #128]	; (80054fc <DMA_SetConfig+0x350>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <DMA_SetConfig+0x2de>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1e      	ldr	r2, [pc, #120]	; (8005500 <DMA_SetConfig+0x354>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d101      	bne.n	800548e <DMA_SetConfig+0x2e2>
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <DMA_SetConfig+0x2e4>
 800548e:	2300      	movs	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d020      	beq.n	80054d6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	2201      	movs	r2, #1
 800549e:	409a      	lsls	r2, r3
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d108      	bne.n	80054c6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	60da      	str	r2, [r3, #12]
}
 80054c4:	e007      	b.n	80054d6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	60da      	str	r2, [r3, #12]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	58025408 	.word	0x58025408
 80054e8:	5802541c 	.word	0x5802541c
 80054ec:	58025430 	.word	0x58025430
 80054f0:	58025444 	.word	0x58025444
 80054f4:	58025458 	.word	0x58025458
 80054f8:	5802546c 	.word	0x5802546c
 80054fc:	58025480 	.word	0x58025480
 8005500:	58025494 	.word	0x58025494

08005504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a42      	ldr	r2, [pc, #264]	; (800561c <DMA_CalcBaseAndBitshift+0x118>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d04a      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a41      	ldr	r2, [pc, #260]	; (8005620 <DMA_CalcBaseAndBitshift+0x11c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d045      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a3f      	ldr	r2, [pc, #252]	; (8005624 <DMA_CalcBaseAndBitshift+0x120>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d040      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a3e      	ldr	r2, [pc, #248]	; (8005628 <DMA_CalcBaseAndBitshift+0x124>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d03b      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a3c      	ldr	r2, [pc, #240]	; (800562c <DMA_CalcBaseAndBitshift+0x128>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d036      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a3b      	ldr	r2, [pc, #236]	; (8005630 <DMA_CalcBaseAndBitshift+0x12c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d031      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a39      	ldr	r2, [pc, #228]	; (8005634 <DMA_CalcBaseAndBitshift+0x130>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d02c      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a38      	ldr	r2, [pc, #224]	; (8005638 <DMA_CalcBaseAndBitshift+0x134>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d027      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a36      	ldr	r2, [pc, #216]	; (800563c <DMA_CalcBaseAndBitshift+0x138>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d022      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a35      	ldr	r2, [pc, #212]	; (8005640 <DMA_CalcBaseAndBitshift+0x13c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d01d      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a33      	ldr	r2, [pc, #204]	; (8005644 <DMA_CalcBaseAndBitshift+0x140>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d018      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a32      	ldr	r2, [pc, #200]	; (8005648 <DMA_CalcBaseAndBitshift+0x144>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d013      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a30      	ldr	r2, [pc, #192]	; (800564c <DMA_CalcBaseAndBitshift+0x148>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00e      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2f      	ldr	r2, [pc, #188]	; (8005650 <DMA_CalcBaseAndBitshift+0x14c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2d      	ldr	r2, [pc, #180]	; (8005654 <DMA_CalcBaseAndBitshift+0x150>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <DMA_CalcBaseAndBitshift+0xa8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a2c      	ldr	r2, [pc, #176]	; (8005658 <DMA_CalcBaseAndBitshift+0x154>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d101      	bne.n	80055b0 <DMA_CalcBaseAndBitshift+0xac>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <DMA_CalcBaseAndBitshift+0xae>
 80055b0:	2300      	movs	r3, #0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d024      	beq.n	8005600 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	3b10      	subs	r3, #16
 80055be:	4a27      	ldr	r2, [pc, #156]	; (800565c <DMA_CalcBaseAndBitshift+0x158>)
 80055c0:	fba2 2303 	umull	r2, r3, r2, r3
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	4a24      	ldr	r2, [pc, #144]	; (8005660 <DMA_CalcBaseAndBitshift+0x15c>)
 80055d0:	5cd3      	ldrb	r3, [r2, r3]
 80055d2:	461a      	mov	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d908      	bls.n	80055f0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	4b1f      	ldr	r3, [pc, #124]	; (8005664 <DMA_CalcBaseAndBitshift+0x160>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	1d1a      	adds	r2, r3, #4
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	659a      	str	r2, [r3, #88]	; 0x58
 80055ee:	e00d      	b.n	800560c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <DMA_CalcBaseAndBitshift+0x160>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6593      	str	r3, [r2, #88]	; 0x58
 80055fe:	e005      	b.n	800560c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40020010 	.word	0x40020010
 8005620:	40020028 	.word	0x40020028
 8005624:	40020040 	.word	0x40020040
 8005628:	40020058 	.word	0x40020058
 800562c:	40020070 	.word	0x40020070
 8005630:	40020088 	.word	0x40020088
 8005634:	400200a0 	.word	0x400200a0
 8005638:	400200b8 	.word	0x400200b8
 800563c:	40020410 	.word	0x40020410
 8005640:	40020428 	.word	0x40020428
 8005644:	40020440 	.word	0x40020440
 8005648:	40020458 	.word	0x40020458
 800564c:	40020470 	.word	0x40020470
 8005650:	40020488 	.word	0x40020488
 8005654:	400204a0 	.word	0x400204a0
 8005658:	400204b8 	.word	0x400204b8
 800565c:	aaaaaaab 	.word	0xaaaaaaab
 8005660:	0800d19c 	.word	0x0800d19c
 8005664:	fffffc00 	.word	0xfffffc00

08005668 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d120      	bne.n	80056be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	2b03      	cmp	r3, #3
 8005682:	d858      	bhi.n	8005736 <DMA_CheckFifoParam+0xce>
 8005684:	a201      	add	r2, pc, #4	; (adr r2, 800568c <DMA_CheckFifoParam+0x24>)
 8005686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568a:	bf00      	nop
 800568c:	0800569d 	.word	0x0800569d
 8005690:	080056af 	.word	0x080056af
 8005694:	0800569d 	.word	0x0800569d
 8005698:	08005737 	.word	0x08005737
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d048      	beq.n	800573a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056ac:	e045      	b.n	800573a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056b6:	d142      	bne.n	800573e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056bc:	e03f      	b.n	800573e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c6:	d123      	bne.n	8005710 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d838      	bhi.n	8005742 <DMA_CheckFifoParam+0xda>
 80056d0:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <DMA_CheckFifoParam+0x70>)
 80056d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d6:	bf00      	nop
 80056d8:	080056e9 	.word	0x080056e9
 80056dc:	080056ef 	.word	0x080056ef
 80056e0:	080056e9 	.word	0x080056e9
 80056e4:	08005701 	.word	0x08005701
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
        break;
 80056ec:	e030      	b.n	8005750 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d025      	beq.n	8005746 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056fe:	e022      	b.n	8005746 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005708:	d11f      	bne.n	800574a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800570e:	e01c      	b.n	800574a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	2b02      	cmp	r3, #2
 8005716:	d902      	bls.n	800571e <DMA_CheckFifoParam+0xb6>
 8005718:	2b03      	cmp	r3, #3
 800571a:	d003      	beq.n	8005724 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800571c:	e018      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
        break;
 8005722:	e015      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00e      	beq.n	800574e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
    break;
 8005734:	e00b      	b.n	800574e <DMA_CheckFifoParam+0xe6>
        break;
 8005736:	bf00      	nop
 8005738:	e00a      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
        break;
 800573a:	bf00      	nop
 800573c:	e008      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
        break;
 800573e:	bf00      	nop
 8005740:	e006      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
        break;
 8005742:	bf00      	nop
 8005744:	e004      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
        break;
 8005746:	bf00      	nop
 8005748:	e002      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
        break;
 800574a:	bf00      	nop
 800574c:	e000      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
    break;
 800574e:	bf00      	nop
    }
  }

  return status;
 8005750:	7bfb      	ldrb	r3, [r7, #15]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop

08005760 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a38      	ldr	r2, [pc, #224]	; (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d022      	beq.n	80057be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a36      	ldr	r2, [pc, #216]	; (8005858 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d01d      	beq.n	80057be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a35      	ldr	r2, [pc, #212]	; (800585c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d018      	beq.n	80057be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a33      	ldr	r2, [pc, #204]	; (8005860 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d013      	beq.n	80057be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a32      	ldr	r2, [pc, #200]	; (8005864 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00e      	beq.n	80057be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a30      	ldr	r2, [pc, #192]	; (8005868 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d009      	beq.n	80057be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a2f      	ldr	r2, [pc, #188]	; (800586c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d004      	beq.n	80057be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a2d      	ldr	r2, [pc, #180]	; (8005870 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d101      	bne.n	80057c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80057c2:	2300      	movs	r3, #0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01a      	beq.n	80057fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	3b08      	subs	r3, #8
 80057d0:	4a28      	ldr	r2, [pc, #160]	; (8005874 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	091b      	lsrs	r3, r3, #4
 80057d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4b26      	ldr	r3, [pc, #152]	; (8005878 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	461a      	mov	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a24      	ldr	r2, [pc, #144]	; (800587c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80057ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	2201      	movs	r2, #1
 80057f6:	409a      	lsls	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057fc:	e024      	b.n	8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	3b10      	subs	r3, #16
 8005806:	4a1e      	ldr	r2, [pc, #120]	; (8005880 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4a1c      	ldr	r2, [pc, #112]	; (8005884 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d806      	bhi.n	8005826 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4a1b      	ldr	r2, [pc, #108]	; (8005888 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d902      	bls.n	8005826 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3308      	adds	r3, #8
 8005824:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4b18      	ldr	r3, [pc, #96]	; (800588c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	461a      	mov	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a16      	ldr	r2, [pc, #88]	; (8005890 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005838:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	2201      	movs	r2, #1
 8005842:	409a      	lsls	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	58025408 	.word	0x58025408
 8005858:	5802541c 	.word	0x5802541c
 800585c:	58025430 	.word	0x58025430
 8005860:	58025444 	.word	0x58025444
 8005864:	58025458 	.word	0x58025458
 8005868:	5802546c 	.word	0x5802546c
 800586c:	58025480 	.word	0x58025480
 8005870:	58025494 	.word	0x58025494
 8005874:	cccccccd 	.word	0xcccccccd
 8005878:	16009600 	.word	0x16009600
 800587c:	58025880 	.word	0x58025880
 8005880:	aaaaaaab 	.word	0xaaaaaaab
 8005884:	400204b8 	.word	0x400204b8
 8005888:	4002040f 	.word	0x4002040f
 800588c:	10008200 	.word	0x10008200
 8005890:	40020880 	.word	0x40020880

08005894 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d04a      	beq.n	8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d847      	bhi.n	8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a25      	ldr	r2, [pc, #148]	; (800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d022      	beq.n	8005900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a24      	ldr	r2, [pc, #144]	; (8005950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d01d      	beq.n	8005900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a22      	ldr	r2, [pc, #136]	; (8005954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d018      	beq.n	8005900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a21      	ldr	r2, [pc, #132]	; (8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1f      	ldr	r2, [pc, #124]	; (800595c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00e      	beq.n	8005900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d009      	beq.n	8005900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1b      	ldr	r2, [pc, #108]	; (8005968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d101      	bne.n	8005904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4b17      	ldr	r3, [pc, #92]	; (800596c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	461a      	mov	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a15      	ldr	r2, [pc, #84]	; (8005970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800591c:	671a      	str	r2, [r3, #112]	; 0x70
 800591e:	e009      	b.n	8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4b14      	ldr	r3, [pc, #80]	; (8005974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	461a      	mov	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a11      	ldr	r2, [pc, #68]	; (8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005932:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3b01      	subs	r3, #1
 8005938:	2201      	movs	r2, #1
 800593a:	409a      	lsls	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005940:	bf00      	nop
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	58025408 	.word	0x58025408
 8005950:	5802541c 	.word	0x5802541c
 8005954:	58025430 	.word	0x58025430
 8005958:	58025444 	.word	0x58025444
 800595c:	58025458 	.word	0x58025458
 8005960:	5802546c 	.word	0x5802546c
 8005964:	58025480 	.word	0x58025480
 8005968:	58025494 	.word	0x58025494
 800596c:	1600963f 	.word	0x1600963f
 8005970:	58025940 	.word	0x58025940
 8005974:	1000823f 	.word	0x1000823f
 8005978:	40020940 	.word	0x40020940

0800597c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e04f      	b.n	8005a2e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fa fe10 	bl	80005c8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <HAL_DMA2D_Init+0xbc>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6851      	ldr	r1, [r2, #4]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	69d2      	ldr	r2, [r2, #28]
 80059c2:	4311      	orrs	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d2:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <HAL_DMA2D_Init+0xc0>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6891      	ldr	r1, [r2, #8]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6992      	ldr	r2, [r2, #24]
 80059de:	4311      	orrs	r1, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	430b      	orrs	r3, r1
 80059e6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ee:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <HAL_DMA2D_Init+0xc4>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	68d1      	ldr	r1, [r2, #12]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	430b      	orrs	r3, r1
 80059fc:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a04:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	051a      	lsls	r2, r3, #20
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	055b      	lsls	r3, r3, #21
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	fff8ffbf 	.word	0xfff8ffbf
 8005a3c:	fffffef8 	.word	0xfffffef8
 8005a40:	ffff0000 	.word	0xffff0000

08005a44 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_DMA2D_ConfigLayer+0x24>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e092      	b.n	8005b8e <HAL_DMA2D_ConfigLayer+0x14a>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	3328      	adds	r3, #40	; 0x28
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	4413      	add	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	041b      	lsls	r3, r3, #16
 8005a94:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a9c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005aa8:	4b3c      	ldr	r3, [pc, #240]	; (8005b9c <HAL_DMA2D_ConfigLayer+0x158>)
 8005aaa:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b0a      	cmp	r3, #10
 8005ab2:	d003      	beq.n	8005abc <HAL_DMA2D_ConfigLayer+0x78>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b09      	cmp	r3, #9
 8005aba:	d107      	bne.n	8005acc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	e005      	b.n	8005ad8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d120      	bne.n	8005b20 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	ea02 0103 	and.w	r1, r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b0a      	cmp	r3, #10
 8005b06:	d003      	beq.n	8005b10 <HAL_DMA2D_ConfigLayer+0xcc>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b09      	cmp	r3, #9
 8005b0e:	d135      	bne.n	8005b7c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b1c:	629a      	str	r2, [r3, #40]	; 0x28
 8005b1e:	e02d      	b.n	8005b7c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b0b      	cmp	r3, #11
 8005b26:	d109      	bne.n	8005b3c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	049b      	lsls	r3, r3, #18
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005b3a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69da      	ldr	r2, [r3, #28]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	ea02 0103 	and.w	r1, r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b0a      	cmp	r3, #10
 8005b64:	d003      	beq.n	8005b6e <HAL_DMA2D_ConfigLayer+0x12a>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b09      	cmp	r3, #9
 8005b6c:	d106      	bne.n	8005b7c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b7a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	ff33000f 	.word	0xff33000f

08005ba0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b098      	sub	sp, #96	; 0x60
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005ba8:	4a84      	ldr	r2, [pc, #528]	; (8005dbc <HAL_FDCAN_Init+0x21c>)
 8005baa:	f107 030c 	add.w	r3, r7, #12
 8005bae:	4611      	mov	r1, r2
 8005bb0:	224c      	movs	r2, #76	; 0x4c
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f007 faa2 	bl	800d0fc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e1c6      	b.n	8005f50 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a7e      	ldr	r2, [pc, #504]	; (8005dc0 <HAL_FDCAN_Init+0x220>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d106      	bne.n	8005bda <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fa fd70 	bl	80006d4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0210 	bic.w	r2, r2, #16
 8005c02:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c04:	f7fc f8da 	bl	8001dbc <HAL_GetTick>
 8005c08:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005c0a:	e014      	b.n	8005c36 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005c0c:	f7fc f8d6 	bl	8001dbc <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b0a      	cmp	r3, #10
 8005c18:	d90d      	bls.n	8005c36 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c20:	f043 0201 	orr.w	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e18c      	b.n	8005f50 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d0e3      	beq.n	8005c0c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c54:	f7fc f8b2 	bl	8001dbc <HAL_GetTick>
 8005c58:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c5a:	e014      	b.n	8005c86 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005c5c:	f7fc f8ae 	bl	8001dbc <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b0a      	cmp	r3, #10
 8005c68:	d90d      	bls.n	8005c86 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c70:	f043 0201 	orr.w	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e164      	b.n	8005f50 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0e3      	beq.n	8005c5c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0202 	orr.w	r2, r2, #2
 8005ca2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	7c1b      	ldrb	r3, [r3, #16]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d108      	bne.n	8005cbe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cba:	619a      	str	r2, [r3, #24]
 8005cbc:	e007      	b.n	8005cce <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699a      	ldr	r2, [r3, #24]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ccc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	7c5b      	ldrb	r3, [r3, #17]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d108      	bne.n	8005ce8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ce4:	619a      	str	r2, [r3, #24]
 8005ce6:	e007      	b.n	8005cf8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cf6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	7c9b      	ldrb	r3, [r3, #18]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d108      	bne.n	8005d12 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d0e:	619a      	str	r2, [r3, #24]
 8005d10:	e007      	b.n	8005d22 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	699a      	ldr	r2, [r3, #24]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d20:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005d46:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0210 	bic.w	r2, r2, #16
 8005d56:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d108      	bne.n	8005d72 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0204 	orr.w	r2, r2, #4
 8005d6e:	619a      	str	r2, [r3, #24]
 8005d70:	e030      	b.n	8005dd4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d02c      	beq.n	8005dd4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d020      	beq.n	8005dc4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699a      	ldr	r2, [r3, #24]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d90:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0210 	orr.w	r2, r2, #16
 8005da0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d114      	bne.n	8005dd4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0220 	orr.w	r2, r2, #32
 8005db8:	619a      	str	r2, [r3, #24]
 8005dba:	e00b      	b.n	8005dd4 <HAL_FDCAN_Init+0x234>
 8005dbc:	0800d140 	.word	0x0800d140
 8005dc0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0220 	orr.w	r2, r2, #32
 8005dd2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005de4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005dec:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005dfc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005dfe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e08:	d115      	bne.n	8005e36 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	3b01      	subs	r3, #1
 8005e16:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005e18:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005e22:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005e32:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005e34:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5c:	4413      	add	r3, r2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d011      	beq.n	8005e86 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005e6a:	f023 0107 	bic.w	r1, r3, #7
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	3360      	adds	r3, #96	; 0x60
 8005e76:	443b      	add	r3, r7
 8005e78:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d011      	beq.n	8005eb2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e96:	f023 0107 	bic.w	r1, r3, #7
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	3360      	adds	r3, #96	; 0x60
 8005ea2:	443b      	add	r3, r7
 8005ea4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d012      	beq.n	8005ee0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ec2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	3360      	adds	r3, #96	; 0x60
 8005ece:	443b      	add	r3, r7
 8005ed0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005ed4:	011a      	lsls	r2, r3, #4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d012      	beq.n	8005f0e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ef0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	3360      	adds	r3, #96	; 0x60
 8005efc:	443b      	add	r3, r7
 8005efe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005f02:	021a      	lsls	r2, r3, #8
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a11      	ldr	r2, [pc, #68]	; (8005f58 <HAL_FDCAN_Init+0x3b8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d107      	bne.n	8005f28 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f022 0203 	bic.w	r2, r2, #3
 8005f26:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fb1f 	bl	8006584 <FDCAN_CalcultateRamBlockAddresses>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005f4c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3760      	adds	r7, #96	; 0x60
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	4000a000 	.word	0x4000a000

08005f5c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b096      	sub	sp, #88	; 0x58
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005f64:	4b9a      	ldr	r3, [pc, #616]	; (80061d0 <HAL_FDCAN_IRQHandler+0x274>)
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	079b      	lsls	r3, r3, #30
 8005f6a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005f6c:	4b98      	ldr	r3, [pc, #608]	; (80061d0 <HAL_FDCAN_IRQHandler+0x274>)
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	079b      	lsls	r3, r3, #30
 8005f72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f74:	4013      	ands	r3, r2
 8005f76:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f7e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f82:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8005fca:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fde:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8005fe2:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fec:	4013      	ands	r3, r2
 8005fee:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d010      	beq.n	800602e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	0a1b      	lsrs	r3, r3, #8
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006020:	651a      	str	r2, [r3, #80]	; 0x50
 8006022:	4b6b      	ldr	r3, [pc, #428]	; (80061d0 <HAL_FDCAN_IRQHandler+0x274>)
 8006024:	2200      	movs	r2, #0
 8006026:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa5f 	bl	80064ec <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800602e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006030:	0a9b      	lsrs	r3, r3, #10
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d01d      	beq.n	8006076 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	0a9b      	lsrs	r3, r3, #10
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d017      	beq.n	8006076 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800605a:	4013      	ands	r3, r2
 800605c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006066:	651a      	str	r2, [r3, #80]	; 0x50
 8006068:	4b59      	ldr	r3, [pc, #356]	; (80061d0 <HAL_FDCAN_IRQHandler+0x274>)
 800606a:	2200      	movs	r2, #0
 800606c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800606e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fa12 	bl	800649a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00d      	beq.n	8006098 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006082:	4b54      	ldr	r3, [pc, #336]	; (80061d4 <HAL_FDCAN_IRQHandler+0x278>)
 8006084:	400b      	ands	r3, r1
 8006086:	6513      	str	r3, [r2, #80]	; 0x50
 8006088:	4a51      	ldr	r2, [pc, #324]	; (80061d0 <HAL_FDCAN_IRQHandler+0x274>)
 800608a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800608c:	0f9b      	lsrs	r3, r3, #30
 800608e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006090:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9c0 	bl	8006418 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00d      	beq.n	80060ba <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060a4:	4b4b      	ldr	r3, [pc, #300]	; (80061d4 <HAL_FDCAN_IRQHandler+0x278>)
 80060a6:	400b      	ands	r3, r1
 80060a8:	6513      	str	r3, [r2, #80]	; 0x50
 80060aa:	4a49      	ldr	r2, [pc, #292]	; (80061d0 <HAL_FDCAN_IRQHandler+0x274>)
 80060ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ae:	0f9b      	lsrs	r3, r3, #30
 80060b0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80060b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f9ba 	bl	800642e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80060ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00d      	beq.n	80060dc <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80060c6:	4b43      	ldr	r3, [pc, #268]	; (80061d4 <HAL_FDCAN_IRQHandler+0x278>)
 80060c8:	400b      	ands	r3, r1
 80060ca:	6513      	str	r3, [r2, #80]	; 0x50
 80060cc:	4a40      	ldr	r2, [pc, #256]	; (80061d0 <HAL_FDCAN_IRQHandler+0x274>)
 80060ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d0:	0f9b      	lsrs	r3, r3, #30
 80060d2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80060d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f9b4 	bl	8006444 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80060dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00d      	beq.n	80060fe <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80060e8:	4b3a      	ldr	r3, [pc, #232]	; (80061d4 <HAL_FDCAN_IRQHandler+0x278>)
 80060ea:	400b      	ands	r3, r1
 80060ec:	6513      	str	r3, [r2, #80]	; 0x50
 80060ee:	4a38      	ldr	r2, [pc, #224]	; (80061d0 <HAL_FDCAN_IRQHandler+0x274>)
 80060f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f2:	0f9b      	lsrs	r3, r3, #30
 80060f4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80060f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f9ae 	bl	800645a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80060fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006100:	0adb      	lsrs	r3, r3, #11
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d010      	beq.n	800612c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	0adb      	lsrs	r3, r3, #11
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800611e:	651a      	str	r2, [r3, #80]	; 0x50
 8006120:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <HAL_FDCAN_IRQHandler+0x274>)
 8006122:	2200      	movs	r2, #0
 8006124:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f9a2 	bl	8006470 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800612c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612e:	0a5b      	lsrs	r3, r3, #9
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01d      	beq.n	8006174 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	0a5b      	lsrs	r3, r3, #9
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d017      	beq.n	8006174 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800614c:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006158:	4013      	ands	r3, r2
 800615a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006164:	651a      	str	r2, [r3, #80]	; 0x50
 8006166:	4b1a      	ldr	r3, [pc, #104]	; (80061d0 <HAL_FDCAN_IRQHandler+0x274>)
 8006168:	2200      	movs	r2, #0
 800616a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800616c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f988 	bl	8006484 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006176:	0cdb      	lsrs	r3, r3, #19
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d010      	beq.n	80061a2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	0cdb      	lsrs	r3, r3, #19
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006194:	651a      	str	r2, [r3, #80]	; 0x50
 8006196:	4b0e      	ldr	r3, [pc, #56]	; (80061d0 <HAL_FDCAN_IRQHandler+0x274>)
 8006198:	2200      	movs	r2, #0
 800619a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f987 	bl	80064b0 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80061a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d016      	beq.n	80061dc <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	0c1b      	lsrs	r3, r3, #16
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d010      	beq.n	80061dc <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80061c2:	651a      	str	r2, [r3, #80]	; 0x50
 80061c4:	4b02      	ldr	r3, [pc, #8]	; (80061d0 <HAL_FDCAN_IRQHandler+0x274>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	e004      	b.n	80061d8 <HAL_FDCAN_IRQHandler+0x27c>
 80061ce:	bf00      	nop
 80061d0:	4000a800 	.word	0x4000a800
 80061d4:	3fcfffff 	.word	0x3fcfffff
 80061d8:	f000 f974 	bl	80064c4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80061dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061de:	0c9b      	lsrs	r3, r3, #18
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d010      	beq.n	800620a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80061e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ea:	0c9b      	lsrs	r3, r3, #18
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80061fc:	651a      	str	r2, [r3, #80]	; 0x50
 80061fe:	4b83      	ldr	r3, [pc, #524]	; (800640c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006200:	2200      	movs	r2, #0
 8006202:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f967 	bl	80064d8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800620a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620c:	0c5b      	lsrs	r3, r3, #17
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d015      	beq.n	8006242 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	0c5b      	lsrs	r3, r3, #17
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00f      	beq.n	8006242 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800622a:	651a      	str	r2, [r3, #80]	; 0x50
 800622c:	4b77      	ldr	r3, [pc, #476]	; (800640c <HAL_FDCAN_IRQHandler+0x4b0>)
 800622e:	2200      	movs	r2, #0
 8006230:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006238:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00d      	beq.n	8006264 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800624e:	4b70      	ldr	r3, [pc, #448]	; (8006410 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006250:	400b      	ands	r3, r1
 8006252:	6513      	str	r3, [r2, #80]	; 0x50
 8006254:	4a6d      	ldr	r2, [pc, #436]	; (800640c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006258:	0f9b      	lsrs	r3, r3, #30
 800625a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800625c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f958 	bl	8006514 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006266:	2b00      	cmp	r3, #0
 8006268:	d011      	beq.n	800628e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006270:	4b67      	ldr	r3, [pc, #412]	; (8006410 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006272:	400b      	ands	r3, r1
 8006274:	6513      	str	r3, [r2, #80]	; 0x50
 8006276:	4a65      	ldr	r2, [pc, #404]	; (800640c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800627a:	0f9b      	lsrs	r3, r3, #30
 800627c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a60      	ldr	r2, [pc, #384]	; (8006414 <HAL_FDCAN_IRQHandler+0x4b8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	f040 80ac 	bne.w	80063f2 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 0303 	and.w	r3, r3, #3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 80a4 	beq.w	80063f2 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	f003 030f 	and.w	r3, r3, #15
 80062b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062be:	4013      	ands	r3, r2
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062cc:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d6:	4013      	ands	r3, r2
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ee:	4013      	ands	r3, r2
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80062fc:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	6a3a      	ldr	r2, [r7, #32]
 8006306:	4013      	ands	r3, r2
 8006308:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006314:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	4013      	ands	r3, r2
 8006320:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800633e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006340:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f8f1 	bl	800652a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006354:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f8f1 	bl	8006540 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	099b      	lsrs	r3, r3, #6
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d01a      	beq.n	80063a0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	099b      	lsrs	r3, r3, #6
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d014      	beq.n	80063a0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	b29b      	uxth	r3, r3
 8006380:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800638c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2240      	movs	r2, #64	; 0x40
 8006394:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	6939      	ldr	r1, [r7, #16]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f8db 	bl	8006556 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ac:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80063ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f8dc 	bl	800656e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	6a3a      	ldr	r2, [r7, #32]
 80063c2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	431a      	orrs	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f87f 	bl	8006500 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006402:	bf00      	nop
 8006404:	3758      	adds	r7, #88	; 0x58
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	4000a800 	.word	0x4000a800
 8006410:	3fcfffff 	.word	0x3fcfffff
 8006414:	4000a000 	.word	0x4000a000

08006418 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006562:	bf00      	nop
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006590:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800659a:	4ba7      	ldr	r3, [pc, #668]	; (8006838 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800659c:	4013      	ands	r3, r2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	0091      	lsls	r1, r2, #2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6812      	ldr	r2, [r2, #0]
 80065a6:	430b      	orrs	r3, r1
 80065a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	041a      	lsls	r2, r3, #16
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	4413      	add	r3, r2
 80065d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065da:	4b97      	ldr	r3, [pc, #604]	; (8006838 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065dc:	4013      	ands	r3, r2
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	0091      	lsls	r1, r2, #2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	430b      	orrs	r3, r1
 80065e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fc:	041a      	lsls	r2, r3, #16
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	4413      	add	r3, r2
 8006612:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800661c:	4b86      	ldr	r3, [pc, #536]	; (8006838 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800661e:	4013      	ands	r3, r2
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	0091      	lsls	r1, r2, #2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6812      	ldr	r2, [r2, #0]
 8006628:	430b      	orrs	r3, r1
 800662a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006636:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	041a      	lsls	r2, r3, #16
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006652:	fb02 f303 	mul.w	r3, r2, r3
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	4413      	add	r3, r2
 800665a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006664:	4b74      	ldr	r3, [pc, #464]	; (8006838 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006666:	4013      	ands	r3, r2
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	0091      	lsls	r1, r2, #2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	430b      	orrs	r3, r1
 8006672:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800667e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006686:	041a      	lsls	r2, r3, #16
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4413      	add	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80066ac:	4b62      	ldr	r3, [pc, #392]	; (8006838 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	0091      	lsls	r1, r2, #2
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6812      	ldr	r2, [r2, #0]
 80066b8:	430b      	orrs	r3, r1
 80066ba:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80066c6:	fb02 f303 	mul.w	r3, r2, r3
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4413      	add	r3, r2
 80066ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80066d8:	4b57      	ldr	r3, [pc, #348]	; (8006838 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066da:	4013      	ands	r3, r2
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	0091      	lsls	r1, r2, #2
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	430b      	orrs	r3, r1
 80066e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066f2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066fa:	041a      	lsls	r2, r3, #16
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	4413      	add	r3, r2
 8006710:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800671a:	4b47      	ldr	r3, [pc, #284]	; (8006838 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800671c:	4013      	ands	r3, r2
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	0091      	lsls	r1, r2, #2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6812      	ldr	r2, [r2, #0]
 8006726:	430b      	orrs	r3, r1
 8006728:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006734:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673c:	041a      	lsls	r2, r3, #16
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006750:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006758:	061a      	lsls	r2, r3, #24
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006768:	4b34      	ldr	r3, [pc, #208]	; (800683c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800676a:	4413      	add	r3, r2
 800676c:	009a      	lsls	r2, r3, #2
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	441a      	add	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	441a      	add	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800679e:	fb01 f303 	mul.w	r3, r1, r3
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	441a      	add	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80067b6:	fb01 f303 	mul.w	r3, r1, r3
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	441a      	add	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80067ce:	fb01 f303 	mul.w	r3, r1, r3
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	441a      	add	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	441a      	add	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80067fe:	fb01 f303 	mul.w	r3, r1, r3
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	441a      	add	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800681a:	fb01 f303 	mul.w	r3, r1, r3
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	441a      	add	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682e:	4a04      	ldr	r2, [pc, #16]	; (8006840 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d915      	bls.n	8006860 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006834:	e006      	b.n	8006844 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006836:	bf00      	nop
 8006838:	ffff0003 	.word	0xffff0003
 800683c:	10002b00 	.word	0x10002b00
 8006840:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800684a:	f043 0220 	orr.w	r2, r3, #32
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2203      	movs	r2, #3
 8006858:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e010      	b.n	8006882 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	e005      	b.n	8006874 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3304      	adds	r3, #4
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	429a      	cmp	r2, r3
 800687e:	d3f3      	bcc.n	8006868 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop

08006890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006890:	b480      	push	{r7}
 8006892:	b089      	sub	sp, #36	; 0x24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800689e:	4b89      	ldr	r3, [pc, #548]	; (8006ac4 <HAL_GPIO_Init+0x234>)
 80068a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068a2:	e194      	b.n	8006bce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	2101      	movs	r1, #1
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	fa01 f303 	lsl.w	r3, r1, r3
 80068b0:	4013      	ands	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 8186 	beq.w	8006bc8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d005      	beq.n	80068d4 <HAL_GPIO_Init+0x44>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d130      	bne.n	8006936 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	2203      	movs	r2, #3
 80068e0:	fa02 f303 	lsl.w	r3, r2, r3
 80068e4:	43db      	mvns	r3, r3
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	4013      	ands	r3, r2
 80068ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800690a:	2201      	movs	r2, #1
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	fa02 f303 	lsl.w	r3, r2, r3
 8006912:	43db      	mvns	r3, r3
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	4013      	ands	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	091b      	lsrs	r3, r3, #4
 8006920:	f003 0201 	and.w	r2, r3, #1
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	4313      	orrs	r3, r2
 800692e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	2b03      	cmp	r3, #3
 8006940:	d017      	beq.n	8006972 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	2203      	movs	r2, #3
 800694e:	fa02 f303 	lsl.w	r3, r2, r3
 8006952:	43db      	mvns	r3, r3
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	4013      	ands	r3, r2
 8006958:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	fa02 f303 	lsl.w	r3, r2, r3
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	4313      	orrs	r3, r2
 800696a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d123      	bne.n	80069c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	08da      	lsrs	r2, r3, #3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3208      	adds	r2, #8
 8006986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	220f      	movs	r2, #15
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	43db      	mvns	r3, r3
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	4013      	ands	r3, r2
 80069a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	08da      	lsrs	r2, r3, #3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3208      	adds	r2, #8
 80069c0:	69b9      	ldr	r1, [r7, #24]
 80069c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	2203      	movs	r2, #3
 80069d2:	fa02 f303 	lsl.w	r3, r2, r3
 80069d6:	43db      	mvns	r3, r3
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	4013      	ands	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f003 0203 	and.w	r2, r3, #3
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	fa02 f303 	lsl.w	r3, r2, r3
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 80e0 	beq.w	8006bc8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a08:	4b2f      	ldr	r3, [pc, #188]	; (8006ac8 <HAL_GPIO_Init+0x238>)
 8006a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a0e:	4a2e      	ldr	r2, [pc, #184]	; (8006ac8 <HAL_GPIO_Init+0x238>)
 8006a10:	f043 0302 	orr.w	r3, r3, #2
 8006a14:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006a18:	4b2b      	ldr	r3, [pc, #172]	; (8006ac8 <HAL_GPIO_Init+0x238>)
 8006a1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a26:	4a29      	ldr	r2, [pc, #164]	; (8006acc <HAL_GPIO_Init+0x23c>)
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	089b      	lsrs	r3, r3, #2
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	220f      	movs	r2, #15
 8006a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a42:	43db      	mvns	r3, r3
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	4013      	ands	r3, r2
 8006a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a20      	ldr	r2, [pc, #128]	; (8006ad0 <HAL_GPIO_Init+0x240>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d052      	beq.n	8006af8 <HAL_GPIO_Init+0x268>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a1f      	ldr	r2, [pc, #124]	; (8006ad4 <HAL_GPIO_Init+0x244>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d031      	beq.n	8006abe <HAL_GPIO_Init+0x22e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1e      	ldr	r2, [pc, #120]	; (8006ad8 <HAL_GPIO_Init+0x248>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d02b      	beq.n	8006aba <HAL_GPIO_Init+0x22a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a1d      	ldr	r2, [pc, #116]	; (8006adc <HAL_GPIO_Init+0x24c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d025      	beq.n	8006ab6 <HAL_GPIO_Init+0x226>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ae0 <HAL_GPIO_Init+0x250>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d01f      	beq.n	8006ab2 <HAL_GPIO_Init+0x222>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a1b      	ldr	r2, [pc, #108]	; (8006ae4 <HAL_GPIO_Init+0x254>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d019      	beq.n	8006aae <HAL_GPIO_Init+0x21e>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a1a      	ldr	r2, [pc, #104]	; (8006ae8 <HAL_GPIO_Init+0x258>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d013      	beq.n	8006aaa <HAL_GPIO_Init+0x21a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a19      	ldr	r2, [pc, #100]	; (8006aec <HAL_GPIO_Init+0x25c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00d      	beq.n	8006aa6 <HAL_GPIO_Init+0x216>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a18      	ldr	r2, [pc, #96]	; (8006af0 <HAL_GPIO_Init+0x260>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d007      	beq.n	8006aa2 <HAL_GPIO_Init+0x212>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a17      	ldr	r2, [pc, #92]	; (8006af4 <HAL_GPIO_Init+0x264>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d101      	bne.n	8006a9e <HAL_GPIO_Init+0x20e>
 8006a9a:	2309      	movs	r3, #9
 8006a9c:	e02d      	b.n	8006afa <HAL_GPIO_Init+0x26a>
 8006a9e:	230a      	movs	r3, #10
 8006aa0:	e02b      	b.n	8006afa <HAL_GPIO_Init+0x26a>
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	e029      	b.n	8006afa <HAL_GPIO_Init+0x26a>
 8006aa6:	2307      	movs	r3, #7
 8006aa8:	e027      	b.n	8006afa <HAL_GPIO_Init+0x26a>
 8006aaa:	2306      	movs	r3, #6
 8006aac:	e025      	b.n	8006afa <HAL_GPIO_Init+0x26a>
 8006aae:	2305      	movs	r3, #5
 8006ab0:	e023      	b.n	8006afa <HAL_GPIO_Init+0x26a>
 8006ab2:	2304      	movs	r3, #4
 8006ab4:	e021      	b.n	8006afa <HAL_GPIO_Init+0x26a>
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e01f      	b.n	8006afa <HAL_GPIO_Init+0x26a>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e01d      	b.n	8006afa <HAL_GPIO_Init+0x26a>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e01b      	b.n	8006afa <HAL_GPIO_Init+0x26a>
 8006ac2:	bf00      	nop
 8006ac4:	58000080 	.word	0x58000080
 8006ac8:	58024400 	.word	0x58024400
 8006acc:	58000400 	.word	0x58000400
 8006ad0:	58020000 	.word	0x58020000
 8006ad4:	58020400 	.word	0x58020400
 8006ad8:	58020800 	.word	0x58020800
 8006adc:	58020c00 	.word	0x58020c00
 8006ae0:	58021000 	.word	0x58021000
 8006ae4:	58021400 	.word	0x58021400
 8006ae8:	58021800 	.word	0x58021800
 8006aec:	58021c00 	.word	0x58021c00
 8006af0:	58022000 	.word	0x58022000
 8006af4:	58022400 	.word	0x58022400
 8006af8:	2300      	movs	r3, #0
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	f002 0203 	and.w	r2, r2, #3
 8006b00:	0092      	lsls	r2, r2, #2
 8006b02:	4093      	lsls	r3, r2
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b0a:	4938      	ldr	r1, [pc, #224]	; (8006bec <HAL_GPIO_Init+0x35c>)
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	089b      	lsrs	r3, r3, #2
 8006b10:	3302      	adds	r3, #2
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	43db      	mvns	r3, r3
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	4013      	ands	r3, r2
 8006b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	43db      	mvns	r3, r3
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	4013      	ands	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	4013      	ands	r3, r2
 8006b82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	4013      	ands	r3, r2
 8006bac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f47f ae63 	bne.w	80068a4 <HAL_GPIO_Init+0x14>
  }
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	3724      	adds	r7, #36	; 0x24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	58000400 	.word	0x58000400

08006bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	807b      	strh	r3, [r7, #2]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c00:	787b      	ldrb	r3, [r7, #1]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c06:	887a      	ldrh	r2, [r7, #2]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006c0c:	e003      	b.n	8006c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c0e:	887b      	ldrh	r3, [r7, #2]
 8006c10:	041a      	lsls	r2, r3, #16
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	619a      	str	r2, [r3, #24]
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e07f      	b.n	8006d36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fa f80c 	bl	8000c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2224      	movs	r2, #36	; 0x24
 8006c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0201 	bic.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d107      	bne.n	8006c9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c9a:	609a      	str	r2, [r3, #8]
 8006c9c:	e006      	b.n	8006cac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006caa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d104      	bne.n	8006cbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6859      	ldr	r1, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	4b1d      	ldr	r3, [pc, #116]	; (8006d40 <HAL_I2C_Init+0x11c>)
 8006cca:	430b      	orrs	r3, r1
 8006ccc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	69d9      	ldr	r1, [r3, #28]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1a      	ldr	r2, [r3, #32]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	02008000 	.word	0x02008000

08006d44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	68f9      	ldr	r1, [r7, #12]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	4798      	blx	r3
  }
}
 8006d70:	bf00      	nop
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	d138      	bne.n	8006e00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e032      	b.n	8006e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2224      	movs	r2, #36	; 0x24
 8006da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0201 	bic.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6819      	ldr	r1, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e000      	b.n	8006e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e00:	2302      	movs	r3, #2
  }
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d139      	bne.n	8006e98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e033      	b.n	8006e9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2224      	movs	r2, #36	; 0x24
 8006e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0201 	bic.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	e000      	b.n	8006e9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e98:	2302      	movs	r3, #2
  }
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e0bf      	b.n	800703a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7f9 ffba 	bl	8000e48 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699a      	ldr	r2, [r3, #24]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006eea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6999      	ldr	r1, [r3, #24]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f00:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6899      	ldr	r1, [r3, #8]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b4a      	ldr	r3, [pc, #296]	; (8007044 <HAL_LTDC_Init+0x19c>)
 8006f1c:	400b      	ands	r3, r1
 8006f1e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	041b      	lsls	r3, r3, #16
 8006f26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6899      	ldr	r1, [r3, #8]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68d9      	ldr	r1, [r3, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	4b3e      	ldr	r3, [pc, #248]	; (8007044 <HAL_LTDC_Init+0x19c>)
 8006f4a:	400b      	ands	r3, r1
 8006f4c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	041b      	lsls	r3, r3, #16
 8006f54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68d9      	ldr	r1, [r3, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1a      	ldr	r2, [r3, #32]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6919      	ldr	r1, [r3, #16]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4b33      	ldr	r3, [pc, #204]	; (8007044 <HAL_LTDC_Init+0x19c>)
 8006f78:	400b      	ands	r3, r1
 8006f7a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	041b      	lsls	r3, r3, #16
 8006f82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6919      	ldr	r1, [r3, #16]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6959      	ldr	r1, [r3, #20]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	4b27      	ldr	r3, [pc, #156]	; (8007044 <HAL_LTDC_Init+0x19c>)
 8006fa6:	400b      	ands	r3, r1
 8006fa8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fae:	041b      	lsls	r3, r3, #16
 8006fb0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6959      	ldr	r1, [r3, #20]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fce:	021b      	lsls	r3, r3, #8
 8006fd0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006fd8:	041b      	lsls	r3, r3, #16
 8006fda:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0206 	orr.w	r2, r2, #6
 8007016:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0201 	orr.w	r2, r2, #1
 8007026:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	f000f800 	.word	0xf000f800

08007048 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	d023      	beq.n	80070b2 <HAL_LTDC_IRQHandler+0x6a>
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f003 0304 	and.w	r3, r3, #4
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01e      	beq.n	80070b2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0204 	bic.w	r2, r2, #4
 8007082:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2204      	movs	r2, #4
 800708a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007092:	f043 0201 	orr.w	r2, r3, #1
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2204      	movs	r2, #4
 80070a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f86f 	bl	8007190 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d023      	beq.n	8007104 <HAL_LTDC_IRQHandler+0xbc>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01e      	beq.n	8007104 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0202 	bic.w	r2, r2, #2
 80070d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2202      	movs	r2, #2
 80070dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070e4:	f043 0202 	orr.w	r2, r3, #2
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2204      	movs	r2, #4
 80070f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f846 	bl	8007190 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d01b      	beq.n	8007146 <HAL_LTDC_IRQHandler+0xfe>
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d016      	beq.n	8007146 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0201 	bic.w	r2, r2, #1
 8007126:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2201      	movs	r2, #1
 800712e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f82f 	bl	80071a4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f003 0308 	and.w	r3, r3, #8
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01b      	beq.n	8007188 <HAL_LTDC_IRQHandler+0x140>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d016      	beq.n	8007188 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0208 	bic.w	r2, r2, #8
 8007168:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2208      	movs	r2, #8
 8007170:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f818 	bl	80071b8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007188:	bf00      	nop
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80071cc:	b5b0      	push	{r4, r5, r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_LTDC_ConfigLayer+0x1a>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e02c      	b.n	8007240 <HAL_LTDC_ConfigLayer+0x74>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2202      	movs	r2, #2
 80071f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2134      	movs	r1, #52	; 0x34
 80071fc:	fb01 f303 	mul.w	r3, r1, r3
 8007200:	4413      	add	r3, r2
 8007202:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	4614      	mov	r4, r2
 800720a:	461d      	mov	r5, r3
 800720c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800720e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f811 	bl	8007248 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2201      	movs	r2, #1
 800722c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bdb0      	pop	{r4, r5, r7, pc}

08007248 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007248:	b480      	push	{r7}
 800724a:	b089      	sub	sp, #36	; 0x24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	0c1b      	lsrs	r3, r3, #16
 8007260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007264:	4413      	add	r3, r2
 8007266:	041b      	lsls	r3, r3, #16
 8007268:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	01db      	lsls	r3, r3, #7
 8007274:	4413      	add	r3, r2
 8007276:	3384      	adds	r3, #132	; 0x84
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	4611      	mov	r1, r2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	01d2      	lsls	r2, r2, #7
 8007284:	440a      	add	r2, r1
 8007286:	3284      	adds	r2, #132	; 0x84
 8007288:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800728c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	0c1b      	lsrs	r3, r3, #16
 800729a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800729e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072a0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4619      	mov	r1, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	01db      	lsls	r3, r3, #7
 80072ac:	440b      	add	r3, r1
 80072ae:	3384      	adds	r3, #132	; 0x84
 80072b0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80072b6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072c6:	4413      	add	r3, r2
 80072c8:	041b      	lsls	r3, r3, #16
 80072ca:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	461a      	mov	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	01db      	lsls	r3, r3, #7
 80072d6:	4413      	add	r3, r2
 80072d8:	3384      	adds	r3, #132	; 0x84
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	6812      	ldr	r2, [r2, #0]
 80072e0:	4611      	mov	r1, r2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	01d2      	lsls	r2, r2, #7
 80072e6:	440a      	add	r2, r1
 80072e8:	3284      	adds	r2, #132	; 0x84
 80072ea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80072ee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	689a      	ldr	r2, [r3, #8]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072fe:	4413      	add	r3, r2
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4619      	mov	r1, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	01db      	lsls	r3, r3, #7
 800730c:	440b      	add	r3, r1
 800730e:	3384      	adds	r3, #132	; 0x84
 8007310:	4619      	mov	r1, r3
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4313      	orrs	r3, r2
 8007316:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	01db      	lsls	r3, r3, #7
 8007322:	4413      	add	r3, r2
 8007324:	3384      	adds	r3, #132	; 0x84
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	6812      	ldr	r2, [r2, #0]
 800732c:	4611      	mov	r1, r2
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	01d2      	lsls	r2, r2, #7
 8007332:	440a      	add	r2, r1
 8007334:	3284      	adds	r2, #132	; 0x84
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	01db      	lsls	r3, r3, #7
 8007346:	4413      	add	r3, r2
 8007348:	3384      	adds	r3, #132	; 0x84
 800734a:	461a      	mov	r2, r3
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007358:	021b      	lsls	r3, r3, #8
 800735a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007362:	041b      	lsls	r3, r3, #16
 8007364:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	061b      	lsls	r3, r3, #24
 800736c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	01db      	lsls	r3, r3, #7
 8007378:	4413      	add	r3, r2
 800737a:	3384      	adds	r3, #132	; 0x84
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	01db      	lsls	r3, r3, #7
 8007388:	4413      	add	r3, r2
 800738a:	3384      	adds	r3, #132	; 0x84
 800738c:	461a      	mov	r2, r3
 800738e:	2300      	movs	r3, #0
 8007390:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007398:	461a      	mov	r2, r3
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	431a      	orrs	r2, r3
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	431a      	orrs	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4619      	mov	r1, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	01db      	lsls	r3, r3, #7
 80073ac:	440b      	add	r3, r1
 80073ae:	3384      	adds	r3, #132	; 0x84
 80073b0:	4619      	mov	r1, r3
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	01db      	lsls	r3, r3, #7
 80073c2:	4413      	add	r3, r2
 80073c4:	3384      	adds	r3, #132	; 0x84
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	4611      	mov	r1, r2
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	01d2      	lsls	r2, r2, #7
 80073d2:	440a      	add	r2, r1
 80073d4:	3284      	adds	r2, #132	; 0x84
 80073d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073da:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	461a      	mov	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	01db      	lsls	r3, r3, #7
 80073e6:	4413      	add	r3, r2
 80073e8:	3384      	adds	r3, #132	; 0x84
 80073ea:	461a      	mov	r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	01db      	lsls	r3, r3, #7
 80073fc:	4413      	add	r3, r2
 80073fe:	3384      	adds	r3, #132	; 0x84
 8007400:	69da      	ldr	r2, [r3, #28]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4619      	mov	r1, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	01db      	lsls	r3, r3, #7
 800740c:	440b      	add	r3, r1
 800740e:	3384      	adds	r3, #132	; 0x84
 8007410:	4619      	mov	r1, r3
 8007412:	4b58      	ldr	r3, [pc, #352]	; (8007574 <LTDC_SetConfig+0x32c>)
 8007414:	4013      	ands	r3, r2
 8007416:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	69da      	ldr	r2, [r3, #28]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	68f9      	ldr	r1, [r7, #12]
 8007422:	6809      	ldr	r1, [r1, #0]
 8007424:	4608      	mov	r0, r1
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	01c9      	lsls	r1, r1, #7
 800742a:	4401      	add	r1, r0
 800742c:	3184      	adds	r1, #132	; 0x84
 800742e:	4313      	orrs	r3, r2
 8007430:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	01db      	lsls	r3, r3, #7
 800743c:	4413      	add	r3, r2
 800743e:	3384      	adds	r3, #132	; 0x84
 8007440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	01db      	lsls	r3, r3, #7
 800744c:	4413      	add	r3, r2
 800744e:	3384      	adds	r3, #132	; 0x84
 8007450:	461a      	mov	r2, r3
 8007452:	2300      	movs	r3, #0
 8007454:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	01db      	lsls	r3, r3, #7
 8007460:	4413      	add	r3, r2
 8007462:	3384      	adds	r3, #132	; 0x84
 8007464:	461a      	mov	r2, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d102      	bne.n	800747a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007474:	2304      	movs	r3, #4
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	e01b      	b.n	80074b2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d102      	bne.n	8007488 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007482:	2303      	movs	r3, #3
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	e014      	b.n	80074b2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b04      	cmp	r3, #4
 800748e:	d00b      	beq.n	80074a8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007494:	2b02      	cmp	r3, #2
 8007496:	d007      	beq.n	80074a8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800749c:	2b03      	cmp	r3, #3
 800749e:	d003      	beq.n	80074a8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80074a4:	2b07      	cmp	r3, #7
 80074a6:	d102      	bne.n	80074ae <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80074a8:	2302      	movs	r3, #2
 80074aa:	61fb      	str	r3, [r7, #28]
 80074ac:	e001      	b.n	80074b2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80074ae:	2301      	movs	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	01db      	lsls	r3, r3, #7
 80074bc:	4413      	add	r3, r2
 80074be:	3384      	adds	r3, #132	; 0x84
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	6812      	ldr	r2, [r2, #0]
 80074c6:	4611      	mov	r1, r2
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	01d2      	lsls	r2, r2, #7
 80074cc:	440a      	add	r2, r1
 80074ce:	3284      	adds	r2, #132	; 0x84
 80074d0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80074d4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	fb02 f303 	mul.w	r3, r2, r3
 80074e0:	041a      	lsls	r2, r3, #16
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	6859      	ldr	r1, [r3, #4]
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	1acb      	subs	r3, r1, r3
 80074ec:	69f9      	ldr	r1, [r7, #28]
 80074ee:	fb01 f303 	mul.w	r3, r1, r3
 80074f2:	3307      	adds	r3, #7
 80074f4:	68f9      	ldr	r1, [r7, #12]
 80074f6:	6809      	ldr	r1, [r1, #0]
 80074f8:	4608      	mov	r0, r1
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	01c9      	lsls	r1, r1, #7
 80074fe:	4401      	add	r1, r0
 8007500:	3184      	adds	r1, #132	; 0x84
 8007502:	4313      	orrs	r3, r2
 8007504:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	01db      	lsls	r3, r3, #7
 8007510:	4413      	add	r3, r2
 8007512:	3384      	adds	r3, #132	; 0x84
 8007514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4619      	mov	r1, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	01db      	lsls	r3, r3, #7
 8007520:	440b      	add	r3, r1
 8007522:	3384      	adds	r3, #132	; 0x84
 8007524:	4619      	mov	r1, r3
 8007526:	4b14      	ldr	r3, [pc, #80]	; (8007578 <LTDC_SetConfig+0x330>)
 8007528:	4013      	ands	r3, r2
 800752a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	01db      	lsls	r3, r3, #7
 8007536:	4413      	add	r3, r2
 8007538:	3384      	adds	r3, #132	; 0x84
 800753a:	461a      	mov	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	01db      	lsls	r3, r3, #7
 800754c:	4413      	add	r3, r2
 800754e:	3384      	adds	r3, #132	; 0x84
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	4611      	mov	r1, r2
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	01d2      	lsls	r2, r2, #7
 800755c:	440a      	add	r2, r1
 800755e:	3284      	adds	r2, #132	; 0x84
 8007560:	f043 0301 	orr.w	r3, r3, #1
 8007564:	6013      	str	r3, [r2, #0]
}
 8007566:	bf00      	nop
 8007568:	3724      	adds	r7, #36	; 0x24
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	fffff8f8 	.word	0xfffff8f8
 8007578:	fffff800 	.word	0xfffff800

0800757c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007584:	4b19      	ldr	r3, [pc, #100]	; (80075ec <HAL_PWREx_ConfigSupply+0x70>)
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b04      	cmp	r3, #4
 800758e:	d00a      	beq.n	80075a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007590:	4b16      	ldr	r3, [pc, #88]	; (80075ec <HAL_PWREx_ConfigSupply+0x70>)
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	429a      	cmp	r2, r3
 800759c:	d001      	beq.n	80075a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e01f      	b.n	80075e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	e01d      	b.n	80075e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80075a6:	4b11      	ldr	r3, [pc, #68]	; (80075ec <HAL_PWREx_ConfigSupply+0x70>)
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f023 0207 	bic.w	r2, r3, #7
 80075ae:	490f      	ldr	r1, [pc, #60]	; (80075ec <HAL_PWREx_ConfigSupply+0x70>)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80075b6:	f7fa fc01 	bl	8001dbc <HAL_GetTick>
 80075ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075bc:	e009      	b.n	80075d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80075be:	f7fa fbfd 	bl	8001dbc <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075cc:	d901      	bls.n	80075d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e007      	b.n	80075e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075d2:	4b06      	ldr	r3, [pc, #24]	; (80075ec <HAL_PWREx_ConfigSupply+0x70>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075de:	d1ee      	bne.n	80075be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	58024800 	.word	0x58024800

080075f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08c      	sub	sp, #48	; 0x30
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d102      	bne.n	8007604 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	f000 bc1d 	b.w	8007e3e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8087 	beq.w	8007720 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007612:	4b99      	ldr	r3, [pc, #612]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800761c:	4b96      	ldr	r3, [pc, #600]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	2b10      	cmp	r3, #16
 8007626:	d007      	beq.n	8007638 <HAL_RCC_OscConfig+0x48>
 8007628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762a:	2b18      	cmp	r3, #24
 800762c:	d110      	bne.n	8007650 <HAL_RCC_OscConfig+0x60>
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d10b      	bne.n	8007650 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007638:	4b8f      	ldr	r3, [pc, #572]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d06c      	beq.n	800771e <HAL_RCC_OscConfig+0x12e>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d168      	bne.n	800771e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e3f6      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007658:	d106      	bne.n	8007668 <HAL_RCC_OscConfig+0x78>
 800765a:	4b87      	ldr	r3, [pc, #540]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a86      	ldr	r2, [pc, #536]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	e02e      	b.n	80076c6 <HAL_RCC_OscConfig+0xd6>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10c      	bne.n	800768a <HAL_RCC_OscConfig+0x9a>
 8007670:	4b81      	ldr	r3, [pc, #516]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a80      	ldr	r2, [pc, #512]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	4b7e      	ldr	r3, [pc, #504]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a7d      	ldr	r2, [pc, #500]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	e01d      	b.n	80076c6 <HAL_RCC_OscConfig+0xd6>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007692:	d10c      	bne.n	80076ae <HAL_RCC_OscConfig+0xbe>
 8007694:	4b78      	ldr	r3, [pc, #480]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a77      	ldr	r2, [pc, #476]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 800769a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	4b75      	ldr	r3, [pc, #468]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a74      	ldr	r2, [pc, #464]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80076a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	e00b      	b.n	80076c6 <HAL_RCC_OscConfig+0xd6>
 80076ae:	4b72      	ldr	r3, [pc, #456]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a71      	ldr	r2, [pc, #452]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80076b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	4b6f      	ldr	r3, [pc, #444]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a6e      	ldr	r2, [pc, #440]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80076c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d013      	beq.n	80076f6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ce:	f7fa fb75 	bl	8001dbc <HAL_GetTick>
 80076d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076d4:	e008      	b.n	80076e8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076d6:	f7fa fb71 	bl	8001dbc <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b64      	cmp	r3, #100	; 0x64
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e3aa      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076e8:	4b63      	ldr	r3, [pc, #396]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0f0      	beq.n	80076d6 <HAL_RCC_OscConfig+0xe6>
 80076f4:	e014      	b.n	8007720 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f6:	f7fa fb61 	bl	8001dbc <HAL_GetTick>
 80076fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076fc:	e008      	b.n	8007710 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076fe:	f7fa fb5d 	bl	8001dbc <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b64      	cmp	r3, #100	; 0x64
 800770a:	d901      	bls.n	8007710 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e396      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007710:	4b59      	ldr	r3, [pc, #356]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f0      	bne.n	80076fe <HAL_RCC_OscConfig+0x10e>
 800771c:	e000      	b.n	8007720 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800771e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 80cb 	beq.w	80078c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800772e:	4b52      	ldr	r3, [pc, #328]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007736:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007738:	4b4f      	ldr	r3, [pc, #316]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d007      	beq.n	8007754 <HAL_RCC_OscConfig+0x164>
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	2b18      	cmp	r3, #24
 8007748:	d156      	bne.n	80077f8 <HAL_RCC_OscConfig+0x208>
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d151      	bne.n	80077f8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007754:	4b48      	ldr	r3, [pc, #288]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <HAL_RCC_OscConfig+0x17c>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e368      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800776c:	4b42      	ldr	r3, [pc, #264]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f023 0219 	bic.w	r2, r3, #25
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	493f      	ldr	r1, [pc, #252]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 800777a:	4313      	orrs	r3, r2
 800777c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800777e:	f7fa fb1d 	bl	8001dbc <HAL_GetTick>
 8007782:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007784:	e008      	b.n	8007798 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007786:	f7fa fb19 	bl	8001dbc <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e352      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007798:	4b37      	ldr	r3, [pc, #220]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f0      	beq.n	8007786 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077a4:	f7fa fb3a 	bl	8001e1c <HAL_GetREVID>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d817      	bhi.n	80077e2 <HAL_RCC_OscConfig+0x1f2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	d108      	bne.n	80077cc <HAL_RCC_OscConfig+0x1dc>
 80077ba:	4b2f      	ldr	r3, [pc, #188]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80077c2:	4a2d      	ldr	r2, [pc, #180]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80077c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077ca:	e07b      	b.n	80078c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077cc:	4b2a      	ldr	r3, [pc, #168]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	031b      	lsls	r3, r3, #12
 80077da:	4927      	ldr	r1, [pc, #156]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077e0:	e070      	b.n	80078c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077e2:	4b25      	ldr	r3, [pc, #148]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	061b      	lsls	r3, r3, #24
 80077f0:	4921      	ldr	r1, [pc, #132]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077f6:	e065      	b.n	80078c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d048      	beq.n	8007892 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007800:	4b1d      	ldr	r3, [pc, #116]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f023 0219 	bic.w	r2, r3, #25
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	491a      	ldr	r1, [pc, #104]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 800780e:	4313      	orrs	r3, r2
 8007810:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007812:	f7fa fad3 	bl	8001dbc <HAL_GetTick>
 8007816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007818:	e008      	b.n	800782c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800781a:	f7fa facf 	bl	8001dbc <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	2b02      	cmp	r3, #2
 8007826:	d901      	bls.n	800782c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e308      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800782c:	4b12      	ldr	r3, [pc, #72]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d0f0      	beq.n	800781a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007838:	f7fa faf0 	bl	8001e1c <HAL_GetREVID>
 800783c:	4603      	mov	r3, r0
 800783e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007842:	4293      	cmp	r3, r2
 8007844:	d81a      	bhi.n	800787c <HAL_RCC_OscConfig+0x28c>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	d108      	bne.n	8007860 <HAL_RCC_OscConfig+0x270>
 800784e:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007856:	4a08      	ldr	r2, [pc, #32]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800785c:	6053      	str	r3, [r2, #4]
 800785e:	e031      	b.n	80078c4 <HAL_RCC_OscConfig+0x2d4>
 8007860:	4b05      	ldr	r3, [pc, #20]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	031b      	lsls	r3, r3, #12
 800786e:	4902      	ldr	r1, [pc, #8]	; (8007878 <HAL_RCC_OscConfig+0x288>)
 8007870:	4313      	orrs	r3, r2
 8007872:	604b      	str	r3, [r1, #4]
 8007874:	e026      	b.n	80078c4 <HAL_RCC_OscConfig+0x2d4>
 8007876:	bf00      	nop
 8007878:	58024400 	.word	0x58024400
 800787c:	4b9a      	ldr	r3, [pc, #616]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	061b      	lsls	r3, r3, #24
 800788a:	4997      	ldr	r1, [pc, #604]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 800788c:	4313      	orrs	r3, r2
 800788e:	604b      	str	r3, [r1, #4]
 8007890:	e018      	b.n	80078c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007892:	4b95      	ldr	r3, [pc, #596]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a94      	ldr	r2, [pc, #592]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007898:	f023 0301 	bic.w	r3, r3, #1
 800789c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789e:	f7fa fa8d 	bl	8001dbc <HAL_GetTick>
 80078a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80078a4:	e008      	b.n	80078b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078a6:	f7fa fa89 	bl	8001dbc <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d901      	bls.n	80078b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e2c2      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80078b8:	4b8b      	ldr	r3, [pc, #556]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1f0      	bne.n	80078a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0310 	and.w	r3, r3, #16
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 80a9 	beq.w	8007a24 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078d2:	4b85      	ldr	r3, [pc, #532]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078dc:	4b82      	ldr	r3, [pc, #520]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d007      	beq.n	80078f8 <HAL_RCC_OscConfig+0x308>
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b18      	cmp	r3, #24
 80078ec:	d13a      	bne.n	8007964 <HAL_RCC_OscConfig+0x374>
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d135      	bne.n	8007964 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078f8:	4b7b      	ldr	r3, [pc, #492]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007900:	2b00      	cmp	r3, #0
 8007902:	d005      	beq.n	8007910 <HAL_RCC_OscConfig+0x320>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	2b80      	cmp	r3, #128	; 0x80
 800790a:	d001      	beq.n	8007910 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e296      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007910:	f7fa fa84 	bl	8001e1c <HAL_GetREVID>
 8007914:	4603      	mov	r3, r0
 8007916:	f241 0203 	movw	r2, #4099	; 0x1003
 800791a:	4293      	cmp	r3, r2
 800791c:	d817      	bhi.n	800794e <HAL_RCC_OscConfig+0x35e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	2b20      	cmp	r3, #32
 8007924:	d108      	bne.n	8007938 <HAL_RCC_OscConfig+0x348>
 8007926:	4b70      	ldr	r3, [pc, #448]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800792e:	4a6e      	ldr	r2, [pc, #440]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007934:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007936:	e075      	b.n	8007a24 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007938:	4b6b      	ldr	r3, [pc, #428]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	069b      	lsls	r3, r3, #26
 8007946:	4968      	ldr	r1, [pc, #416]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007948:	4313      	orrs	r3, r2
 800794a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800794c:	e06a      	b.n	8007a24 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800794e:	4b66      	ldr	r3, [pc, #408]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	061b      	lsls	r3, r3, #24
 800795c:	4962      	ldr	r1, [pc, #392]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 800795e:	4313      	orrs	r3, r2
 8007960:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007962:	e05f      	b.n	8007a24 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d042      	beq.n	80079f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800796c:	4b5e      	ldr	r3, [pc, #376]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a5d      	ldr	r2, [pc, #372]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007978:	f7fa fa20 	bl	8001dbc <HAL_GetTick>
 800797c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007980:	f7fa fa1c 	bl	8001dbc <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e255      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007992:	4b55      	ldr	r3, [pc, #340]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f0      	beq.n	8007980 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800799e:	f7fa fa3d 	bl	8001e1c <HAL_GetREVID>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d817      	bhi.n	80079dc <HAL_RCC_OscConfig+0x3ec>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	2b20      	cmp	r3, #32
 80079b2:	d108      	bne.n	80079c6 <HAL_RCC_OscConfig+0x3d6>
 80079b4:	4b4c      	ldr	r3, [pc, #304]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80079bc:	4a4a      	ldr	r2, [pc, #296]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 80079be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079c2:	6053      	str	r3, [r2, #4]
 80079c4:	e02e      	b.n	8007a24 <HAL_RCC_OscConfig+0x434>
 80079c6:	4b48      	ldr	r3, [pc, #288]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	069b      	lsls	r3, r3, #26
 80079d4:	4944      	ldr	r1, [pc, #272]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	604b      	str	r3, [r1, #4]
 80079da:	e023      	b.n	8007a24 <HAL_RCC_OscConfig+0x434>
 80079dc:	4b42      	ldr	r3, [pc, #264]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	061b      	lsls	r3, r3, #24
 80079ea:	493f      	ldr	r1, [pc, #252]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60cb      	str	r3, [r1, #12]
 80079f0:	e018      	b.n	8007a24 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80079f2:	4b3d      	ldr	r3, [pc, #244]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a3c      	ldr	r2, [pc, #240]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 80079f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fe:	f7fa f9dd 	bl	8001dbc <HAL_GetTick>
 8007a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a04:	e008      	b.n	8007a18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a06:	f7fa f9d9 	bl	8001dbc <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d901      	bls.n	8007a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e212      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a18:	4b33      	ldr	r3, [pc, #204]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1f0      	bne.n	8007a06 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d036      	beq.n	8007a9e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d019      	beq.n	8007a6c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a38:	4b2b      	ldr	r3, [pc, #172]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a3c:	4a2a      	ldr	r2, [pc, #168]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007a3e:	f043 0301 	orr.w	r3, r3, #1
 8007a42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a44:	f7fa f9ba 	bl	8001dbc <HAL_GetTick>
 8007a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a4c:	f7fa f9b6 	bl	8001dbc <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e1ef      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a5e:	4b22      	ldr	r3, [pc, #136]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0f0      	beq.n	8007a4c <HAL_RCC_OscConfig+0x45c>
 8007a6a:	e018      	b.n	8007a9e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a70:	4a1d      	ldr	r2, [pc, #116]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007a72:	f023 0301 	bic.w	r3, r3, #1
 8007a76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a78:	f7fa f9a0 	bl	8001dbc <HAL_GetTick>
 8007a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a80:	f7fa f99c 	bl	8001dbc <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e1d5      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a92:	4b15      	ldr	r3, [pc, #84]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1f0      	bne.n	8007a80 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d039      	beq.n	8007b1e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d01c      	beq.n	8007aec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a0c      	ldr	r2, [pc, #48]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007abc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007abe:	f7fa f97d 	bl	8001dbc <HAL_GetTick>
 8007ac2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ac4:	e008      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007ac6:	f7fa f979 	bl	8001dbc <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e1b2      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ad8:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <HAL_RCC_OscConfig+0x4f8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0f0      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x4d6>
 8007ae4:	e01b      	b.n	8007b1e <HAL_RCC_OscConfig+0x52e>
 8007ae6:	bf00      	nop
 8007ae8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007aec:	4b9b      	ldr	r3, [pc, #620]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a9a      	ldr	r2, [pc, #616]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007af6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007af8:	f7fa f960 	bl	8001dbc <HAL_GetTick>
 8007afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b00:	f7fa f95c 	bl	8001dbc <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e195      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b12:	4b92      	ldr	r3, [pc, #584]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0304 	and.w	r3, r3, #4
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 8081 	beq.w	8007c2e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b2c:	4b8c      	ldr	r3, [pc, #560]	; (8007d60 <HAL_RCC_OscConfig+0x770>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a8b      	ldr	r2, [pc, #556]	; (8007d60 <HAL_RCC_OscConfig+0x770>)
 8007b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b38:	f7fa f940 	bl	8001dbc <HAL_GetTick>
 8007b3c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b3e:	e008      	b.n	8007b52 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007b40:	f7fa f93c 	bl	8001dbc <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b64      	cmp	r3, #100	; 0x64
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e175      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b52:	4b83      	ldr	r3, [pc, #524]	; (8007d60 <HAL_RCC_OscConfig+0x770>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0f0      	beq.n	8007b40 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d106      	bne.n	8007b74 <HAL_RCC_OscConfig+0x584>
 8007b66:	4b7d      	ldr	r3, [pc, #500]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6a:	4a7c      	ldr	r2, [pc, #496]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007b6c:	f043 0301 	orr.w	r3, r3, #1
 8007b70:	6713      	str	r3, [r2, #112]	; 0x70
 8007b72:	e02d      	b.n	8007bd0 <HAL_RCC_OscConfig+0x5e0>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10c      	bne.n	8007b96 <HAL_RCC_OscConfig+0x5a6>
 8007b7c:	4b77      	ldr	r3, [pc, #476]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b80:	4a76      	ldr	r2, [pc, #472]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007b82:	f023 0301 	bic.w	r3, r3, #1
 8007b86:	6713      	str	r3, [r2, #112]	; 0x70
 8007b88:	4b74      	ldr	r3, [pc, #464]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8c:	4a73      	ldr	r2, [pc, #460]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007b8e:	f023 0304 	bic.w	r3, r3, #4
 8007b92:	6713      	str	r3, [r2, #112]	; 0x70
 8007b94:	e01c      	b.n	8007bd0 <HAL_RCC_OscConfig+0x5e0>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b05      	cmp	r3, #5
 8007b9c:	d10c      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x5c8>
 8007b9e:	4b6f      	ldr	r3, [pc, #444]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba2:	4a6e      	ldr	r2, [pc, #440]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007ba4:	f043 0304 	orr.w	r3, r3, #4
 8007ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8007baa:	4b6c      	ldr	r3, [pc, #432]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bae:	4a6b      	ldr	r2, [pc, #428]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007bb0:	f043 0301 	orr.w	r3, r3, #1
 8007bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8007bb6:	e00b      	b.n	8007bd0 <HAL_RCC_OscConfig+0x5e0>
 8007bb8:	4b68      	ldr	r3, [pc, #416]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbc:	4a67      	ldr	r2, [pc, #412]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007bbe:	f023 0301 	bic.w	r3, r3, #1
 8007bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8007bc4:	4b65      	ldr	r3, [pc, #404]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc8:	4a64      	ldr	r2, [pc, #400]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007bca:	f023 0304 	bic.w	r3, r3, #4
 8007bce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d015      	beq.n	8007c04 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd8:	f7fa f8f0 	bl	8001dbc <HAL_GetTick>
 8007bdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bde:	e00a      	b.n	8007bf6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007be0:	f7fa f8ec 	bl	8001dbc <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e123      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bf6:	4b59      	ldr	r3, [pc, #356]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0ee      	beq.n	8007be0 <HAL_RCC_OscConfig+0x5f0>
 8007c02:	e014      	b.n	8007c2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c04:	f7fa f8da 	bl	8001dbc <HAL_GetTick>
 8007c08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c0a:	e00a      	b.n	8007c22 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c0c:	f7fa f8d6 	bl	8001dbc <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e10d      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c22:	4b4e      	ldr	r3, [pc, #312]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1ee      	bne.n	8007c0c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 8102 	beq.w	8007e3c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007c38:	4b48      	ldr	r3, [pc, #288]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c40:	2b18      	cmp	r3, #24
 8007c42:	f000 80bd 	beq.w	8007dc0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	f040 809e 	bne.w	8007d8c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c50:	4b42      	ldr	r3, [pc, #264]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a41      	ldr	r2, [pc, #260]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5c:	f7fa f8ae 	bl	8001dbc <HAL_GetTick>
 8007c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c64:	f7fa f8aa 	bl	8001dbc <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e0e3      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c76:	4b39      	ldr	r3, [pc, #228]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f0      	bne.n	8007c64 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c82:	4b36      	ldr	r3, [pc, #216]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c86:	4b37      	ldr	r3, [pc, #220]	; (8007d64 <HAL_RCC_OscConfig+0x774>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007c92:	0112      	lsls	r2, r2, #4
 8007c94:	430a      	orrs	r2, r1
 8007c96:	4931      	ldr	r1, [pc, #196]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	628b      	str	r3, [r1, #40]	; 0x28
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007caa:	3b01      	subs	r3, #1
 8007cac:	025b      	lsls	r3, r3, #9
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	041b      	lsls	r3, r3, #16
 8007cba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	061b      	lsls	r3, r3, #24
 8007cc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ccc:	4923      	ldr	r1, [pc, #140]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007cd2:	4b22      	ldr	r3, [pc, #136]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	4a21      	ldr	r2, [pc, #132]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007cde:	4b1f      	ldr	r3, [pc, #124]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ce2:	4b21      	ldr	r3, [pc, #132]	; (8007d68 <HAL_RCC_OscConfig+0x778>)
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007cea:	00d2      	lsls	r2, r2, #3
 8007cec:	491b      	ldr	r1, [pc, #108]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007cf2:	4b1a      	ldr	r3, [pc, #104]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf6:	f023 020c 	bic.w	r2, r3, #12
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	4917      	ldr	r1, [pc, #92]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007d04:	4b15      	ldr	r3, [pc, #84]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	f023 0202 	bic.w	r2, r3, #2
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d10:	4912      	ldr	r1, [pc, #72]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d16:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	4a10      	ldr	r2, [pc, #64]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d22:	4b0e      	ldr	r3, [pc, #56]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	4a0d      	ldr	r2, [pc, #52]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007d2e:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d32:	4a0a      	ldr	r2, [pc, #40]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007d3a:	4b08      	ldr	r3, [pc, #32]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3e:	4a07      	ldr	r2, [pc, #28]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d40:	f043 0301 	orr.w	r3, r3, #1
 8007d44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d46:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a04      	ldr	r2, [pc, #16]	; (8007d5c <HAL_RCC_OscConfig+0x76c>)
 8007d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d52:	f7fa f833 	bl	8001dbc <HAL_GetTick>
 8007d56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d58:	e011      	b.n	8007d7e <HAL_RCC_OscConfig+0x78e>
 8007d5a:	bf00      	nop
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	58024800 	.word	0x58024800
 8007d64:	fffffc0c 	.word	0xfffffc0c
 8007d68:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d6c:	f7fa f826 	bl	8001dbc <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e05f      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d7e:	4b32      	ldr	r3, [pc, #200]	; (8007e48 <HAL_RCC_OscConfig+0x858>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0f0      	beq.n	8007d6c <HAL_RCC_OscConfig+0x77c>
 8007d8a:	e057      	b.n	8007e3c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d8c:	4b2e      	ldr	r3, [pc, #184]	; (8007e48 <HAL_RCC_OscConfig+0x858>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a2d      	ldr	r2, [pc, #180]	; (8007e48 <HAL_RCC_OscConfig+0x858>)
 8007d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d98:	f7fa f810 	bl	8001dbc <HAL_GetTick>
 8007d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007da0:	f7fa f80c 	bl	8001dbc <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e045      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007db2:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <HAL_RCC_OscConfig+0x858>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1f0      	bne.n	8007da0 <HAL_RCC_OscConfig+0x7b0>
 8007dbe:	e03d      	b.n	8007e3c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007dc0:	4b21      	ldr	r3, [pc, #132]	; (8007e48 <HAL_RCC_OscConfig+0x858>)
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007dc6:	4b20      	ldr	r3, [pc, #128]	; (8007e48 <HAL_RCC_OscConfig+0x858>)
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d031      	beq.n	8007e38 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f003 0203 	and.w	r2, r3, #3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d12a      	bne.n	8007e38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	091b      	lsrs	r3, r3, #4
 8007de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d122      	bne.n	8007e38 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d11a      	bne.n	8007e38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	0a5b      	lsrs	r3, r3, #9
 8007e06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d111      	bne.n	8007e38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	0c1b      	lsrs	r3, r3, #16
 8007e18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d108      	bne.n	8007e38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	0e1b      	lsrs	r3, r3, #24
 8007e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e32:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d001      	beq.n	8007e3c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e000      	b.n	8007e3e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3730      	adds	r7, #48	; 0x30
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	58024400 	.word	0x58024400

08007e4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e19c      	b.n	800819a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e60:	4b8a      	ldr	r3, [pc, #552]	; (800808c <HAL_RCC_ClockConfig+0x240>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d910      	bls.n	8007e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e6e:	4b87      	ldr	r3, [pc, #540]	; (800808c <HAL_RCC_ClockConfig+0x240>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f023 020f 	bic.w	r2, r3, #15
 8007e76:	4985      	ldr	r1, [pc, #532]	; (800808c <HAL_RCC_ClockConfig+0x240>)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e7e:	4b83      	ldr	r3, [pc, #524]	; (800808c <HAL_RCC_ClockConfig+0x240>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 030f 	and.w	r3, r3, #15
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d001      	beq.n	8007e90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e184      	b.n	800819a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d010      	beq.n	8007ebe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	4b7b      	ldr	r3, [pc, #492]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d908      	bls.n	8007ebe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007eac:	4b78      	ldr	r3, [pc, #480]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	4975      	ldr	r1, [pc, #468]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0308 	and.w	r3, r3, #8
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d010      	beq.n	8007eec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	695a      	ldr	r2, [r3, #20]
 8007ece:	4b70      	ldr	r3, [pc, #448]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d908      	bls.n	8007eec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007eda:	4b6d      	ldr	r3, [pc, #436]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	496a      	ldr	r1, [pc, #424]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d010      	beq.n	8007f1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	699a      	ldr	r2, [r3, #24]
 8007efc:	4b64      	ldr	r3, [pc, #400]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d908      	bls.n	8007f1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f08:	4b61      	ldr	r3, [pc, #388]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	495e      	ldr	r1, [pc, #376]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0320 	and.w	r3, r3, #32
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d010      	beq.n	8007f48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	69da      	ldr	r2, [r3, #28]
 8007f2a:	4b59      	ldr	r3, [pc, #356]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d908      	bls.n	8007f48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f36:	4b56      	ldr	r3, [pc, #344]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	4953      	ldr	r1, [pc, #332]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007f44:	4313      	orrs	r3, r2
 8007f46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0302 	and.w	r3, r3, #2
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d010      	beq.n	8007f76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	4b4d      	ldr	r3, [pc, #308]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	f003 030f 	and.w	r3, r3, #15
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d908      	bls.n	8007f76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f64:	4b4a      	ldr	r3, [pc, #296]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	f023 020f 	bic.w	r2, r3, #15
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	4947      	ldr	r1, [pc, #284]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d055      	beq.n	800802e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007f82:	4b43      	ldr	r3, [pc, #268]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	4940      	ldr	r1, [pc, #256]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d107      	bne.n	8007fac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f9c:	4b3c      	ldr	r3, [pc, #240]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d121      	bne.n	8007fec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e0f6      	b.n	800819a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d107      	bne.n	8007fc4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fb4:	4b36      	ldr	r3, [pc, #216]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d115      	bne.n	8007fec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e0ea      	b.n	800819a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d107      	bne.n	8007fdc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fcc:	4b30      	ldr	r3, [pc, #192]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d109      	bne.n	8007fec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e0de      	b.n	800819a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fdc:	4b2c      	ldr	r3, [pc, #176]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e0d6      	b.n	800819a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007fec:	4b28      	ldr	r3, [pc, #160]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f023 0207 	bic.w	r2, r3, #7
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	4925      	ldr	r1, [pc, #148]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ffe:	f7f9 fedd 	bl	8001dbc <HAL_GetTick>
 8008002:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008004:	e00a      	b.n	800801c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008006:	f7f9 fed9 	bl	8001dbc <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	f241 3288 	movw	r2, #5000	; 0x1388
 8008014:	4293      	cmp	r3, r2
 8008016:	d901      	bls.n	800801c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e0be      	b.n	800819a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800801c:	4b1c      	ldr	r3, [pc, #112]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	00db      	lsls	r3, r3, #3
 800802a:	429a      	cmp	r2, r3
 800802c:	d1eb      	bne.n	8008006 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d010      	beq.n	800805c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	4b14      	ldr	r3, [pc, #80]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	f003 030f 	and.w	r3, r3, #15
 8008046:	429a      	cmp	r2, r3
 8008048:	d208      	bcs.n	800805c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800804a:	4b11      	ldr	r3, [pc, #68]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	f023 020f 	bic.w	r2, r3, #15
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	490e      	ldr	r1, [pc, #56]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8008058:	4313      	orrs	r3, r2
 800805a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800805c:	4b0b      	ldr	r3, [pc, #44]	; (800808c <HAL_RCC_ClockConfig+0x240>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 030f 	and.w	r3, r3, #15
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d214      	bcs.n	8008094 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800806a:	4b08      	ldr	r3, [pc, #32]	; (800808c <HAL_RCC_ClockConfig+0x240>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f023 020f 	bic.w	r2, r3, #15
 8008072:	4906      	ldr	r1, [pc, #24]	; (800808c <HAL_RCC_ClockConfig+0x240>)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	4313      	orrs	r3, r2
 8008078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800807a:	4b04      	ldr	r3, [pc, #16]	; (800808c <HAL_RCC_ClockConfig+0x240>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 030f 	and.w	r3, r3, #15
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	429a      	cmp	r2, r3
 8008086:	d005      	beq.n	8008094 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e086      	b.n	800819a <HAL_RCC_ClockConfig+0x34e>
 800808c:	52002000 	.word	0x52002000
 8008090:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d010      	beq.n	80080c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691a      	ldr	r2, [r3, #16]
 80080a4:	4b3f      	ldr	r3, [pc, #252]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d208      	bcs.n	80080c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80080b0:	4b3c      	ldr	r3, [pc, #240]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	4939      	ldr	r1, [pc, #228]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d010      	beq.n	80080f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	695a      	ldr	r2, [r3, #20]
 80080d2:	4b34      	ldr	r3, [pc, #208]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080da:	429a      	cmp	r2, r3
 80080dc:	d208      	bcs.n	80080f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80080de:	4b31      	ldr	r3, [pc, #196]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	492e      	ldr	r1, [pc, #184]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0310 	and.w	r3, r3, #16
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d010      	beq.n	800811e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699a      	ldr	r2, [r3, #24]
 8008100:	4b28      	ldr	r3, [pc, #160]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008108:	429a      	cmp	r2, r3
 800810a:	d208      	bcs.n	800811e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800810c:	4b25      	ldr	r3, [pc, #148]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	4922      	ldr	r1, [pc, #136]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 800811a:	4313      	orrs	r3, r2
 800811c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d010      	beq.n	800814c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	69da      	ldr	r2, [r3, #28]
 800812e:	4b1d      	ldr	r3, [pc, #116]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008136:	429a      	cmp	r2, r3
 8008138:	d208      	bcs.n	800814c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800813a:	4b1a      	ldr	r3, [pc, #104]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	4917      	ldr	r1, [pc, #92]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 8008148:	4313      	orrs	r3, r2
 800814a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800814c:	f000 f834 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 8008150:	4602      	mov	r2, r0
 8008152:	4b14      	ldr	r3, [pc, #80]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	0a1b      	lsrs	r3, r3, #8
 8008158:	f003 030f 	and.w	r3, r3, #15
 800815c:	4912      	ldr	r1, [pc, #72]	; (80081a8 <HAL_RCC_ClockConfig+0x35c>)
 800815e:	5ccb      	ldrb	r3, [r1, r3]
 8008160:	f003 031f 	and.w	r3, r3, #31
 8008164:	fa22 f303 	lsr.w	r3, r2, r3
 8008168:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800816a:	4b0e      	ldr	r3, [pc, #56]	; (80081a4 <HAL_RCC_ClockConfig+0x358>)
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	f003 030f 	and.w	r3, r3, #15
 8008172:	4a0d      	ldr	r2, [pc, #52]	; (80081a8 <HAL_RCC_ClockConfig+0x35c>)
 8008174:	5cd3      	ldrb	r3, [r2, r3]
 8008176:	f003 031f 	and.w	r3, r3, #31
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	fa22 f303 	lsr.w	r3, r2, r3
 8008180:	4a0a      	ldr	r2, [pc, #40]	; (80081ac <HAL_RCC_ClockConfig+0x360>)
 8008182:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008184:	4a0a      	ldr	r2, [pc, #40]	; (80081b0 <HAL_RCC_ClockConfig+0x364>)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800818a:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <HAL_RCC_ClockConfig+0x368>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f7f9 fdca 	bl	8001d28 <HAL_InitTick>
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008198:	7bfb      	ldrb	r3, [r7, #15]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	58024400 	.word	0x58024400
 80081a8:	0800d18c 	.word	0x0800d18c
 80081ac:	24000004 	.word	0x24000004
 80081b0:	24000000 	.word	0x24000000
 80081b4:	24000008 	.word	0x24000008

080081b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b089      	sub	sp, #36	; 0x24
 80081bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081be:	4bb3      	ldr	r3, [pc, #716]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081c6:	2b18      	cmp	r3, #24
 80081c8:	f200 8155 	bhi.w	8008476 <HAL_RCC_GetSysClockFreq+0x2be>
 80081cc:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80081ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d2:	bf00      	nop
 80081d4:	08008239 	.word	0x08008239
 80081d8:	08008477 	.word	0x08008477
 80081dc:	08008477 	.word	0x08008477
 80081e0:	08008477 	.word	0x08008477
 80081e4:	08008477 	.word	0x08008477
 80081e8:	08008477 	.word	0x08008477
 80081ec:	08008477 	.word	0x08008477
 80081f0:	08008477 	.word	0x08008477
 80081f4:	0800825f 	.word	0x0800825f
 80081f8:	08008477 	.word	0x08008477
 80081fc:	08008477 	.word	0x08008477
 8008200:	08008477 	.word	0x08008477
 8008204:	08008477 	.word	0x08008477
 8008208:	08008477 	.word	0x08008477
 800820c:	08008477 	.word	0x08008477
 8008210:	08008477 	.word	0x08008477
 8008214:	08008265 	.word	0x08008265
 8008218:	08008477 	.word	0x08008477
 800821c:	08008477 	.word	0x08008477
 8008220:	08008477 	.word	0x08008477
 8008224:	08008477 	.word	0x08008477
 8008228:	08008477 	.word	0x08008477
 800822c:	08008477 	.word	0x08008477
 8008230:	08008477 	.word	0x08008477
 8008234:	0800826b 	.word	0x0800826b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008238:	4b94      	ldr	r3, [pc, #592]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0320 	and.w	r3, r3, #32
 8008240:	2b00      	cmp	r3, #0
 8008242:	d009      	beq.n	8008258 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008244:	4b91      	ldr	r3, [pc, #580]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	08db      	lsrs	r3, r3, #3
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	4a90      	ldr	r2, [pc, #576]	; (8008490 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008250:	fa22 f303 	lsr.w	r3, r2, r3
 8008254:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008256:	e111      	b.n	800847c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008258:	4b8d      	ldr	r3, [pc, #564]	; (8008490 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800825a:	61bb      	str	r3, [r7, #24]
    break;
 800825c:	e10e      	b.n	800847c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800825e:	4b8d      	ldr	r3, [pc, #564]	; (8008494 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008260:	61bb      	str	r3, [r7, #24]
    break;
 8008262:	e10b      	b.n	800847c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008264:	4b8c      	ldr	r3, [pc, #560]	; (8008498 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008266:	61bb      	str	r3, [r7, #24]
    break;
 8008268:	e108      	b.n	800847c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800826a:	4b88      	ldr	r3, [pc, #544]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008274:	4b85      	ldr	r3, [pc, #532]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008278:	091b      	lsrs	r3, r3, #4
 800827a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800827e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008280:	4b82      	ldr	r3, [pc, #520]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800828a:	4b80      	ldr	r3, [pc, #512]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800828c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828e:	08db      	lsrs	r3, r3, #3
 8008290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	fb02 f303 	mul.w	r3, r2, r3
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 80e1 	beq.w	8008470 <HAL_RCC_GetSysClockFreq+0x2b8>
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	f000 8083 	beq.w	80083bc <HAL_RCC_GetSysClockFreq+0x204>
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	f200 80a1 	bhi.w	8008400 <HAL_RCC_GetSysClockFreq+0x248>
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <HAL_RCC_GetSysClockFreq+0x114>
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d056      	beq.n	8008378 <HAL_RCC_GetSysClockFreq+0x1c0>
 80082ca:	e099      	b.n	8008400 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082cc:	4b6f      	ldr	r3, [pc, #444]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d02d      	beq.n	8008334 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082d8:	4b6c      	ldr	r3, [pc, #432]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	08db      	lsrs	r3, r3, #3
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	4a6b      	ldr	r2, [pc, #428]	; (8008490 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082e4:	fa22 f303 	lsr.w	r3, r2, r3
 80082e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	ee07 3a90 	vmov	s15, r3
 80082f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008302:	4b62      	ldr	r3, [pc, #392]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008312:	ed97 6a02 	vldr	s12, [r7, #8]
 8008316:	eddf 5a61 	vldr	s11, [pc, #388]	; 800849c <HAL_RCC_GetSysClockFreq+0x2e4>
 800831a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800832a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008332:	e087      	b.n	8008444 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80084a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008346:	4b51      	ldr	r3, [pc, #324]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008356:	ed97 6a02 	vldr	s12, [r7, #8]
 800835a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800849c <HAL_RCC_GetSysClockFreq+0x2e4>
 800835e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800836a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008376:	e065      	b.n	8008444 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008382:	eddf 6a48 	vldr	s13, [pc, #288]	; 80084a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838a:	4b40      	ldr	r3, [pc, #256]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800838c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008392:	ee07 3a90 	vmov	s15, r3
 8008396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839a:	ed97 6a02 	vldr	s12, [r7, #8]
 800839e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800849c <HAL_RCC_GetSysClockFreq+0x2e4>
 80083a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ba:	e043      	b.n	8008444 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80084a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80083ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ce:	4b2f      	ldr	r3, [pc, #188]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083de:	ed97 6a02 	vldr	s12, [r7, #8]
 80083e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800849c <HAL_RCC_GetSysClockFreq+0x2e4>
 80083e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083fe:	e021      	b.n	8008444 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80084a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800840e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008412:	4b1e      	ldr	r3, [pc, #120]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008422:	ed97 6a02 	vldr	s12, [r7, #8]
 8008426:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800849c <HAL_RCC_GetSysClockFreq+0x2e4>
 800842a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008442:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008444:	4b11      	ldr	r3, [pc, #68]	; (800848c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008448:	0a5b      	lsrs	r3, r3, #9
 800844a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800844e:	3301      	adds	r3, #1
 8008450:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	ee07 3a90 	vmov	s15, r3
 8008458:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800845c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008468:	ee17 3a90 	vmov	r3, s15
 800846c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800846e:	e005      	b.n	800847c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008470:	2300      	movs	r3, #0
 8008472:	61bb      	str	r3, [r7, #24]
    break;
 8008474:	e002      	b.n	800847c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008476:	4b07      	ldr	r3, [pc, #28]	; (8008494 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008478:	61bb      	str	r3, [r7, #24]
    break;
 800847a:	bf00      	nop
  }

  return sysclockfreq;
 800847c:	69bb      	ldr	r3, [r7, #24]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3724      	adds	r7, #36	; 0x24
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	58024400 	.word	0x58024400
 8008490:	03d09000 	.word	0x03d09000
 8008494:	003d0900 	.word	0x003d0900
 8008498:	007a1200 	.word	0x007a1200
 800849c:	46000000 	.word	0x46000000
 80084a0:	4c742400 	.word	0x4c742400
 80084a4:	4a742400 	.word	0x4a742400
 80084a8:	4af42400 	.word	0x4af42400

080084ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80084b2:	f7ff fe81 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 80084b6:	4602      	mov	r2, r0
 80084b8:	4b10      	ldr	r3, [pc, #64]	; (80084fc <HAL_RCC_GetHCLKFreq+0x50>)
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	0a1b      	lsrs	r3, r3, #8
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	490f      	ldr	r1, [pc, #60]	; (8008500 <HAL_RCC_GetHCLKFreq+0x54>)
 80084c4:	5ccb      	ldrb	r3, [r1, r3]
 80084c6:	f003 031f 	and.w	r3, r3, #31
 80084ca:	fa22 f303 	lsr.w	r3, r2, r3
 80084ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80084d0:	4b0a      	ldr	r3, [pc, #40]	; (80084fc <HAL_RCC_GetHCLKFreq+0x50>)
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	4a09      	ldr	r2, [pc, #36]	; (8008500 <HAL_RCC_GetHCLKFreq+0x54>)
 80084da:	5cd3      	ldrb	r3, [r2, r3]
 80084dc:	f003 031f 	and.w	r3, r3, #31
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	fa22 f303 	lsr.w	r3, r2, r3
 80084e6:	4a07      	ldr	r2, [pc, #28]	; (8008504 <HAL_RCC_GetHCLKFreq+0x58>)
 80084e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80084ea:	4a07      	ldr	r2, [pc, #28]	; (8008508 <HAL_RCC_GetHCLKFreq+0x5c>)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80084f0:	4b04      	ldr	r3, [pc, #16]	; (8008504 <HAL_RCC_GetHCLKFreq+0x58>)
 80084f2:	681b      	ldr	r3, [r3, #0]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	58024400 	.word	0x58024400
 8008500:	0800d18c 	.word	0x0800d18c
 8008504:	24000004 	.word	0x24000004
 8008508:	24000000 	.word	0x24000000

0800850c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008514:	2300      	movs	r3, #0
 8008516:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008518:	2300      	movs	r3, #0
 800851a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d03f      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800852c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008530:	d02a      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008532:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008536:	d824      	bhi.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008538:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800853c:	d018      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800853e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008542:	d81e      	bhi.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008544:	2b00      	cmp	r3, #0
 8008546:	d003      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800854c:	d007      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800854e:	e018      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008550:	4ba3      	ldr	r3, [pc, #652]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	4aa2      	ldr	r2, [pc, #648]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800855a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800855c:	e015      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3304      	adds	r3, #4
 8008562:	2102      	movs	r1, #2
 8008564:	4618      	mov	r0, r3
 8008566:	f001 fff9 	bl	800a55c <RCCEx_PLL2_Config>
 800856a:	4603      	mov	r3, r0
 800856c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800856e:	e00c      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3324      	adds	r3, #36	; 0x24
 8008574:	2102      	movs	r1, #2
 8008576:	4618      	mov	r0, r3
 8008578:	f002 f8a2 	bl	800a6c0 <RCCEx_PLL3_Config>
 800857c:	4603      	mov	r3, r0
 800857e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008580:	e003      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	75fb      	strb	r3, [r7, #23]
      break;
 8008586:	e000      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800858a:	7dfb      	ldrb	r3, [r7, #23]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d109      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008590:	4b93      	ldr	r3, [pc, #588]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800859c:	4990      	ldr	r1, [pc, #576]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	650b      	str	r3, [r1, #80]	; 0x50
 80085a2:	e001      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d03d      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	d826      	bhi.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080085d9 	.word	0x080085d9
 80085c8:	080085e7 	.word	0x080085e7
 80085cc:	080085f9 	.word	0x080085f9
 80085d0:	08008611 	.word	0x08008611
 80085d4:	08008611 	.word	0x08008611
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085d8:	4b81      	ldr	r3, [pc, #516]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	4a80      	ldr	r2, [pc, #512]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085e4:	e015      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3304      	adds	r3, #4
 80085ea:	2100      	movs	r1, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	f001 ffb5 	bl	800a55c <RCCEx_PLL2_Config>
 80085f2:	4603      	mov	r3, r0
 80085f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085f6:	e00c      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3324      	adds	r3, #36	; 0x24
 80085fc:	2100      	movs	r1, #0
 80085fe:	4618      	mov	r0, r3
 8008600:	f002 f85e 	bl	800a6c0 <RCCEx_PLL3_Config>
 8008604:	4603      	mov	r3, r0
 8008606:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008608:	e003      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	75fb      	strb	r3, [r7, #23]
      break;
 800860e:	e000      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008612:	7dfb      	ldrb	r3, [r7, #23]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d109      	bne.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008618:	4b71      	ldr	r3, [pc, #452]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800861a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800861c:	f023 0207 	bic.w	r2, r3, #7
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008624:	496e      	ldr	r1, [pc, #440]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008626:	4313      	orrs	r3, r2
 8008628:	650b      	str	r3, [r1, #80]	; 0x50
 800862a:	e001      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008638:	2b00      	cmp	r3, #0
 800863a:	d042      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008644:	d02b      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800864a:	d825      	bhi.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800864c:	2bc0      	cmp	r3, #192	; 0xc0
 800864e:	d028      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008650:	2bc0      	cmp	r3, #192	; 0xc0
 8008652:	d821      	bhi.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008654:	2b80      	cmp	r3, #128	; 0x80
 8008656:	d016      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008658:	2b80      	cmp	r3, #128	; 0x80
 800865a:	d81d      	bhi.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008660:	2b40      	cmp	r3, #64	; 0x40
 8008662:	d007      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008664:	e018      	b.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008666:	4b5e      	ldr	r3, [pc, #376]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	4a5d      	ldr	r2, [pc, #372]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800866c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008670:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008672:	e017      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3304      	adds	r3, #4
 8008678:	2100      	movs	r1, #0
 800867a:	4618      	mov	r0, r3
 800867c:	f001 ff6e 	bl	800a55c <RCCEx_PLL2_Config>
 8008680:	4603      	mov	r3, r0
 8008682:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008684:	e00e      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3324      	adds	r3, #36	; 0x24
 800868a:	2100      	movs	r1, #0
 800868c:	4618      	mov	r0, r3
 800868e:	f002 f817 	bl	800a6c0 <RCCEx_PLL3_Config>
 8008692:	4603      	mov	r3, r0
 8008694:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008696:	e005      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	75fb      	strb	r3, [r7, #23]
      break;
 800869c:	e002      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800869e:	bf00      	nop
 80086a0:	e000      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80086a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086a4:	7dfb      	ldrb	r3, [r7, #23]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d109      	bne.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80086aa:	4b4d      	ldr	r3, [pc, #308]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b6:	494a      	ldr	r1, [pc, #296]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	650b      	str	r3, [r1, #80]	; 0x50
 80086bc:	e001      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d049      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80086d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086d8:	d030      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80086da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086de:	d82a      	bhi.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80086e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80086e4:	d02c      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80086e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80086ea:	d824      	bhi.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80086ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086f0:	d018      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80086f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086f6:	d81e      	bhi.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80086fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008700:	d007      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008702:	e018      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008704:	4b36      	ldr	r3, [pc, #216]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	4a35      	ldr	r2, [pc, #212]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800870a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800870e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008710:	e017      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3304      	adds	r3, #4
 8008716:	2100      	movs	r1, #0
 8008718:	4618      	mov	r0, r3
 800871a:	f001 ff1f 	bl	800a55c <RCCEx_PLL2_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008722:	e00e      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3324      	adds	r3, #36	; 0x24
 8008728:	2100      	movs	r1, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f001 ffc8 	bl	800a6c0 <RCCEx_PLL3_Config>
 8008730:	4603      	mov	r3, r0
 8008732:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008734:	e005      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	75fb      	strb	r3, [r7, #23]
      break;
 800873a:	e002      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800873c:	bf00      	nop
 800873e:	e000      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10a      	bne.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008748:	4b25      	ldr	r3, [pc, #148]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800874a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800874c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008756:	4922      	ldr	r1, [pc, #136]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008758:	4313      	orrs	r3, r2
 800875a:	658b      	str	r3, [r1, #88]	; 0x58
 800875c:	e001      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800876a:	2b00      	cmp	r3, #0
 800876c:	d04b      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008778:	d030      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800877a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800877e:	d82a      	bhi.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008780:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008784:	d02e      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008786:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800878a:	d824      	bhi.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800878c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008790:	d018      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008796:	d81e      	bhi.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800879c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087a0:	d007      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80087a2:	e018      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087a4:	4b0e      	ldr	r3, [pc, #56]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	4a0d      	ldr	r2, [pc, #52]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087b0:	e019      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	3304      	adds	r3, #4
 80087b6:	2100      	movs	r1, #0
 80087b8:	4618      	mov	r0, r3
 80087ba:	f001 fecf 	bl	800a55c <RCCEx_PLL2_Config>
 80087be:	4603      	mov	r3, r0
 80087c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80087c2:	e010      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3324      	adds	r3, #36	; 0x24
 80087c8:	2100      	movs	r1, #0
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 ff78 	bl	800a6c0 <RCCEx_PLL3_Config>
 80087d0:	4603      	mov	r3, r0
 80087d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087d4:	e007      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	75fb      	strb	r3, [r7, #23]
      break;
 80087da:	e004      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80087dc:	bf00      	nop
 80087de:	e002      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80087e0:	58024400 	.word	0x58024400
      break;
 80087e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80087ec:	4b99      	ldr	r3, [pc, #612]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80087fa:	4996      	ldr	r1, [pc, #600]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	658b      	str	r3, [r1, #88]	; 0x58
 8008800:	e001      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d032      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008816:	2b30      	cmp	r3, #48	; 0x30
 8008818:	d01c      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800881a:	2b30      	cmp	r3, #48	; 0x30
 800881c:	d817      	bhi.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800881e:	2b20      	cmp	r3, #32
 8008820:	d00c      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008822:	2b20      	cmp	r3, #32
 8008824:	d813      	bhi.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d016      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800882a:	2b10      	cmp	r3, #16
 800882c:	d10f      	bne.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800882e:	4b89      	ldr	r3, [pc, #548]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	4a88      	ldr	r2, [pc, #544]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008838:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800883a:	e00e      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	3304      	adds	r3, #4
 8008840:	2102      	movs	r1, #2
 8008842:	4618      	mov	r0, r3
 8008844:	f001 fe8a 	bl	800a55c <RCCEx_PLL2_Config>
 8008848:	4603      	mov	r3, r0
 800884a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800884c:	e005      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	75fb      	strb	r3, [r7, #23]
      break;
 8008852:	e002      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008854:	bf00      	nop
 8008856:	e000      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800885a:	7dfb      	ldrb	r3, [r7, #23]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d109      	bne.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008860:	4b7c      	ldr	r3, [pc, #496]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008864:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800886c:	4979      	ldr	r1, [pc, #484]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800886e:	4313      	orrs	r3, r2
 8008870:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008872:	e001      	b.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d047      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800888c:	d030      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800888e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008892:	d82a      	bhi.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008894:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008898:	d02c      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800889a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800889e:	d824      	bhi.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80088a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088a4:	d018      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80088a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088aa:	d81e      	bhi.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d003      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80088b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b4:	d007      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80088b6:	e018      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088b8:	4b66      	ldr	r3, [pc, #408]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	4a65      	ldr	r2, [pc, #404]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088c4:	e017      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3304      	adds	r3, #4
 80088ca:	2100      	movs	r1, #0
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 fe45 	bl	800a55c <RCCEx_PLL2_Config>
 80088d2:	4603      	mov	r3, r0
 80088d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088d6:	e00e      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3324      	adds	r3, #36	; 0x24
 80088dc:	2100      	movs	r1, #0
 80088de:	4618      	mov	r0, r3
 80088e0:	f001 feee 	bl	800a6c0 <RCCEx_PLL3_Config>
 80088e4:	4603      	mov	r3, r0
 80088e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088e8:	e005      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	75fb      	strb	r3, [r7, #23]
      break;
 80088ee:	e002      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80088f0:	bf00      	nop
 80088f2:	e000      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80088f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d109      	bne.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80088fc:	4b55      	ldr	r3, [pc, #340]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008900:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008908:	4952      	ldr	r1, [pc, #328]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800890a:	4313      	orrs	r3, r2
 800890c:	650b      	str	r3, [r1, #80]	; 0x50
 800890e:	e001      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d049      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008928:	d02e      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800892a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800892e:	d828      	bhi.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008930:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008934:	d02a      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008936:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800893a:	d822      	bhi.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800893c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008940:	d026      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008942:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008946:	d81c      	bhi.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800894c:	d010      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800894e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008952:	d816      	bhi.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01d      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800895c:	d111      	bne.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	3304      	adds	r3, #4
 8008962:	2101      	movs	r1, #1
 8008964:	4618      	mov	r0, r3
 8008966:	f001 fdf9 	bl	800a55c <RCCEx_PLL2_Config>
 800896a:	4603      	mov	r3, r0
 800896c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800896e:	e012      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	3324      	adds	r3, #36	; 0x24
 8008974:	2101      	movs	r1, #1
 8008976:	4618      	mov	r0, r3
 8008978:	f001 fea2 	bl	800a6c0 <RCCEx_PLL3_Config>
 800897c:	4603      	mov	r3, r0
 800897e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008980:	e009      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	75fb      	strb	r3, [r7, #23]
      break;
 8008986:	e006      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008988:	bf00      	nop
 800898a:	e004      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800898c:	bf00      	nop
 800898e:	e002      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008990:	bf00      	nop
 8008992:	e000      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008996:	7dfb      	ldrb	r3, [r7, #23]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d109      	bne.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800899c:	4b2d      	ldr	r3, [pc, #180]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800899e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089a8:	492a      	ldr	r1, [pc, #168]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	650b      	str	r3, [r1, #80]	; 0x50
 80089ae:	e001      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d04d      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089ca:	d02e      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80089cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089d0:	d828      	bhi.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80089d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d6:	d02a      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80089d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089dc:	d822      	bhi.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80089de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089e2:	d026      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80089e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089e8:	d81c      	bhi.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80089ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089ee:	d010      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80089f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f4:	d816      	bhi.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d01d      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80089fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089fe:	d111      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3304      	adds	r3, #4
 8008a04:	2101      	movs	r1, #1
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fda8 	bl	800a55c <RCCEx_PLL2_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008a10:	e012      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	3324      	adds	r3, #36	; 0x24
 8008a16:	2101      	movs	r1, #1
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f001 fe51 	bl	800a6c0 <RCCEx_PLL3_Config>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008a22:	e009      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	75fb      	strb	r3, [r7, #23]
      break;
 8008a28:	e006      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008a2a:	bf00      	nop
 8008a2c:	e004      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008a2e:	bf00      	nop
 8008a30:	e002      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008a32:	bf00      	nop
 8008a34:	e000      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10c      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008a3e:	4b05      	ldr	r3, [pc, #20]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a4c:	4901      	ldr	r1, [pc, #4]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	658b      	str	r3, [r1, #88]	; 0x58
 8008a52:	e003      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008a54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a58:	7dfb      	ldrb	r3, [r7, #23]
 8008a5a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d02f      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a70:	d00e      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a76:	d814      	bhi.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d015      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008a7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a80:	d10f      	bne.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a82:	4baf      	ldr	r3, [pc, #700]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a86:	4aae      	ldr	r2, [pc, #696]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a8e:	e00c      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3304      	adds	r3, #4
 8008a94:	2101      	movs	r1, #1
 8008a96:	4618      	mov	r0, r3
 8008a98:	f001 fd60 	bl	800a55c <RCCEx_PLL2_Config>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008aa0:	e003      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa6:	e000      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d109      	bne.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008ab0:	4ba3      	ldr	r3, [pc, #652]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008abc:	49a0      	ldr	r1, [pc, #640]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	650b      	str	r3, [r1, #80]	; 0x50
 8008ac2:	e001      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
 8008ac6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d032      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d81b      	bhi.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008adc:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae2:	bf00      	nop
 8008ae4:	08008b1b 	.word	0x08008b1b
 8008ae8:	08008af5 	.word	0x08008af5
 8008aec:	08008b03 	.word	0x08008b03
 8008af0:	08008b1b 	.word	0x08008b1b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af4:	4b92      	ldr	r3, [pc, #584]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	4a91      	ldr	r2, [pc, #580]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008b00:	e00c      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3304      	adds	r3, #4
 8008b06:	2102      	movs	r1, #2
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 fd27 	bl	800a55c <RCCEx_PLL2_Config>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008b12:	e003      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	75fb      	strb	r3, [r7, #23]
      break;
 8008b18:	e000      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d109      	bne.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008b22:	4b87      	ldr	r3, [pc, #540]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b26:	f023 0203 	bic.w	r2, r3, #3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b2e:	4984      	ldr	r1, [pc, #528]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b30:	4313      	orrs	r3, r2
 8008b32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008b34:	e001      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 8086 	beq.w	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b48:	4b7e      	ldr	r3, [pc, #504]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a7d      	ldr	r2, [pc, #500]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b54:	f7f9 f932 	bl	8001dbc <HAL_GetTick>
 8008b58:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b5a:	e009      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b5c:	f7f9 f92e 	bl	8001dbc <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	2b64      	cmp	r3, #100	; 0x64
 8008b68:	d902      	bls.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	75fb      	strb	r3, [r7, #23]
        break;
 8008b6e:	e005      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b70:	4b74      	ldr	r3, [pc, #464]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0ef      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d166      	bne.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008b82:	4b6f      	ldr	r3, [pc, #444]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b8c:	4053      	eors	r3, r2
 8008b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d013      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b96:	4b6a      	ldr	r3, [pc, #424]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b9e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ba0:	4b67      	ldr	r3, [pc, #412]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba4:	4a66      	ldr	r2, [pc, #408]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008baa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008bac:	4b64      	ldr	r3, [pc, #400]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb0:	4a63      	ldr	r2, [pc, #396]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bb6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008bb8:	4a61      	ldr	r2, [pc, #388]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc8:	d115      	bne.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bca:	f7f9 f8f7 	bl	8001dbc <HAL_GetTick>
 8008bce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bd0:	e00b      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bd2:	f7f9 f8f3 	bl	8001dbc <HAL_GetTick>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d902      	bls.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	75fb      	strb	r3, [r7, #23]
            break;
 8008be8:	e005      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bea:	4b55      	ldr	r3, [pc, #340]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0ed      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d126      	bne.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c0a:	d10d      	bne.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008c0c:	4b4c      	ldr	r3, [pc, #304]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c1a:	0919      	lsrs	r1, r3, #4
 8008c1c:	4b4a      	ldr	r3, [pc, #296]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008c1e:	400b      	ands	r3, r1
 8008c20:	4947      	ldr	r1, [pc, #284]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c22:	4313      	orrs	r3, r2
 8008c24:	610b      	str	r3, [r1, #16]
 8008c26:	e005      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008c28:	4b45      	ldr	r3, [pc, #276]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	4a44      	ldr	r2, [pc, #272]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c32:	6113      	str	r3, [r2, #16]
 8008c34:	4b42      	ldr	r3, [pc, #264]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c42:	493f      	ldr	r1, [pc, #252]	; (8008d40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c44:	4313      	orrs	r3, r2
 8008c46:	670b      	str	r3, [r1, #112]	; 0x70
 8008c48:	e004      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	75bb      	strb	r3, [r7, #22]
 8008c4e:	e001      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c50:	7dfb      	ldrb	r3, [r7, #23]
 8008c52:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 8085 	beq.w	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c66:	2b28      	cmp	r3, #40	; 0x28
 8008c68:	d866      	bhi.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008c6a:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008d4d 	.word	0x08008d4d
 8008c74:	08008d39 	.word	0x08008d39
 8008c78:	08008d39 	.word	0x08008d39
 8008c7c:	08008d39 	.word	0x08008d39
 8008c80:	08008d39 	.word	0x08008d39
 8008c84:	08008d39 	.word	0x08008d39
 8008c88:	08008d39 	.word	0x08008d39
 8008c8c:	08008d39 	.word	0x08008d39
 8008c90:	08008d15 	.word	0x08008d15
 8008c94:	08008d39 	.word	0x08008d39
 8008c98:	08008d39 	.word	0x08008d39
 8008c9c:	08008d39 	.word	0x08008d39
 8008ca0:	08008d39 	.word	0x08008d39
 8008ca4:	08008d39 	.word	0x08008d39
 8008ca8:	08008d39 	.word	0x08008d39
 8008cac:	08008d39 	.word	0x08008d39
 8008cb0:	08008d27 	.word	0x08008d27
 8008cb4:	08008d39 	.word	0x08008d39
 8008cb8:	08008d39 	.word	0x08008d39
 8008cbc:	08008d39 	.word	0x08008d39
 8008cc0:	08008d39 	.word	0x08008d39
 8008cc4:	08008d39 	.word	0x08008d39
 8008cc8:	08008d39 	.word	0x08008d39
 8008ccc:	08008d39 	.word	0x08008d39
 8008cd0:	08008d4d 	.word	0x08008d4d
 8008cd4:	08008d39 	.word	0x08008d39
 8008cd8:	08008d39 	.word	0x08008d39
 8008cdc:	08008d39 	.word	0x08008d39
 8008ce0:	08008d39 	.word	0x08008d39
 8008ce4:	08008d39 	.word	0x08008d39
 8008ce8:	08008d39 	.word	0x08008d39
 8008cec:	08008d39 	.word	0x08008d39
 8008cf0:	08008d4d 	.word	0x08008d4d
 8008cf4:	08008d39 	.word	0x08008d39
 8008cf8:	08008d39 	.word	0x08008d39
 8008cfc:	08008d39 	.word	0x08008d39
 8008d00:	08008d39 	.word	0x08008d39
 8008d04:	08008d39 	.word	0x08008d39
 8008d08:	08008d39 	.word	0x08008d39
 8008d0c:	08008d39 	.word	0x08008d39
 8008d10:	08008d4d 	.word	0x08008d4d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3304      	adds	r3, #4
 8008d18:	2101      	movs	r1, #1
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 fc1e 	bl	800a55c <RCCEx_PLL2_Config>
 8008d20:	4603      	mov	r3, r0
 8008d22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008d24:	e013      	b.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3324      	adds	r3, #36	; 0x24
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 fcc7 	bl	800a6c0 <RCCEx_PLL3_Config>
 8008d32:	4603      	mov	r3, r0
 8008d34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008d36:	e00a      	b.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d3c:	e007      	b.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008d3e:	bf00      	nop
 8008d40:	58024400 	.word	0x58024400
 8008d44:	58024800 	.word	0x58024800
 8008d48:	00ffffcf 	.word	0x00ffffcf
      break;
 8008d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d109      	bne.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008d54:	4b96      	ldr	r3, [pc, #600]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d58:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d60:	4993      	ldr	r1, [pc, #588]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	654b      	str	r3, [r1, #84]	; 0x54
 8008d66:	e001      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
 8008d6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d038      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d7c:	2b05      	cmp	r3, #5
 8008d7e:	d821      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008d80:	a201      	add	r2, pc, #4	; (adr r2, 8008d88 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d86:	bf00      	nop
 8008d88:	08008dcb 	.word	0x08008dcb
 8008d8c:	08008da1 	.word	0x08008da1
 8008d90:	08008db3 	.word	0x08008db3
 8008d94:	08008dcb 	.word	0x08008dcb
 8008d98:	08008dcb 	.word	0x08008dcb
 8008d9c:	08008dcb 	.word	0x08008dcb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3304      	adds	r3, #4
 8008da4:	2101      	movs	r1, #1
 8008da6:	4618      	mov	r0, r3
 8008da8:	f001 fbd8 	bl	800a55c <RCCEx_PLL2_Config>
 8008dac:	4603      	mov	r3, r0
 8008dae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008db0:	e00c      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3324      	adds	r3, #36	; 0x24
 8008db6:	2101      	movs	r1, #1
 8008db8:	4618      	mov	r0, r3
 8008dba:	f001 fc81 	bl	800a6c0 <RCCEx_PLL3_Config>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008dc2:	e003      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc8:	e000      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d109      	bne.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008dd2:	4b77      	ldr	r3, [pc, #476]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd6:	f023 0207 	bic.w	r2, r3, #7
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dde:	4974      	ldr	r1, [pc, #464]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	654b      	str	r3, [r1, #84]	; 0x54
 8008de4:	e001      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0304 	and.w	r3, r3, #4
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d03a      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dfc:	2b05      	cmp	r3, #5
 8008dfe:	d821      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008e00:	a201      	add	r2, pc, #4	; (adr r2, 8008e08 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e06:	bf00      	nop
 8008e08:	08008e4b 	.word	0x08008e4b
 8008e0c:	08008e21 	.word	0x08008e21
 8008e10:	08008e33 	.word	0x08008e33
 8008e14:	08008e4b 	.word	0x08008e4b
 8008e18:	08008e4b 	.word	0x08008e4b
 8008e1c:	08008e4b 	.word	0x08008e4b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3304      	adds	r3, #4
 8008e24:	2101      	movs	r1, #1
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 fb98 	bl	800a55c <RCCEx_PLL2_Config>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008e30:	e00c      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3324      	adds	r3, #36	; 0x24
 8008e36:	2101      	movs	r1, #1
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f001 fc41 	bl	800a6c0 <RCCEx_PLL3_Config>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008e42:	e003      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	75fb      	strb	r3, [r7, #23]
      break;
 8008e48:	e000      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e4c:	7dfb      	ldrb	r3, [r7, #23]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10a      	bne.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e52:	4b57      	ldr	r3, [pc, #348]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e56:	f023 0207 	bic.w	r2, r3, #7
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e60:	4953      	ldr	r1, [pc, #332]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	658b      	str	r3, [r1, #88]	; 0x58
 8008e66:	e001      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
 8008e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d04b      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e82:	d02e      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e88:	d828      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e8e:	d02a      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e94:	d822      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008e96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e9a:	d026      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008e9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ea0:	d81c      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea6:	d010      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eac:	d816      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d01d      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eb6:	d111      	bne.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 fb4c 	bl	800a55c <RCCEx_PLL2_Config>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008ec8:	e012      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	3324      	adds	r3, #36	; 0x24
 8008ece:	2102      	movs	r1, #2
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 fbf5 	bl	800a6c0 <RCCEx_PLL3_Config>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008eda:	e009      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee0:	e006      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008ee2:	bf00      	nop
 8008ee4:	e004      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008ee6:	bf00      	nop
 8008ee8:	e002      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008eea:	bf00      	nop
 8008eec:	e000      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10a      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ef6:	4b2e      	ldr	r3, [pc, #184]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f04:	492a      	ldr	r1, [pc, #168]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	654b      	str	r3, [r1, #84]	; 0x54
 8008f0a:	e001      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0c:	7dfb      	ldrb	r3, [r7, #23]
 8008f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d04d      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008f26:	d02e      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008f28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008f2c:	d828      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f32:	d02a      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f38:	d822      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008f3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f3e:	d026      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f44:	d81c      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f4a:	d010      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f50:	d816      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d01d      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f5a:	d111      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	2100      	movs	r1, #0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 fafa 	bl	800a55c <RCCEx_PLL2_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f6c:	e012      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3324      	adds	r3, #36	; 0x24
 8008f72:	2102      	movs	r1, #2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f001 fba3 	bl	800a6c0 <RCCEx_PLL3_Config>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f7e:	e009      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	75fb      	strb	r3, [r7, #23]
      break;
 8008f84:	e006      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008f86:	bf00      	nop
 8008f88:	e004      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008f8a:	bf00      	nop
 8008f8c:	e002      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008f8e:	bf00      	nop
 8008f90:	e000      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10c      	bne.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f9a:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008fa8:	4901      	ldr	r1, [pc, #4]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	658b      	str	r3, [r1, #88]	; 0x58
 8008fae:	e003      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008fb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
 8008fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d04b      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008fce:	d02e      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008fd0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008fd4:	d828      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fda:	d02a      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe0:	d822      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008fe2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008fe6:	d026      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008fe8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008fec:	d81c      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ff2:	d010      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ff8:	d816      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d01d      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009002:	d111      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3304      	adds	r3, #4
 8009008:	2100      	movs	r1, #0
 800900a:	4618      	mov	r0, r3
 800900c:	f001 faa6 	bl	800a55c <RCCEx_PLL2_Config>
 8009010:	4603      	mov	r3, r0
 8009012:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009014:	e012      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3324      	adds	r3, #36	; 0x24
 800901a:	2102      	movs	r1, #2
 800901c:	4618      	mov	r0, r3
 800901e:	f001 fb4f 	bl	800a6c0 <RCCEx_PLL3_Config>
 8009022:	4603      	mov	r3, r0
 8009024:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009026:	e009      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	75fb      	strb	r3, [r7, #23]
      break;
 800902c:	e006      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800902e:	bf00      	nop
 8009030:	e004      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009032:	bf00      	nop
 8009034:	e002      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009036:	bf00      	nop
 8009038:	e000      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800903a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800903c:	7dfb      	ldrb	r3, [r7, #23]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10a      	bne.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009042:	4b9d      	ldr	r3, [pc, #628]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009050:	4999      	ldr	r1, [pc, #612]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009052:	4313      	orrs	r3, r2
 8009054:	658b      	str	r3, [r1, #88]	; 0x58
 8009056:	e001      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0308 	and.w	r3, r3, #8
 8009064:	2b00      	cmp	r3, #0
 8009066:	d01a      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800906e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009072:	d10a      	bne.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3324      	adds	r3, #36	; 0x24
 8009078:	2102      	movs	r1, #2
 800907a:	4618      	mov	r0, r3
 800907c:	f001 fb20 	bl	800a6c0 <RCCEx_PLL3_Config>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800908a:	4b8b      	ldr	r3, [pc, #556]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800908c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009098:	4987      	ldr	r1, [pc, #540]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800909a:	4313      	orrs	r3, r2
 800909c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0310 	and.w	r3, r3, #16
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d01a      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090b4:	d10a      	bne.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3324      	adds	r3, #36	; 0x24
 80090ba:	2102      	movs	r1, #2
 80090bc:	4618      	mov	r0, r3
 80090be:	f001 faff 	bl	800a6c0 <RCCEx_PLL3_Config>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80090cc:	4b7a      	ldr	r3, [pc, #488]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090da:	4977      	ldr	r1, [pc, #476]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090dc:	4313      	orrs	r3, r2
 80090de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d034      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090f6:	d01d      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80090f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090fc:	d817      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009106:	d009      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009108:	e011      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3304      	adds	r3, #4
 800910e:	2100      	movs	r1, #0
 8009110:	4618      	mov	r0, r3
 8009112:	f001 fa23 	bl	800a55c <RCCEx_PLL2_Config>
 8009116:	4603      	mov	r3, r0
 8009118:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800911a:	e00c      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3324      	adds	r3, #36	; 0x24
 8009120:	2102      	movs	r1, #2
 8009122:	4618      	mov	r0, r3
 8009124:	f001 facc 	bl	800a6c0 <RCCEx_PLL3_Config>
 8009128:	4603      	mov	r3, r0
 800912a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800912c:	e003      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	75fb      	strb	r3, [r7, #23]
      break;
 8009132:	e000      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009136:	7dfb      	ldrb	r3, [r7, #23]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10a      	bne.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800913c:	4b5e      	ldr	r3, [pc, #376]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800913e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800914a:	495b      	ldr	r1, [pc, #364]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800914c:	4313      	orrs	r3, r2
 800914e:	658b      	str	r3, [r1, #88]	; 0x58
 8009150:	e001      	b.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009152:	7dfb      	ldrb	r3, [r7, #23]
 8009154:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d033      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009168:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800916c:	d01c      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800916e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009172:	d816      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009178:	d003      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800917a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800917e:	d007      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009180:	e00f      	b.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009182:	4b4d      	ldr	r3, [pc, #308]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009186:	4a4c      	ldr	r2, [pc, #304]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800918c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800918e:	e00c      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3324      	adds	r3, #36	; 0x24
 8009194:	2101      	movs	r1, #1
 8009196:	4618      	mov	r0, r3
 8009198:	f001 fa92 	bl	800a6c0 <RCCEx_PLL3_Config>
 800919c:	4603      	mov	r3, r0
 800919e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80091a0:	e003      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	75fb      	strb	r3, [r7, #23]
      break;
 80091a6:	e000      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80091a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091b0:	4b41      	ldr	r3, [pc, #260]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091be:	493e      	ldr	r1, [pc, #248]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	654b      	str	r3, [r1, #84]	; 0x54
 80091c4:	e001      	b.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d029      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80091de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e2:	d007      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80091e4:	e00f      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091e6:	4b34      	ldr	r3, [pc, #208]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ea:	4a33      	ldr	r2, [pc, #204]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80091f2:	e00b      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3304      	adds	r3, #4
 80091f8:	2102      	movs	r1, #2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f001 f9ae 	bl	800a55c <RCCEx_PLL2_Config>
 8009200:	4603      	mov	r3, r0
 8009202:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009204:	e002      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	75fb      	strb	r3, [r7, #23]
      break;
 800920a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800920c:	7dfb      	ldrb	r3, [r7, #23]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d109      	bne.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009212:	4b29      	ldr	r3, [pc, #164]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009216:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800921e:	4926      	ldr	r1, [pc, #152]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009220:	4313      	orrs	r3, r2
 8009222:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009224:	e001      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3324      	adds	r3, #36	; 0x24
 800923a:	2102      	movs	r1, #2
 800923c:	4618      	mov	r0, r3
 800923e:	f001 fa3f 	bl	800a6c0 <RCCEx_PLL3_Config>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d033      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800925c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009260:	d017      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009266:	d811      	bhi.n	800928c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800926c:	d013      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800926e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009272:	d80b      	bhi.n	800928c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009274:	2b00      	cmp	r3, #0
 8009276:	d010      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800927c:	d106      	bne.n	800928c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800927e:	4b0e      	ldr	r3, [pc, #56]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009282:	4a0d      	ldr	r2, [pc, #52]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009288:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800928a:	e007      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	75fb      	strb	r3, [r7, #23]
      break;
 8009290:	e004      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009292:	bf00      	nop
 8009294:	e002      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009296:	bf00      	nop
 8009298:	e000      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800929a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800929c:	7dfb      	ldrb	r3, [r7, #23]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10c      	bne.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80092a2:	4b05      	ldr	r3, [pc, #20]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ae:	4902      	ldr	r1, [pc, #8]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092b0:	4313      	orrs	r3, r2
 80092b2:	654b      	str	r3, [r1, #84]	; 0x54
 80092b4:	e004      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80092b6:	bf00      	nop
 80092b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d008      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80092cc:	4b31      	ldr	r3, [pc, #196]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80092ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d8:	492e      	ldr	r1, [pc, #184]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80092da:	4313      	orrs	r3, r2
 80092dc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d009      	beq.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80092ea:	4b2a      	ldr	r3, [pc, #168]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80092f8:	4926      	ldr	r1, [pc, #152]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80092fa:	4313      	orrs	r3, r2
 80092fc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d008      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800930a:	4b22      	ldr	r3, [pc, #136]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800930c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009316:	491f      	ldr	r1, [pc, #124]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009318:	4313      	orrs	r3, r2
 800931a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00d      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009328:	4b1a      	ldr	r3, [pc, #104]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	4a19      	ldr	r2, [pc, #100]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800932e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009332:	6113      	str	r3, [r2, #16]
 8009334:	4b17      	ldr	r3, [pc, #92]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009336:	691a      	ldr	r2, [r3, #16]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800933e:	4915      	ldr	r1, [pc, #84]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009340:	4313      	orrs	r3, r2
 8009342:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	da08      	bge.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800934c:	4b11      	ldr	r3, [pc, #68]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800934e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009350:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009358:	490e      	ldr	r1, [pc, #56]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800935a:	4313      	orrs	r3, r2
 800935c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d009      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800936a:	4b0a      	ldr	r3, [pc, #40]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800936c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800936e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009378:	4906      	ldr	r1, [pc, #24]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800937a:	4313      	orrs	r3, r2
 800937c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800937e:	7dbb      	ldrb	r3, [r7, #22]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	e000      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
}
 800938a:	4618      	mov	r0, r3
 800938c:	3718      	adds	r7, #24
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	58024400 	.word	0x58024400

08009398 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b090      	sub	sp, #64	; 0x40
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093a6:	f040 8095 	bne.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80093aa:	4b97      	ldr	r3, [pc, #604]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80093ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80093b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b6:	2b04      	cmp	r3, #4
 80093b8:	f200 8088 	bhi.w	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80093bc:	a201      	add	r2, pc, #4	; (adr r2, 80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80093be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c2:	bf00      	nop
 80093c4:	080093d9 	.word	0x080093d9
 80093c8:	08009401 	.word	0x08009401
 80093cc:	08009429 	.word	0x08009429
 80093d0:	080094c5 	.word	0x080094c5
 80093d4:	08009451 	.word	0x08009451
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093d8:	4b8b      	ldr	r3, [pc, #556]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093e4:	d108      	bne.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 ff64 	bl	800a2b8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093f4:	f000 bc94 	b.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093fc:	f000 bc90 	b.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009400:	4b81      	ldr	r3, [pc, #516]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800940c:	d108      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800940e:	f107 0318 	add.w	r3, r7, #24
 8009412:	4618      	mov	r0, r3
 8009414:	f000 fca8 	bl	8009d68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800941c:	f000 bc80 	b.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009424:	f000 bc7c 	b.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009428:	4b77      	ldr	r3, [pc, #476]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009434:	d108      	bne.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009436:	f107 030c 	add.w	r3, r7, #12
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fde8 	bl	800a010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009444:	f000 bc6c 	b.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800944c:	f000 bc68 	b.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009450:	4b6d      	ldr	r3, [pc, #436]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009454:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009458:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800945a:	4b6b      	ldr	r3, [pc, #428]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0304 	and.w	r3, r3, #4
 8009462:	2b04      	cmp	r3, #4
 8009464:	d10c      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009468:	2b00      	cmp	r3, #0
 800946a:	d109      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800946c:	4b66      	ldr	r3, [pc, #408]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	08db      	lsrs	r3, r3, #3
 8009472:	f003 0303 	and.w	r3, r3, #3
 8009476:	4a65      	ldr	r2, [pc, #404]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009478:	fa22 f303 	lsr.w	r3, r2, r3
 800947c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800947e:	e01f      	b.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009480:	4b61      	ldr	r3, [pc, #388]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948c:	d106      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800948e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009494:	d102      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009496:	4b5e      	ldr	r3, [pc, #376]	; (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800949a:	e011      	b.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800949c:	4b5a      	ldr	r3, [pc, #360]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094a8:	d106      	bne.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80094aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b0:	d102      	bne.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80094b2:	4b58      	ldr	r3, [pc, #352]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094b6:	e003      	b.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80094bc:	f000 bc30 	b.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80094c0:	f000 bc2e 	b.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80094c4:	4b54      	ldr	r3, [pc, #336]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094c8:	f000 bc2a 	b.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d0:	f000 bc26 	b.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094da:	f040 809f 	bne.w	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80094de:	4b4a      	ldr	r3, [pc, #296]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80094e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094e2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80094e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80094e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ee:	d04d      	beq.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80094f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094f6:	f200 8084 	bhi.w	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	2bc0      	cmp	r3, #192	; 0xc0
 80094fe:	d07d      	beq.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009502:	2bc0      	cmp	r3, #192	; 0xc0
 8009504:	d87d      	bhi.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	2b80      	cmp	r3, #128	; 0x80
 800950a:	d02d      	beq.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800950c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950e:	2b80      	cmp	r3, #128	; 0x80
 8009510:	d877      	bhi.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951a:	2b40      	cmp	r3, #64	; 0x40
 800951c:	d012      	beq.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800951e:	e070      	b.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009520:	4b39      	ldr	r3, [pc, #228]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800952c:	d107      	bne.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800952e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009532:	4618      	mov	r0, r3
 8009534:	f000 fec0 	bl	800a2b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800953c:	e3f0      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009542:	e3ed      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009544:	4b30      	ldr	r3, [pc, #192]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800954c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009550:	d107      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009552:	f107 0318 	add.w	r3, r7, #24
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fc06 	bl	8009d68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009560:	e3de      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009566:	e3db      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009568:	4b27      	ldr	r3, [pc, #156]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009574:	d107      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009576:	f107 030c 	add.w	r3, r7, #12
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fd48 	bl	800a010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009584:	e3cc      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800958a:	e3c9      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800958c:	4b1e      	ldr	r3, [pc, #120]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800958e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009590:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009594:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009596:	4b1c      	ldr	r3, [pc, #112]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0304 	and.w	r3, r3, #4
 800959e:	2b04      	cmp	r3, #4
 80095a0:	d10c      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80095a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d109      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095a8:	4b17      	ldr	r3, [pc, #92]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	08db      	lsrs	r3, r3, #3
 80095ae:	f003 0303 	and.w	r3, r3, #3
 80095b2:	4a16      	ldr	r2, [pc, #88]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80095b4:	fa22 f303 	lsr.w	r3, r2, r3
 80095b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095ba:	e01e      	b.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095bc:	4b12      	ldr	r3, [pc, #72]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095c8:	d106      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80095ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095d0:	d102      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80095d2:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80095d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095d6:	e010      	b.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095d8:	4b0b      	ldr	r3, [pc, #44]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095e4:	d106      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80095e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095ec:	d102      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80095f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095f2:	e002      	b.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80095f8:	e392      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80095fa:	e391      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80095fc:	4b06      	ldr	r3, [pc, #24]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80095fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009600:	e38e      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009606:	e38b      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009608:	58024400 	.word	0x58024400
 800960c:	03d09000 	.word	0x03d09000
 8009610:	003d0900 	.word	0x003d0900
 8009614:	007a1200 	.word	0x007a1200
 8009618:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009622:	f040 809c 	bne.w	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009626:	4b9d      	ldr	r3, [pc, #628]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800962a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800962e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009632:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009636:	d054      	beq.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800963e:	f200 808b 	bhi.w	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009644:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009648:	f000 8083 	beq.w	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009652:	f200 8081 	bhi.w	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800965c:	d02f      	beq.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009664:	d878      	bhi.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	2b00      	cmp	r3, #0
 800966a:	d004      	beq.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800966c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009672:	d012      	beq.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8009674:	e070      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009676:	4b89      	ldr	r3, [pc, #548]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800967e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009682:	d107      	bne.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009688:	4618      	mov	r0, r3
 800968a:	f000 fe15 	bl	800a2b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009690:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009692:	e345      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009698:	e342      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800969a:	4b80      	ldr	r3, [pc, #512]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096a6:	d107      	bne.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096a8:	f107 0318 	add.w	r3, r7, #24
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 fb5b 	bl	8009d68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096b6:	e333      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096bc:	e330      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096be:	4b77      	ldr	r3, [pc, #476]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ca:	d107      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096cc:	f107 030c 	add.w	r3, r7, #12
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fc9d 	bl	800a010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096da:	e321      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096e0:	e31e      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80096e2:	4b6e      	ldr	r3, [pc, #440]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80096e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096ea:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096ec:	4b6b      	ldr	r3, [pc, #428]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d10c      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80096f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d109      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096fe:	4b67      	ldr	r3, [pc, #412]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	08db      	lsrs	r3, r3, #3
 8009704:	f003 0303 	and.w	r3, r3, #3
 8009708:	4a65      	ldr	r2, [pc, #404]	; (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800970a:	fa22 f303 	lsr.w	r3, r2, r3
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009710:	e01e      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009712:	4b62      	ldr	r3, [pc, #392]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800971a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800971e:	d106      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009726:	d102      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009728:	4b5e      	ldr	r3, [pc, #376]	; (80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800972c:	e010      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800972e:	4b5b      	ldr	r3, [pc, #364]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800973a:	d106      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800973c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800973e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009742:	d102      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009744:	4b58      	ldr	r3, [pc, #352]	; (80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009748:	e002      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800974e:	e2e7      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009750:	e2e6      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009752:	4b56      	ldr	r3, [pc, #344]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009756:	e2e3      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009758:	2300      	movs	r3, #0
 800975a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800975c:	e2e0      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009764:	f040 80a7 	bne.w	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009768:	4b4c      	ldr	r3, [pc, #304]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800976a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800976c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009770:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009778:	d055      	beq.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009780:	f200 8096 	bhi.w	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800978a:	f000 8084 	beq.w	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009794:	f200 808c 	bhi.w	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800979e:	d030      	beq.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80097a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097a6:	f200 8083 	bhi.w	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d004      	beq.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80097b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80097b6:	d012      	beq.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80097b8:	e07a      	b.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097ba:	4b38      	ldr	r3, [pc, #224]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097c6:	d107      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 fd73 	bl	800a2b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097d6:	e2a3      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097dc:	e2a0      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097de:	4b2f      	ldr	r3, [pc, #188]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097ea:	d107      	bne.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097ec:	f107 0318 	add.w	r3, r7, #24
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fab9 	bl	8009d68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80097fa:	e291      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80097fc:	2300      	movs	r3, #0
 80097fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009800:	e28e      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009802:	4b26      	ldr	r3, [pc, #152]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800980a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800980e:	d107      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009810:	f107 030c 	add.w	r3, r7, #12
 8009814:	4618      	mov	r0, r3
 8009816:	f000 fbfb 	bl	800a010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800981e:	e27f      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009820:	2300      	movs	r3, #0
 8009822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009824:	e27c      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009826:	4b1d      	ldr	r3, [pc, #116]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800982a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800982e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009830:	4b1a      	ldr	r3, [pc, #104]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b04      	cmp	r3, #4
 800983a:	d10c      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800983c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983e:	2b00      	cmp	r3, #0
 8009840:	d109      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009842:	4b16      	ldr	r3, [pc, #88]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	08db      	lsrs	r3, r3, #3
 8009848:	f003 0303 	and.w	r3, r3, #3
 800984c:	4a14      	ldr	r2, [pc, #80]	; (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800984e:	fa22 f303 	lsr.w	r3, r2, r3
 8009852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009854:	e01e      	b.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009856:	4b11      	ldr	r3, [pc, #68]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800985e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009862:	d106      	bne.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800986a:	d102      	bne.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800986c:	4b0d      	ldr	r3, [pc, #52]	; (80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800986e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009870:	e010      	b.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009872:	4b0a      	ldr	r3, [pc, #40]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800987a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800987e:	d106      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009886:	d102      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009888:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800988a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800988c:	e002      	b.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800988e:	2300      	movs	r3, #0
 8009890:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009892:	e245      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009894:	e244      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009896:	4b05      	ldr	r3, [pc, #20]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009898:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800989a:	e241      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800989c:	58024400 	.word	0x58024400
 80098a0:	03d09000 	.word	0x03d09000
 80098a4:	003d0900 	.word	0x003d0900
 80098a8:	007a1200 	.word	0x007a1200
 80098ac:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098b4:	e234      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098bc:	f040 809c 	bne.w	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80098c0:	4b9b      	ldr	r3, [pc, #620]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80098c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80098c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80098ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098d0:	d054      	beq.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098d8:	f200 808b 	bhi.w	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80098e2:	f000 8083 	beq.w	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80098ec:	f200 8081 	bhi.w	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80098f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098f6:	d02f      	beq.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80098f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098fe:	d878      	bhi.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009902:	2b00      	cmp	r3, #0
 8009904:	d004      	beq.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800990c:	d012      	beq.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800990e:	e070      	b.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009910:	4b87      	ldr	r3, [pc, #540]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800991c:	d107      	bne.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800991e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009922:	4618      	mov	r0, r3
 8009924:	f000 fcc8 	bl	800a2b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800992c:	e1f8      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009932:	e1f5      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009934:	4b7e      	ldr	r3, [pc, #504]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800993c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009940:	d107      	bne.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009942:	f107 0318 	add.w	r3, r7, #24
 8009946:	4618      	mov	r0, r3
 8009948:	f000 fa0e 	bl	8009d68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009950:	e1e6      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009956:	e1e3      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009958:	4b75      	ldr	r3, [pc, #468]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009964:	d107      	bne.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009966:	f107 030c 	add.w	r3, r7, #12
 800996a:	4618      	mov	r0, r3
 800996c:	f000 fb50 	bl	800a010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009974:	e1d4      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800997a:	e1d1      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800997c:	4b6c      	ldr	r3, [pc, #432]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800997e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009984:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009986:	4b6a      	ldr	r3, [pc, #424]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b04      	cmp	r3, #4
 8009990:	d10c      	bne.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009994:	2b00      	cmp	r3, #0
 8009996:	d109      	bne.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009998:	4b65      	ldr	r3, [pc, #404]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	08db      	lsrs	r3, r3, #3
 800999e:	f003 0303 	and.w	r3, r3, #3
 80099a2:	4a64      	ldr	r2, [pc, #400]	; (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80099a4:	fa22 f303 	lsr.w	r3, r2, r3
 80099a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099aa:	e01e      	b.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099ac:	4b60      	ldr	r3, [pc, #384]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b8:	d106      	bne.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80099ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099c0:	d102      	bne.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80099c2:	4b5d      	ldr	r3, [pc, #372]	; (8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80099c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099c6:	e010      	b.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099c8:	4b59      	ldr	r3, [pc, #356]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099d4:	d106      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80099d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099dc:	d102      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80099de:	4b57      	ldr	r3, [pc, #348]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80099e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099e2:	e002      	b.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80099e8:	e19a      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80099ea:	e199      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80099ec:	4b54      	ldr	r3, [pc, #336]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099f0:	e196      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099f6:	e193      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80099fe:	d173      	bne.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009a00:	4b4b      	ldr	r3, [pc, #300]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009a08:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a10:	d02f      	beq.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a18:	d863      	bhi.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8009a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d004      	beq.n	8009a2a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a26:	d012      	beq.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8009a28:	e05b      	b.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a2a:	4b41      	ldr	r3, [pc, #260]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a36:	d107      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a38:	f107 0318 	add.w	r3, r7, #24
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f000 f993 	bl	8009d68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a46:	e16b      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a4c:	e168      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a4e:	4b38      	ldr	r3, [pc, #224]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a5a:	d107      	bne.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a5c:	f107 030c 	add.w	r3, r7, #12
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 fad5 	bl	800a010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a6a:	e159      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a70:	e156      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a72:	4b2f      	ldr	r3, [pc, #188]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a7a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a7c:	4b2c      	ldr	r3, [pc, #176]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b04      	cmp	r3, #4
 8009a86:	d10c      	bne.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8009a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d109      	bne.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a8e:	4b28      	ldr	r3, [pc, #160]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	08db      	lsrs	r3, r3, #3
 8009a94:	f003 0303 	and.w	r3, r3, #3
 8009a98:	4a26      	ldr	r2, [pc, #152]	; (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa0:	e01e      	b.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009aa2:	4b23      	ldr	r3, [pc, #140]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aae:	d106      	bne.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8009ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ab6:	d102      	bne.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009ab8:	4b1f      	ldr	r3, [pc, #124]	; (8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009abc:	e010      	b.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009abe:	4b1c      	ldr	r3, [pc, #112]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aca:	d106      	bne.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8009acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ad2:	d102      	bne.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009ad4:	4b19      	ldr	r3, [pc, #100]	; (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8009ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ad8:	e002      	b.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009ade:	e11f      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009ae0:	e11e      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ae6:	e11b      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aee:	d13e      	bne.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009af0:	4b0f      	ldr	r3, [pc, #60]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009af8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d004      	beq.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8009b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b06:	d01d      	beq.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009b08:	e02e      	b.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b0a:	4b09      	ldr	r3, [pc, #36]	; (8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b16:	d107      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fbcb 	bl	800a2b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b26:	e0fb      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b2c:	e0f8      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009b2e:	bf00      	nop
 8009b30:	58024400 	.word	0x58024400
 8009b34:	03d09000 	.word	0x03d09000
 8009b38:	003d0900 	.word	0x003d0900
 8009b3c:	007a1200 	.word	0x007a1200
 8009b40:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b44:	4b79      	ldr	r3, [pc, #484]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b50:	d107      	bne.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b52:	f107 0318 	add.w	r3, r7, #24
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 f906 	bl	8009d68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b60:	e0de      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b66:	e0db      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b6c:	e0d8      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b74:	f040 8085 	bne.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009b78:	4b6c      	ldr	r3, [pc, #432]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b7c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009b80:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b88:	d06b      	beq.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b90:	d874      	bhi.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b98:	d056      	beq.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ba0:	d86c      	bhi.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ba8:	d03b      	beq.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8009baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bb0:	d864      	bhi.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb8:	d021      	beq.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8009bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc0:	d85c      	bhi.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d004      	beq.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bce:	d004      	beq.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009bd0:	e054      	b.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009bd2:	f000 f8b3 	bl	8009d3c <HAL_RCCEx_GetD3PCLK1Freq>
 8009bd6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009bd8:	e0a2      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bda:	4b54      	ldr	r3, [pc, #336]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009be6:	d107      	bne.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009be8:	f107 0318 	add.w	r3, r7, #24
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 f8bb 	bl	8009d68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009bf6:	e093      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bfc:	e090      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bfe:	4b4b      	ldr	r3, [pc, #300]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c0a:	d107      	bne.n	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c0c:	f107 030c 	add.w	r3, r7, #12
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 f9fd 	bl	800a010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009c1a:	e081      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c20:	e07e      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c22:	4b42      	ldr	r3, [pc, #264]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 0304 	and.w	r3, r3, #4
 8009c2a:	2b04      	cmp	r3, #4
 8009c2c:	d109      	bne.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c2e:	4b3f      	ldr	r3, [pc, #252]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	08db      	lsrs	r3, r3, #3
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	4a3d      	ldr	r2, [pc, #244]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009c40:	e06e      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c46:	e06b      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009c48:	4b38      	ldr	r3, [pc, #224]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c54:	d102      	bne.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8009c56:	4b37      	ldr	r3, [pc, #220]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009c58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c5a:	e061      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c60:	e05e      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c62:	4b32      	ldr	r3, [pc, #200]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c6e:	d102      	bne.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8009c70:	4b31      	ldr	r3, [pc, #196]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009c72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009c74:	e054      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c7a:	e051      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c80:	e04e      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c88:	d148      	bne.n	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009c8a:	4b28      	ldr	r3, [pc, #160]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c92:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c9a:	d02a      	beq.n	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ca2:	d838      	bhi.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8009ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d004      	beq.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8009caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cb0:	d00d      	beq.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8009cb2:	e030      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009cb4:	4b1d      	ldr	r3, [pc, #116]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cc0:	d102      	bne.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8009cc2:	4b1d      	ldr	r3, [pc, #116]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009cc6:	e02b      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ccc:	e028      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cce:	4b17      	ldr	r3, [pc, #92]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cda:	d107      	bne.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 fae9 	bl	800a2b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009cea:	e019      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009cec:	2300      	movs	r3, #0
 8009cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cf0:	e016      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cf2:	4b0e      	ldr	r3, [pc, #56]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cfe:	d107      	bne.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d00:	f107 0318 	add.w	r3, r7, #24
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 f82f 	bl	8009d68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009d0e:	e007      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d14:	e004      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d1a:	e001      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3740      	adds	r7, #64	; 0x40
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	58024400 	.word	0x58024400
 8009d30:	03d09000 	.word	0x03d09000
 8009d34:	003d0900 	.word	0x003d0900
 8009d38:	007a1200 	.word	0x007a1200

08009d3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009d40:	f7fe fbb4 	bl	80084ac <HAL_RCC_GetHCLKFreq>
 8009d44:	4602      	mov	r2, r0
 8009d46:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	091b      	lsrs	r3, r3, #4
 8009d4c:	f003 0307 	and.w	r3, r3, #7
 8009d50:	4904      	ldr	r1, [pc, #16]	; (8009d64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009d52:	5ccb      	ldrb	r3, [r1, r3]
 8009d54:	f003 031f 	and.w	r3, r3, #31
 8009d58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	58024400 	.word	0x58024400
 8009d64:	0800d18c 	.word	0x0800d18c

08009d68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b089      	sub	sp, #36	; 0x24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d70:	4ba1      	ldr	r3, [pc, #644]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d74:	f003 0303 	and.w	r3, r3, #3
 8009d78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009d7a:	4b9f      	ldr	r3, [pc, #636]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d7e:	0b1b      	lsrs	r3, r3, #12
 8009d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009d86:	4b9c      	ldr	r3, [pc, #624]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	091b      	lsrs	r3, r3, #4
 8009d8c:	f003 0301 	and.w	r3, r3, #1
 8009d90:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009d92:	4b99      	ldr	r3, [pc, #612]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d96:	08db      	lsrs	r3, r3, #3
 8009d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	fb02 f303 	mul.w	r3, r2, r3
 8009da2:	ee07 3a90 	vmov	s15, r3
 8009da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009daa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 8111 	beq.w	8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	f000 8083 	beq.w	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	f200 80a1 	bhi.w	8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d003      	beq.n	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d056      	beq.n	8009e80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009dd2:	e099      	b.n	8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dd4:	4b88      	ldr	r3, [pc, #544]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0320 	and.w	r3, r3, #32
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d02d      	beq.n	8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009de0:	4b85      	ldr	r3, [pc, #532]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	08db      	lsrs	r3, r3, #3
 8009de6:	f003 0303 	and.w	r3, r3, #3
 8009dea:	4a84      	ldr	r2, [pc, #528]	; (8009ffc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009dec:	fa22 f303 	lsr.w	r3, r2, r3
 8009df0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	ee07 3a90 	vmov	s15, r3
 8009df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0a:	4b7b      	ldr	r3, [pc, #492]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e3a:	e087      	b.n	8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	ee07 3a90 	vmov	s15, r3
 8009e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e4e:	4b6a      	ldr	r3, [pc, #424]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e62:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e7e:	e065      	b.n	8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	ee07 3a90 	vmov	s15, r3
 8009e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e92:	4b59      	ldr	r3, [pc, #356]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ea6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ebe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ec2:	e043      	b.n	8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	ee07 3a90 	vmov	s15, r3
 8009eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ece:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a00c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ed6:	4b48      	ldr	r3, [pc, #288]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ede:	ee07 3a90 	vmov	s15, r3
 8009ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f06:	e021      	b.n	8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	ee07 3a90 	vmov	s15, r3
 8009f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f1a:	4b37      	ldr	r3, [pc, #220]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009f4c:	4b2a      	ldr	r3, [pc, #168]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f50:	0a5b      	lsrs	r3, r3, #9
 8009f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f56:	ee07 3a90 	vmov	s15, r3
 8009f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f72:	ee17 2a90 	vmov	r2, s15
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009f7a:	4b1f      	ldr	r3, [pc, #124]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7e:	0c1b      	lsrs	r3, r3, #16
 8009f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f84:	ee07 3a90 	vmov	s15, r3
 8009f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fa0:	ee17 2a90 	vmov	r2, s15
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009fa8:	4b13      	ldr	r3, [pc, #76]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fac:	0e1b      	lsrs	r3, r3, #24
 8009fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fce:	ee17 2a90 	vmov	r2, s15
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009fd6:	e008      	b.n	8009fea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	609a      	str	r2, [r3, #8]
}
 8009fea:	bf00      	nop
 8009fec:	3724      	adds	r7, #36	; 0x24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	58024400 	.word	0x58024400
 8009ffc:	03d09000 	.word	0x03d09000
 800a000:	46000000 	.word	0x46000000
 800a004:	4c742400 	.word	0x4c742400
 800a008:	4a742400 	.word	0x4a742400
 800a00c:	4af42400 	.word	0x4af42400

0800a010 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a010:	b480      	push	{r7}
 800a012:	b089      	sub	sp, #36	; 0x24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a018:	4ba1      	ldr	r3, [pc, #644]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01c:	f003 0303 	and.w	r3, r3, #3
 800a020:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a022:	4b9f      	ldr	r3, [pc, #636]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	0d1b      	lsrs	r3, r3, #20
 800a028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a02c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a02e:	4b9c      	ldr	r3, [pc, #624]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a032:	0a1b      	lsrs	r3, r3, #8
 800a034:	f003 0301 	and.w	r3, r3, #1
 800a038:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a03a:	4b99      	ldr	r3, [pc, #612]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a03e:	08db      	lsrs	r3, r3, #3
 800a040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	fb02 f303 	mul.w	r3, r2, r3
 800a04a:	ee07 3a90 	vmov	s15, r3
 800a04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a052:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 8111 	beq.w	800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	2b02      	cmp	r3, #2
 800a062:	f000 8083 	beq.w	800a16c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	2b02      	cmp	r3, #2
 800a06a:	f200 80a1 	bhi.w	800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d056      	beq.n	800a128 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a07a:	e099      	b.n	800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a07c:	4b88      	ldr	r3, [pc, #544]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0320 	and.w	r3, r3, #32
 800a084:	2b00      	cmp	r3, #0
 800a086:	d02d      	beq.n	800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a088:	4b85      	ldr	r3, [pc, #532]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	08db      	lsrs	r3, r3, #3
 800a08e:	f003 0303 	and.w	r3, r3, #3
 800a092:	4a84      	ldr	r2, [pc, #528]	; (800a2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a094:	fa22 f303 	lsr.w	r3, r2, r3
 800a098:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	ee07 3a90 	vmov	s15, r3
 800a0a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	ee07 3a90 	vmov	s15, r3
 800a0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b2:	4b7b      	ldr	r3, [pc, #492]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a0e2:	e087      	b.n	800a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	ee07 3a90 	vmov	s15, r3
 800a0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a0f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0f6:	4b6a      	ldr	r3, [pc, #424]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0fe:	ee07 3a90 	vmov	s15, r3
 800a102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a106:	ed97 6a03 	vldr	s12, [r7, #12]
 800a10a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a10e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a11a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a11e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a122:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a126:	e065      	b.n	800a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	ee07 3a90 	vmov	s15, r3
 800a12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a132:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a13a:	4b59      	ldr	r3, [pc, #356]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a142:	ee07 3a90 	vmov	s15, r3
 800a146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a14a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a14e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a15a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a15e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a162:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a166:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a16a:	e043      	b.n	800a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	ee07 3a90 	vmov	s15, r3
 800a172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a176:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a17a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a17e:	4b48      	ldr	r3, [pc, #288]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a186:	ee07 3a90 	vmov	s15, r3
 800a18a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a18e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a192:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a19a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a19e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1ae:	e021      	b.n	800a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	ee07 3a90 	vmov	s15, r3
 800a1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a1be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1c2:	4b37      	ldr	r3, [pc, #220]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ca:	ee07 3a90 	vmov	s15, r3
 800a1ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a1f4:	4b2a      	ldr	r3, [pc, #168]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f8:	0a5b      	lsrs	r3, r3, #9
 800a1fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a20a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a20e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a21a:	ee17 2a90 	vmov	r2, s15
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a222:	4b1f      	ldr	r3, [pc, #124]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a226:	0c1b      	lsrs	r3, r3, #16
 800a228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a22c:	ee07 3a90 	vmov	s15, r3
 800a230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a234:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a238:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a23c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a248:	ee17 2a90 	vmov	r2, s15
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a250:	4b13      	ldr	r3, [pc, #76]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a254:	0e1b      	lsrs	r3, r3, #24
 800a256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a262:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a26a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a26e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a276:	ee17 2a90 	vmov	r2, s15
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a27e:	e008      	b.n	800a292 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	609a      	str	r2, [r3, #8]
}
 800a292:	bf00      	nop
 800a294:	3724      	adds	r7, #36	; 0x24
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	58024400 	.word	0x58024400
 800a2a4:	03d09000 	.word	0x03d09000
 800a2a8:	46000000 	.word	0x46000000
 800a2ac:	4c742400 	.word	0x4c742400
 800a2b0:	4a742400 	.word	0x4a742400
 800a2b4:	4af42400 	.word	0x4af42400

0800a2b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b089      	sub	sp, #36	; 0x24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2c0:	4ba0      	ldr	r3, [pc, #640]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c4:	f003 0303 	and.w	r3, r3, #3
 800a2c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a2ca:	4b9e      	ldr	r3, [pc, #632]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ce:	091b      	lsrs	r3, r3, #4
 800a2d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a2d6:	4b9b      	ldr	r3, [pc, #620]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a2e0:	4b98      	ldr	r3, [pc, #608]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e4:	08db      	lsrs	r3, r3, #3
 800a2e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	fb02 f303 	mul.w	r3, r2, r3
 800a2f0:	ee07 3a90 	vmov	s15, r3
 800a2f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 8111 	beq.w	800a526 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	2b02      	cmp	r3, #2
 800a308:	f000 8083 	beq.w	800a412 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	2b02      	cmp	r3, #2
 800a310:	f200 80a1 	bhi.w	800a456 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d056      	beq.n	800a3ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a320:	e099      	b.n	800a456 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a322:	4b88      	ldr	r3, [pc, #544]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0320 	and.w	r3, r3, #32
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d02d      	beq.n	800a38a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a32e:	4b85      	ldr	r3, [pc, #532]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	08db      	lsrs	r3, r3, #3
 800a334:	f003 0303 	and.w	r3, r3, #3
 800a338:	4a83      	ldr	r2, [pc, #524]	; (800a548 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a33a:	fa22 f303 	lsr.w	r3, r2, r3
 800a33e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	ee07 3a90 	vmov	s15, r3
 800a346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	ee07 3a90 	vmov	s15, r3
 800a350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a358:	4b7a      	ldr	r3, [pc, #488]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a360:	ee07 3a90 	vmov	s15, r3
 800a364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a368:	ed97 6a03 	vldr	s12, [r7, #12]
 800a36c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a54c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a370:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a374:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a37c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a380:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a384:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a388:	e087      	b.n	800a49a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	ee07 3a90 	vmov	s15, r3
 800a390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a394:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a550 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a39c:	4b69      	ldr	r3, [pc, #420]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3a4:	ee07 3a90 	vmov	s15, r3
 800a3a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a54c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3cc:	e065      	b.n	800a49a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	ee07 3a90 	vmov	s15, r3
 800a3d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a554 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a3dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3e0:	4b58      	ldr	r3, [pc, #352]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e8:	ee07 3a90 	vmov	s15, r3
 800a3ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a54c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a400:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a404:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a40c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a410:	e043      	b.n	800a49a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	ee07 3a90 	vmov	s15, r3
 800a418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a41c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a558 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a424:	4b47      	ldr	r3, [pc, #284]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a42c:	ee07 3a90 	vmov	s15, r3
 800a430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a434:	ed97 6a03 	vldr	s12, [r7, #12]
 800a438:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a54c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a43c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a448:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a44c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a450:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a454:	e021      	b.n	800a49a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	ee07 3a90 	vmov	s15, r3
 800a45c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a460:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a550 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a468:	4b36      	ldr	r3, [pc, #216]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a470:	ee07 3a90 	vmov	s15, r3
 800a474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a478:	ed97 6a03 	vldr	s12, [r7, #12]
 800a47c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a54c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a48c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a490:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a494:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a498:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a49a:	4b2a      	ldr	r3, [pc, #168]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49e:	0a5b      	lsrs	r3, r3, #9
 800a4a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4a4:	ee07 3a90 	vmov	s15, r3
 800a4a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4c0:	ee17 2a90 	vmov	r2, s15
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a4c8:	4b1e      	ldr	r3, [pc, #120]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4cc:	0c1b      	lsrs	r3, r3, #16
 800a4ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4d2:	ee07 3a90 	vmov	s15, r3
 800a4d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4ee:	ee17 2a90 	vmov	r2, s15
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a4f6:	4b13      	ldr	r3, [pc, #76]	; (800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fa:	0e1b      	lsrs	r3, r3, #24
 800a4fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a500:	ee07 3a90 	vmov	s15, r3
 800a504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a50c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a510:	edd7 6a07 	vldr	s13, [r7, #28]
 800a514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a51c:	ee17 2a90 	vmov	r2, s15
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a524:	e008      	b.n	800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	609a      	str	r2, [r3, #8]
}
 800a538:	bf00      	nop
 800a53a:	3724      	adds	r7, #36	; 0x24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	58024400 	.word	0x58024400
 800a548:	03d09000 	.word	0x03d09000
 800a54c:	46000000 	.word	0x46000000
 800a550:	4c742400 	.word	0x4c742400
 800a554:	4a742400 	.word	0x4a742400
 800a558:	4af42400 	.word	0x4af42400

0800a55c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a56a:	4b53      	ldr	r3, [pc, #332]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56e:	f003 0303 	and.w	r3, r3, #3
 800a572:	2b03      	cmp	r3, #3
 800a574:	d101      	bne.n	800a57a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e099      	b.n	800a6ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a57a:	4b4f      	ldr	r3, [pc, #316]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a4e      	ldr	r2, [pc, #312]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a580:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a586:	f7f7 fc19 	bl	8001dbc <HAL_GetTick>
 800a58a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a58c:	e008      	b.n	800a5a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a58e:	f7f7 fc15 	bl	8001dbc <HAL_GetTick>
 800a592:	4602      	mov	r2, r0
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d901      	bls.n	800a5a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e086      	b.n	800a6ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a5a0:	4b45      	ldr	r3, [pc, #276]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1f0      	bne.n	800a58e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a5ac:	4b42      	ldr	r3, [pc, #264]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	031b      	lsls	r3, r3, #12
 800a5ba:	493f      	ldr	r1, [pc, #252]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	628b      	str	r3, [r1, #40]	; 0x28
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	025b      	lsls	r3, r3, #9
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	431a      	orrs	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	041b      	lsls	r3, r3, #16
 800a5de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	061b      	lsls	r3, r3, #24
 800a5ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5f0:	4931      	ldr	r1, [pc, #196]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a5f6:	4b30      	ldr	r3, [pc, #192]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	492d      	ldr	r1, [pc, #180]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a604:	4313      	orrs	r3, r2
 800a606:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a608:	4b2b      	ldr	r3, [pc, #172]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60c:	f023 0220 	bic.w	r2, r3, #32
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	4928      	ldr	r1, [pc, #160]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a616:	4313      	orrs	r3, r2
 800a618:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a61a:	4b27      	ldr	r3, [pc, #156]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61e:	4a26      	ldr	r2, [pc, #152]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a620:	f023 0310 	bic.w	r3, r3, #16
 800a624:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a626:	4b24      	ldr	r3, [pc, #144]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a62a:	4b24      	ldr	r3, [pc, #144]	; (800a6bc <RCCEx_PLL2_Config+0x160>)
 800a62c:	4013      	ands	r3, r2
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	69d2      	ldr	r2, [r2, #28]
 800a632:	00d2      	lsls	r2, r2, #3
 800a634:	4920      	ldr	r1, [pc, #128]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a636:	4313      	orrs	r3, r2
 800a638:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a63a:	4b1f      	ldr	r3, [pc, #124]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63e:	4a1e      	ldr	r2, [pc, #120]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a640:	f043 0310 	orr.w	r3, r3, #16
 800a644:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d106      	bne.n	800a65a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a64c:	4b1a      	ldr	r3, [pc, #104]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a650:	4a19      	ldr	r2, [pc, #100]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a656:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a658:	e00f      	b.n	800a67a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d106      	bne.n	800a66e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a660:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a664:	4a14      	ldr	r2, [pc, #80]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a66a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a66c:	e005      	b.n	800a67a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a66e:	4b12      	ldr	r3, [pc, #72]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a672:	4a11      	ldr	r2, [pc, #68]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a678:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a67a:	4b0f      	ldr	r3, [pc, #60]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a0e      	ldr	r2, [pc, #56]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a680:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a686:	f7f7 fb99 	bl	8001dbc <HAL_GetTick>
 800a68a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a68c:	e008      	b.n	800a6a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a68e:	f7f7 fb95 	bl	8001dbc <HAL_GetTick>
 800a692:	4602      	mov	r2, r0
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d901      	bls.n	800a6a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e006      	b.n	800a6ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a6a0:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <RCCEx_PLL2_Config+0x15c>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d0f0      	beq.n	800a68e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	58024400 	.word	0x58024400
 800a6bc:	ffff0007 	.word	0xffff0007

0800a6c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6ce:	4b53      	ldr	r3, [pc, #332]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d2:	f003 0303 	and.w	r3, r3, #3
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d101      	bne.n	800a6de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e099      	b.n	800a812 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a6de:	4b4f      	ldr	r3, [pc, #316]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a4e      	ldr	r2, [pc, #312]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a6e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6ea:	f7f7 fb67 	bl	8001dbc <HAL_GetTick>
 800a6ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6f0:	e008      	b.n	800a704 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a6f2:	f7f7 fb63 	bl	8001dbc <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d901      	bls.n	800a704 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a700:	2303      	movs	r3, #3
 800a702:	e086      	b.n	800a812 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a704:	4b45      	ldr	r3, [pc, #276]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1f0      	bne.n	800a6f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a710:	4b42      	ldr	r3, [pc, #264]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a714:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	051b      	lsls	r3, r3, #20
 800a71e:	493f      	ldr	r1, [pc, #252]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a720:	4313      	orrs	r3, r2
 800a722:	628b      	str	r3, [r1, #40]	; 0x28
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	3b01      	subs	r3, #1
 800a72a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	3b01      	subs	r3, #1
 800a734:	025b      	lsls	r3, r3, #9
 800a736:	b29b      	uxth	r3, r3
 800a738:	431a      	orrs	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	3b01      	subs	r3, #1
 800a740:	041b      	lsls	r3, r3, #16
 800a742:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a746:	431a      	orrs	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	061b      	lsls	r3, r3, #24
 800a750:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a754:	4931      	ldr	r1, [pc, #196]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a756:	4313      	orrs	r3, r2
 800a758:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a75a:	4b30      	ldr	r3, [pc, #192]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	492d      	ldr	r1, [pc, #180]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a76c:	4b2b      	ldr	r3, [pc, #172]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a770:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	4928      	ldr	r1, [pc, #160]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a77e:	4b27      	ldr	r3, [pc, #156]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a782:	4a26      	ldr	r2, [pc, #152]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a788:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a78a:	4b24      	ldr	r3, [pc, #144]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a78c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a78e:	4b24      	ldr	r3, [pc, #144]	; (800a820 <RCCEx_PLL3_Config+0x160>)
 800a790:	4013      	ands	r3, r2
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	69d2      	ldr	r2, [r2, #28]
 800a796:	00d2      	lsls	r2, r2, #3
 800a798:	4920      	ldr	r1, [pc, #128]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a79e:	4b1f      	ldr	r3, [pc, #124]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a2:	4a1e      	ldr	r2, [pc, #120]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a7a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d106      	bne.n	800a7be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a7b0:	4b1a      	ldr	r3, [pc, #104]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b4:	4a19      	ldr	r2, [pc, #100]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a7b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a7ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7bc:	e00f      	b.n	800a7de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d106      	bne.n	800a7d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a7c4:	4b15      	ldr	r3, [pc, #84]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c8:	4a14      	ldr	r2, [pc, #80]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a7ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7d0:	e005      	b.n	800a7de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a7d2:	4b12      	ldr	r3, [pc, #72]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d6:	4a11      	ldr	r2, [pc, #68]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a7d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a7de:	4b0f      	ldr	r3, [pc, #60]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a0e      	ldr	r2, [pc, #56]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a7e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7ea:	f7f7 fae7 	bl	8001dbc <HAL_GetTick>
 800a7ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7f0:	e008      	b.n	800a804 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a7f2:	f7f7 fae3 	bl	8001dbc <HAL_GetTick>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d901      	bls.n	800a804 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a800:	2303      	movs	r3, #3
 800a802:	e006      	b.n	800a812 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <RCCEx_PLL3_Config+0x15c>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d0f0      	beq.n	800a7f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a810:	7bfb      	ldrb	r3, [r7, #15]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	58024400 	.word	0x58024400
 800a820:	ffff0007 	.word	0xffff0007

0800a824 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e02b      	b.n	800a890 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d106      	bne.n	800a852 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7f6 f8e7 	bl	8000a20 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2202      	movs	r2, #2
 800a856:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	3304      	adds	r3, #4
 800a862:	4619      	mov	r1, r3
 800a864:	4610      	mov	r0, r2
 800a866:	f001 fd2d 	bl	800c2c4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6818      	ldr	r0, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	461a      	mov	r2, r3
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	f001 fd81 	bl	800c37c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a87a:	4b07      	ldr	r3, [pc, #28]	; (800a898 <HAL_SDRAM_Init+0x74>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a06      	ldr	r2, [pc, #24]	; (800a898 <HAL_SDRAM_Init+0x74>)
 800a880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a884:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	52004000 	.word	0x52004000

0800a89c <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d10a      	bne.n	800a8c8 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f80c 	bl	800a8d0 <HAL_SDRAM_RefreshErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	695a      	ldr	r2, [r3, #20]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f042 0201 	orr.w	r2, r2, #1
 800a8c6:	615a      	str	r2, [r3, #20]
  }
}
 800a8c8:	bf00      	nop
 800a8ca:	3708      	adds	r7, #8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e049      	b.n	800a98a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d106      	bne.n	800a910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7f7 f8e6 	bl	8001adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	3304      	adds	r3, #4
 800a920:	4619      	mov	r1, r3
 800a922:	4610      	mov	r0, r2
 800a924:	f000 ffee 	bl	800b904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b082      	sub	sp, #8
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e049      	b.n	800aa38 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d106      	bne.n	800a9be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f841 	bl	800aa40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	f000 ff97 	bl	800b904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
 800aa60:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d109      	bne.n	800aa80 <HAL_TIM_PWM_Start_DMA+0x2c>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	bf0c      	ite	eq
 800aa78:	2301      	moveq	r3, #1
 800aa7a:	2300      	movne	r3, #0
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	e03c      	b.n	800aafa <HAL_TIM_PWM_Start_DMA+0xa6>
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2b04      	cmp	r3, #4
 800aa84:	d109      	bne.n	800aa9a <HAL_TIM_PWM_Start_DMA+0x46>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	bf0c      	ite	eq
 800aa92:	2301      	moveq	r3, #1
 800aa94:	2300      	movne	r3, #0
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	e02f      	b.n	800aafa <HAL_TIM_PWM_Start_DMA+0xa6>
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b08      	cmp	r3, #8
 800aa9e:	d109      	bne.n	800aab4 <HAL_TIM_PWM_Start_DMA+0x60>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	bf0c      	ite	eq
 800aaac:	2301      	moveq	r3, #1
 800aaae:	2300      	movne	r3, #0
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	e022      	b.n	800aafa <HAL_TIM_PWM_Start_DMA+0xa6>
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	2b0c      	cmp	r3, #12
 800aab8:	d109      	bne.n	800aace <HAL_TIM_PWM_Start_DMA+0x7a>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	bf0c      	ite	eq
 800aac6:	2301      	moveq	r3, #1
 800aac8:	2300      	movne	r3, #0
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	e015      	b.n	800aafa <HAL_TIM_PWM_Start_DMA+0xa6>
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2b10      	cmp	r3, #16
 800aad2:	d109      	bne.n	800aae8 <HAL_TIM_PWM_Start_DMA+0x94>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	2b02      	cmp	r3, #2
 800aade:	bf0c      	ite	eq
 800aae0:	2301      	moveq	r3, #1
 800aae2:	2300      	movne	r3, #0
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	e008      	b.n	800aafa <HAL_TIM_PWM_Start_DMA+0xa6>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	bf0c      	ite	eq
 800aaf4:	2301      	moveq	r3, #1
 800aaf6:	2300      	movne	r3, #0
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800aafe:	2302      	movs	r3, #2
 800ab00:	e1b0      	b.n	800ae64 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d109      	bne.n	800ab1c <HAL_TIM_PWM_Start_DMA+0xc8>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	bf0c      	ite	eq
 800ab14:	2301      	moveq	r3, #1
 800ab16:	2300      	movne	r3, #0
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	e03c      	b.n	800ab96 <HAL_TIM_PWM_Start_DMA+0x142>
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	2b04      	cmp	r3, #4
 800ab20:	d109      	bne.n	800ab36 <HAL_TIM_PWM_Start_DMA+0xe2>
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	bf0c      	ite	eq
 800ab2e:	2301      	moveq	r3, #1
 800ab30:	2300      	movne	r3, #0
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	e02f      	b.n	800ab96 <HAL_TIM_PWM_Start_DMA+0x142>
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	2b08      	cmp	r3, #8
 800ab3a:	d109      	bne.n	800ab50 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	bf0c      	ite	eq
 800ab48:	2301      	moveq	r3, #1
 800ab4a:	2300      	movne	r3, #0
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	e022      	b.n	800ab96 <HAL_TIM_PWM_Start_DMA+0x142>
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	2b0c      	cmp	r3, #12
 800ab54:	d109      	bne.n	800ab6a <HAL_TIM_PWM_Start_DMA+0x116>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	bf0c      	ite	eq
 800ab62:	2301      	moveq	r3, #1
 800ab64:	2300      	movne	r3, #0
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	e015      	b.n	800ab96 <HAL_TIM_PWM_Start_DMA+0x142>
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2b10      	cmp	r3, #16
 800ab6e:	d109      	bne.n	800ab84 <HAL_TIM_PWM_Start_DMA+0x130>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	bf0c      	ite	eq
 800ab7c:	2301      	moveq	r3, #1
 800ab7e:	2300      	movne	r3, #0
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	e008      	b.n	800ab96 <HAL_TIM_PWM_Start_DMA+0x142>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	bf0c      	ite	eq
 800ab90:	2301      	moveq	r3, #1
 800ab92:	2300      	movne	r3, #0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d034      	beq.n	800ac04 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d104      	bne.n	800abaa <HAL_TIM_PWM_Start_DMA+0x156>
 800aba0:	887b      	ldrh	r3, [r7, #2]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e15c      	b.n	800ae64 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d104      	bne.n	800abba <HAL_TIM_PWM_Start_DMA+0x166>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2202      	movs	r2, #2
 800abb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abb8:	e026      	b.n	800ac08 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2b04      	cmp	r3, #4
 800abbe:	d104      	bne.n	800abca <HAL_TIM_PWM_Start_DMA+0x176>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2202      	movs	r2, #2
 800abc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abc8:	e01e      	b.n	800ac08 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	2b08      	cmp	r3, #8
 800abce:	d104      	bne.n	800abda <HAL_TIM_PWM_Start_DMA+0x186>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2202      	movs	r2, #2
 800abd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abd8:	e016      	b.n	800ac08 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	2b0c      	cmp	r3, #12
 800abde:	d104      	bne.n	800abea <HAL_TIM_PWM_Start_DMA+0x196>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2202      	movs	r2, #2
 800abe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abe8:	e00e      	b.n	800ac08 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	2b10      	cmp	r3, #16
 800abee:	d104      	bne.n	800abfa <HAL_TIM_PWM_Start_DMA+0x1a6>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abf8:	e006      	b.n	800ac08 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2202      	movs	r2, #2
 800abfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac02:	e001      	b.n	800ac08 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e12d      	b.n	800ae64 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	2b0c      	cmp	r3, #12
 800ac0c:	f200 80ae 	bhi.w	800ad6c <HAL_TIM_PWM_Start_DMA+0x318>
 800ac10:	a201      	add	r2, pc, #4	; (adr r2, 800ac18 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800ac12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac16:	bf00      	nop
 800ac18:	0800ac4d 	.word	0x0800ac4d
 800ac1c:	0800ad6d 	.word	0x0800ad6d
 800ac20:	0800ad6d 	.word	0x0800ad6d
 800ac24:	0800ad6d 	.word	0x0800ad6d
 800ac28:	0800ac95 	.word	0x0800ac95
 800ac2c:	0800ad6d 	.word	0x0800ad6d
 800ac30:	0800ad6d 	.word	0x0800ad6d
 800ac34:	0800ad6d 	.word	0x0800ad6d
 800ac38:	0800acdd 	.word	0x0800acdd
 800ac3c:	0800ad6d 	.word	0x0800ad6d
 800ac40:	0800ad6d 	.word	0x0800ad6d
 800ac44:	0800ad6d 	.word	0x0800ad6d
 800ac48:	0800ad25 	.word	0x0800ad25
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	4a86      	ldr	r2, [pc, #536]	; (800ae6c <HAL_TIM_PWM_Start_DMA+0x418>)
 800ac52:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac58:	4a85      	ldr	r2, [pc, #532]	; (800ae70 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800ac5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	4a84      	ldr	r2, [pc, #528]	; (800ae74 <HAL_TIM_PWM_Start_DMA+0x420>)
 800ac62:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3334      	adds	r3, #52	; 0x34
 800ac70:	461a      	mov	r2, r3
 800ac72:	887b      	ldrh	r3, [r7, #2]
 800ac74:	f7f8 fec0 	bl	80039f8 <HAL_DMA_Start_IT>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e0f0      	b.n	800ae64 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac90:	60da      	str	r2, [r3, #12]
      break;
 800ac92:	e06e      	b.n	800ad72 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac98:	4a74      	ldr	r2, [pc, #464]	; (800ae6c <HAL_TIM_PWM_Start_DMA+0x418>)
 800ac9a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca0:	4a73      	ldr	r2, [pc, #460]	; (800ae70 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800aca2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca8:	4a72      	ldr	r2, [pc, #456]	; (800ae74 <HAL_TIM_PWM_Start_DMA+0x420>)
 800acaa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3338      	adds	r3, #56	; 0x38
 800acb8:	461a      	mov	r2, r3
 800acba:	887b      	ldrh	r3, [r7, #2]
 800acbc:	f7f8 fe9c 	bl	80039f8 <HAL_DMA_Start_IT>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e0cc      	b.n	800ae64 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68da      	ldr	r2, [r3, #12]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800acd8:	60da      	str	r2, [r3, #12]
      break;
 800acda:	e04a      	b.n	800ad72 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace0:	4a62      	ldr	r2, [pc, #392]	; (800ae6c <HAL_TIM_PWM_Start_DMA+0x418>)
 800ace2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace8:	4a61      	ldr	r2, [pc, #388]	; (800ae70 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800acea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf0:	4a60      	ldr	r2, [pc, #384]	; (800ae74 <HAL_TIM_PWM_Start_DMA+0x420>)
 800acf2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	333c      	adds	r3, #60	; 0x3c
 800ad00:	461a      	mov	r2, r3
 800ad02:	887b      	ldrh	r3, [r7, #2]
 800ad04:	f7f8 fe78 	bl	80039f8 <HAL_DMA_Start_IT>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e0a8      	b.n	800ae64 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68da      	ldr	r2, [r3, #12]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad20:	60da      	str	r2, [r3, #12]
      break;
 800ad22:	e026      	b.n	800ad72 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad28:	4a50      	ldr	r2, [pc, #320]	; (800ae6c <HAL_TIM_PWM_Start_DMA+0x418>)
 800ad2a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad30:	4a4f      	ldr	r2, [pc, #316]	; (800ae70 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800ad32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad38:	4a4e      	ldr	r2, [pc, #312]	; (800ae74 <HAL_TIM_PWM_Start_DMA+0x420>)
 800ad3a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ad40:	6879      	ldr	r1, [r7, #4]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3340      	adds	r3, #64	; 0x40
 800ad48:	461a      	mov	r2, r3
 800ad4a:	887b      	ldrh	r3, [r7, #2]
 800ad4c:	f7f8 fe54 	bl	80039f8 <HAL_DMA_Start_IT>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e084      	b.n	800ae64 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	68da      	ldr	r2, [r3, #12]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad68:	60da      	str	r2, [r3, #12]
      break;
 800ad6a:	e002      	b.n	800ad72 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	75fb      	strb	r3, [r7, #23]
      break;
 800ad70:	bf00      	nop
  }

  if (status == HAL_OK)
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d174      	bne.n	800ae62 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	68b9      	ldr	r1, [r7, #8]
 800ad80:	4618      	mov	r0, r3
 800ad82:	f001 f9cd 	bl	800c120 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a3b      	ldr	r2, [pc, #236]	; (800ae78 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d013      	beq.n	800adb8 <HAL_TIM_PWM_Start_DMA+0x364>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a39      	ldr	r2, [pc, #228]	; (800ae7c <HAL_TIM_PWM_Start_DMA+0x428>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d00e      	beq.n	800adb8 <HAL_TIM_PWM_Start_DMA+0x364>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a38      	ldr	r2, [pc, #224]	; (800ae80 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d009      	beq.n	800adb8 <HAL_TIM_PWM_Start_DMA+0x364>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a36      	ldr	r2, [pc, #216]	; (800ae84 <HAL_TIM_PWM_Start_DMA+0x430>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d004      	beq.n	800adb8 <HAL_TIM_PWM_Start_DMA+0x364>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a35      	ldr	r2, [pc, #212]	; (800ae88 <HAL_TIM_PWM_Start_DMA+0x434>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d101      	bne.n	800adbc <HAL_TIM_PWM_Start_DMA+0x368>
 800adb8:	2301      	movs	r3, #1
 800adba:	e000      	b.n	800adbe <HAL_TIM_PWM_Start_DMA+0x36a>
 800adbc:	2300      	movs	r3, #0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d007      	beq.n	800add2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800add0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a28      	ldr	r2, [pc, #160]	; (800ae78 <HAL_TIM_PWM_Start_DMA+0x424>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d022      	beq.n	800ae22 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ade4:	d01d      	beq.n	800ae22 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a28      	ldr	r2, [pc, #160]	; (800ae8c <HAL_TIM_PWM_Start_DMA+0x438>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d018      	beq.n	800ae22 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a26      	ldr	r2, [pc, #152]	; (800ae90 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d013      	beq.n	800ae22 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a25      	ldr	r2, [pc, #148]	; (800ae94 <HAL_TIM_PWM_Start_DMA+0x440>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d00e      	beq.n	800ae22 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a1c      	ldr	r2, [pc, #112]	; (800ae7c <HAL_TIM_PWM_Start_DMA+0x428>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d009      	beq.n	800ae22 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a21      	ldr	r2, [pc, #132]	; (800ae98 <HAL_TIM_PWM_Start_DMA+0x444>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d004      	beq.n	800ae22 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a18      	ldr	r2, [pc, #96]	; (800ae80 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d115      	bne.n	800ae4e <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	689a      	ldr	r2, [r3, #8]
 800ae28:	4b1c      	ldr	r3, [pc, #112]	; (800ae9c <HAL_TIM_PWM_Start_DMA+0x448>)
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	2b06      	cmp	r3, #6
 800ae32:	d015      	beq.n	800ae60 <HAL_TIM_PWM_Start_DMA+0x40c>
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae3a:	d011      	beq.n	800ae60 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f042 0201 	orr.w	r2, r2, #1
 800ae4a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae4c:	e008      	b.n	800ae60 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f042 0201 	orr.w	r2, r2, #1
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	e000      	b.n	800ae62 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae60:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ae62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	0800b7f3 	.word	0x0800b7f3
 800ae70:	0800b89b 	.word	0x0800b89b
 800ae74:	0800b761 	.word	0x0800b761
 800ae78:	40010000 	.word	0x40010000
 800ae7c:	40010400 	.word	0x40010400
 800ae80:	40014000 	.word	0x40014000
 800ae84:	40014400 	.word	0x40014400
 800ae88:	40014800 	.word	0x40014800
 800ae8c:	40000400 	.word	0x40000400
 800ae90:	40000800 	.word	0x40000800
 800ae94:	40000c00 	.word	0x40000c00
 800ae98:	40001800 	.word	0x40001800
 800ae9c:	00010007 	.word	0x00010007

0800aea0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	2b0c      	cmp	r3, #12
 800aeb2:	d855      	bhi.n	800af60 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800aeb4:	a201      	add	r2, pc, #4	; (adr r2, 800aebc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800aeb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeba:	bf00      	nop
 800aebc:	0800aef1 	.word	0x0800aef1
 800aec0:	0800af61 	.word	0x0800af61
 800aec4:	0800af61 	.word	0x0800af61
 800aec8:	0800af61 	.word	0x0800af61
 800aecc:	0800af0d 	.word	0x0800af0d
 800aed0:	0800af61 	.word	0x0800af61
 800aed4:	0800af61 	.word	0x0800af61
 800aed8:	0800af61 	.word	0x0800af61
 800aedc:	0800af29 	.word	0x0800af29
 800aee0:	0800af61 	.word	0x0800af61
 800aee4:	0800af61 	.word	0x0800af61
 800aee8:	0800af61 	.word	0x0800af61
 800aeec:	0800af45 	.word	0x0800af45
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68da      	ldr	r2, [r3, #12]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800aefe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af04:	4618      	mov	r0, r3
 800af06:	f7f8 ffe1 	bl	8003ecc <HAL_DMA_Abort_IT>
      break;
 800af0a:	e02c      	b.n	800af66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68da      	ldr	r2, [r3, #12]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af20:	4618      	mov	r0, r3
 800af22:	f7f8 ffd3 	bl	8003ecc <HAL_DMA_Abort_IT>
      break;
 800af26:	e01e      	b.n	800af66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7f8 ffc5 	bl	8003ecc <HAL_DMA_Abort_IT>
      break;
 800af42:	e010      	b.n	800af66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68da      	ldr	r2, [r3, #12]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800af52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af58:	4618      	mov	r0, r3
 800af5a:	f7f8 ffb7 	bl	8003ecc <HAL_DMA_Abort_IT>
      break;
 800af5e:	e002      	b.n	800af66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	73fb      	strb	r3, [r7, #15]
      break;
 800af64:	bf00      	nop
  }

  if (status == HAL_OK)
 800af66:	7bfb      	ldrb	r3, [r7, #15]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f040 8081 	bne.w	800b070 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2200      	movs	r2, #0
 800af74:	6839      	ldr	r1, [r7, #0]
 800af76:	4618      	mov	r0, r3
 800af78:	f001 f8d2 	bl	800c120 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a3e      	ldr	r2, [pc, #248]	; (800b07c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d013      	beq.n	800afae <HAL_TIM_PWM_Stop_DMA+0x10e>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a3d      	ldr	r2, [pc, #244]	; (800b080 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d00e      	beq.n	800afae <HAL_TIM_PWM_Stop_DMA+0x10e>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a3b      	ldr	r2, [pc, #236]	; (800b084 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d009      	beq.n	800afae <HAL_TIM_PWM_Stop_DMA+0x10e>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a3a      	ldr	r2, [pc, #232]	; (800b088 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d004      	beq.n	800afae <HAL_TIM_PWM_Stop_DMA+0x10e>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a38      	ldr	r2, [pc, #224]	; (800b08c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d101      	bne.n	800afb2 <HAL_TIM_PWM_Stop_DMA+0x112>
 800afae:	2301      	movs	r3, #1
 800afb0:	e000      	b.n	800afb4 <HAL_TIM_PWM_Stop_DMA+0x114>
 800afb2:	2300      	movs	r3, #0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d017      	beq.n	800afe8 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6a1a      	ldr	r2, [r3, #32]
 800afbe:	f241 1311 	movw	r3, #4369	; 0x1111
 800afc2:	4013      	ands	r3, r2
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10f      	bne.n	800afe8 <HAL_TIM_PWM_Stop_DMA+0x148>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6a1a      	ldr	r2, [r3, #32]
 800afce:	f240 4344 	movw	r3, #1092	; 0x444
 800afd2:	4013      	ands	r3, r2
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d107      	bne.n	800afe8 <HAL_TIM_PWM_Stop_DMA+0x148>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800afe6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	6a1a      	ldr	r2, [r3, #32]
 800afee:	f241 1311 	movw	r3, #4369	; 0x1111
 800aff2:	4013      	ands	r3, r2
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10f      	bne.n	800b018 <HAL_TIM_PWM_Stop_DMA+0x178>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6a1a      	ldr	r2, [r3, #32]
 800affe:	f240 4344 	movw	r3, #1092	; 0x444
 800b002:	4013      	ands	r3, r2
 800b004:	2b00      	cmp	r3, #0
 800b006:	d107      	bne.n	800b018 <HAL_TIM_PWM_Stop_DMA+0x178>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f022 0201 	bic.w	r2, r2, #1
 800b016:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d104      	bne.n	800b028 <HAL_TIM_PWM_Stop_DMA+0x188>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2201      	movs	r2, #1
 800b022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b026:	e023      	b.n	800b070 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	2b04      	cmp	r3, #4
 800b02c:	d104      	bne.n	800b038 <HAL_TIM_PWM_Stop_DMA+0x198>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b036:	e01b      	b.n	800b070 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	2b08      	cmp	r3, #8
 800b03c:	d104      	bne.n	800b048 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b046:	e013      	b.n	800b070 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2b0c      	cmp	r3, #12
 800b04c:	d104      	bne.n	800b058 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b056:	e00b      	b.n	800b070 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	2b10      	cmp	r3, #16
 800b05c:	d104      	bne.n	800b068 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b066:	e003      	b.n	800b070 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800b070:	7bfb      	ldrb	r3, [r7, #15]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	40010000 	.word	0x40010000
 800b080:	40010400 	.word	0x40010400
 800b084:	40014000 	.word	0x40014000
 800b088:	40014400 	.word	0x40014400
 800b08c:	40014800 	.word	0x40014800

0800b090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	f003 0302 	and.w	r3, r3, #2
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d122      	bne.n	800b0ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	f003 0302 	and.w	r3, r3, #2
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d11b      	bne.n	800b0ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f06f 0202 	mvn.w	r2, #2
 800b0bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	f003 0303 	and.w	r3, r3, #3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d003      	beq.n	800b0da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fb1c 	bl	800b710 <HAL_TIM_IC_CaptureCallback>
 800b0d8:	e005      	b.n	800b0e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fb0e 	bl	800b6fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7f6 f99f 	bl	8001424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	f003 0304 	and.w	r3, r3, #4
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	d122      	bne.n	800b140 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	f003 0304 	and.w	r3, r3, #4
 800b104:	2b04      	cmp	r3, #4
 800b106:	d11b      	bne.n	800b140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f06f 0204 	mvn.w	r2, #4
 800b110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2202      	movs	r2, #2
 800b116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	699b      	ldr	r3, [r3, #24]
 800b11e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b122:	2b00      	cmp	r3, #0
 800b124:	d003      	beq.n	800b12e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 faf2 	bl	800b710 <HAL_TIM_IC_CaptureCallback>
 800b12c:	e005      	b.n	800b13a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 fae4 	bl	800b6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7f6 f975 	bl	8001424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	f003 0308 	and.w	r3, r3, #8
 800b14a:	2b08      	cmp	r3, #8
 800b14c:	d122      	bne.n	800b194 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f003 0308 	and.w	r3, r3, #8
 800b158:	2b08      	cmp	r3, #8
 800b15a:	d11b      	bne.n	800b194 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f06f 0208 	mvn.w	r2, #8
 800b164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2204      	movs	r2, #4
 800b16a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	69db      	ldr	r3, [r3, #28]
 800b172:	f003 0303 	and.w	r3, r3, #3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 fac8 	bl	800b710 <HAL_TIM_IC_CaptureCallback>
 800b180:	e005      	b.n	800b18e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 faba 	bl	800b6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7f6 f94b 	bl	8001424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	f003 0310 	and.w	r3, r3, #16
 800b19e:	2b10      	cmp	r3, #16
 800b1a0:	d122      	bne.n	800b1e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	f003 0310 	and.w	r3, r3, #16
 800b1ac:	2b10      	cmp	r3, #16
 800b1ae:	d11b      	bne.n	800b1e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f06f 0210 	mvn.w	r2, #16
 800b1b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2208      	movs	r2, #8
 800b1be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	69db      	ldr	r3, [r3, #28]
 800b1c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fa9e 	bl	800b710 <HAL_TIM_IC_CaptureCallback>
 800b1d4:	e005      	b.n	800b1e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fa90 	bl	800b6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f7f6 f921 	bl	8001424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	f003 0301 	and.w	r3, r3, #1
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d10e      	bne.n	800b214 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	f003 0301 	and.w	r3, r3, #1
 800b200:	2b01      	cmp	r3, #1
 800b202:	d107      	bne.n	800b214 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f06f 0201 	mvn.w	r2, #1
 800b20c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fa6a 	bl	800b6e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b21e:	2b80      	cmp	r3, #128	; 0x80
 800b220:	d10e      	bne.n	800b240 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b22c:	2b80      	cmp	r3, #128	; 0x80
 800b22e:	d107      	bne.n	800b240 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f001 f82e 	bl	800c29c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b24a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b24e:	d10e      	bne.n	800b26e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b25a:	2b80      	cmp	r3, #128	; 0x80
 800b25c:	d107      	bne.n	800b26e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f001 f821 	bl	800c2b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b278:	2b40      	cmp	r3, #64	; 0x40
 800b27a:	d10e      	bne.n	800b29a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b286:	2b40      	cmp	r3, #64	; 0x40
 800b288:	d107      	bne.n	800b29a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fa4f 	bl	800b738 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	f003 0320 	and.w	r3, r3, #32
 800b2a4:	2b20      	cmp	r3, #32
 800b2a6:	d10e      	bne.n	800b2c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	f003 0320 	and.w	r3, r3, #32
 800b2b2:	2b20      	cmp	r3, #32
 800b2b4:	d107      	bne.n	800b2c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f06f 0220 	mvn.w	r2, #32
 800b2be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 ffe1 	bl	800c288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2c6:	bf00      	nop
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
	...

0800b2d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d101      	bne.n	800b2ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	e0ff      	b.n	800b4ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b14      	cmp	r3, #20
 800b2fa:	f200 80f0 	bhi.w	800b4de <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b2fe:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b304:	0800b359 	.word	0x0800b359
 800b308:	0800b4df 	.word	0x0800b4df
 800b30c:	0800b4df 	.word	0x0800b4df
 800b310:	0800b4df 	.word	0x0800b4df
 800b314:	0800b399 	.word	0x0800b399
 800b318:	0800b4df 	.word	0x0800b4df
 800b31c:	0800b4df 	.word	0x0800b4df
 800b320:	0800b4df 	.word	0x0800b4df
 800b324:	0800b3db 	.word	0x0800b3db
 800b328:	0800b4df 	.word	0x0800b4df
 800b32c:	0800b4df 	.word	0x0800b4df
 800b330:	0800b4df 	.word	0x0800b4df
 800b334:	0800b41b 	.word	0x0800b41b
 800b338:	0800b4df 	.word	0x0800b4df
 800b33c:	0800b4df 	.word	0x0800b4df
 800b340:	0800b4df 	.word	0x0800b4df
 800b344:	0800b45d 	.word	0x0800b45d
 800b348:	0800b4df 	.word	0x0800b4df
 800b34c:	0800b4df 	.word	0x0800b4df
 800b350:	0800b4df 	.word	0x0800b4df
 800b354:	0800b49d 	.word	0x0800b49d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68b9      	ldr	r1, [r7, #8]
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 fb6a 	bl	800ba38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	699a      	ldr	r2, [r3, #24]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f042 0208 	orr.w	r2, r2, #8
 800b372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	699a      	ldr	r2, [r3, #24]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f022 0204 	bic.w	r2, r2, #4
 800b382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	6999      	ldr	r1, [r3, #24]
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	691a      	ldr	r2, [r3, #16]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	430a      	orrs	r2, r1
 800b394:	619a      	str	r2, [r3, #24]
      break;
 800b396:	e0a5      	b.n	800b4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68b9      	ldr	r1, [r7, #8]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 fbda 	bl	800bb58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	699a      	ldr	r2, [r3, #24]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	699a      	ldr	r2, [r3, #24]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6999      	ldr	r1, [r3, #24]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	021a      	lsls	r2, r3, #8
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	430a      	orrs	r2, r1
 800b3d6:	619a      	str	r2, [r3, #24]
      break;
 800b3d8:	e084      	b.n	800b4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68b9      	ldr	r1, [r7, #8]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 fc43 	bl	800bc6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	69da      	ldr	r2, [r3, #28]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f042 0208 	orr.w	r2, r2, #8
 800b3f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	69da      	ldr	r2, [r3, #28]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f022 0204 	bic.w	r2, r2, #4
 800b404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	69d9      	ldr	r1, [r3, #28]
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	691a      	ldr	r2, [r3, #16]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	430a      	orrs	r2, r1
 800b416:	61da      	str	r2, [r3, #28]
      break;
 800b418:	e064      	b.n	800b4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68b9      	ldr	r1, [r7, #8]
 800b420:	4618      	mov	r0, r3
 800b422:	f000 fcab 	bl	800bd7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	69da      	ldr	r2, [r3, #28]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	69da      	ldr	r2, [r3, #28]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	69d9      	ldr	r1, [r3, #28]
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	021a      	lsls	r2, r3, #8
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	430a      	orrs	r2, r1
 800b458:	61da      	str	r2, [r3, #28]
      break;
 800b45a:	e043      	b.n	800b4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	68b9      	ldr	r1, [r7, #8]
 800b462:	4618      	mov	r0, r3
 800b464:	f000 fcf4 	bl	800be50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f042 0208 	orr.w	r2, r2, #8
 800b476:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f022 0204 	bic.w	r2, r2, #4
 800b486:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	691a      	ldr	r2, [r3, #16]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	430a      	orrs	r2, r1
 800b498:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b49a:	e023      	b.n	800b4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68b9      	ldr	r1, [r7, #8]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 fd38 	bl	800bf18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	021a      	lsls	r2, r3, #8
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	430a      	orrs	r2, r1
 800b4da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b4dc:	e002      	b.n	800b4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop

0800b4f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d101      	bne.n	800b514 <HAL_TIM_ConfigClockSource+0x1c>
 800b510:	2302      	movs	r3, #2
 800b512:	e0dc      	b.n	800b6ce <HAL_TIM_ConfigClockSource+0x1d6>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2202      	movs	r2, #2
 800b520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b52c:	68ba      	ldr	r2, [r7, #8]
 800b52e:	4b6a      	ldr	r3, [pc, #424]	; (800b6d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b530:	4013      	ands	r3, r2
 800b532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b53a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a64      	ldr	r2, [pc, #400]	; (800b6dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	f000 80a9 	beq.w	800b6a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b550:	4a62      	ldr	r2, [pc, #392]	; (800b6dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800b552:	4293      	cmp	r3, r2
 800b554:	f200 80ae 	bhi.w	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b558:	4a61      	ldr	r2, [pc, #388]	; (800b6e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	f000 80a1 	beq.w	800b6a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b560:	4a5f      	ldr	r2, [pc, #380]	; (800b6e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b562:	4293      	cmp	r3, r2
 800b564:	f200 80a6 	bhi.w	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b568:	4a5e      	ldr	r2, [pc, #376]	; (800b6e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	f000 8099 	beq.w	800b6a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b570:	4a5c      	ldr	r2, [pc, #368]	; (800b6e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b572:	4293      	cmp	r3, r2
 800b574:	f200 809e 	bhi.w	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b578:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b57c:	f000 8091 	beq.w	800b6a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b580:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b584:	f200 8096 	bhi.w	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b58c:	f000 8089 	beq.w	800b6a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b594:	f200 808e 	bhi.w	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b59c:	d03e      	beq.n	800b61c <HAL_TIM_ConfigClockSource+0x124>
 800b59e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5a2:	f200 8087 	bhi.w	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5aa:	f000 8086 	beq.w	800b6ba <HAL_TIM_ConfigClockSource+0x1c2>
 800b5ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5b2:	d87f      	bhi.n	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5b4:	2b70      	cmp	r3, #112	; 0x70
 800b5b6:	d01a      	beq.n	800b5ee <HAL_TIM_ConfigClockSource+0xf6>
 800b5b8:	2b70      	cmp	r3, #112	; 0x70
 800b5ba:	d87b      	bhi.n	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5bc:	2b60      	cmp	r3, #96	; 0x60
 800b5be:	d050      	beq.n	800b662 <HAL_TIM_ConfigClockSource+0x16a>
 800b5c0:	2b60      	cmp	r3, #96	; 0x60
 800b5c2:	d877      	bhi.n	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5c4:	2b50      	cmp	r3, #80	; 0x50
 800b5c6:	d03c      	beq.n	800b642 <HAL_TIM_ConfigClockSource+0x14a>
 800b5c8:	2b50      	cmp	r3, #80	; 0x50
 800b5ca:	d873      	bhi.n	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5cc:	2b40      	cmp	r3, #64	; 0x40
 800b5ce:	d058      	beq.n	800b682 <HAL_TIM_ConfigClockSource+0x18a>
 800b5d0:	2b40      	cmp	r3, #64	; 0x40
 800b5d2:	d86f      	bhi.n	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5d4:	2b30      	cmp	r3, #48	; 0x30
 800b5d6:	d064      	beq.n	800b6a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5d8:	2b30      	cmp	r3, #48	; 0x30
 800b5da:	d86b      	bhi.n	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5dc:	2b20      	cmp	r3, #32
 800b5de:	d060      	beq.n	800b6a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5e0:	2b20      	cmp	r3, #32
 800b5e2:	d867      	bhi.n	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d05c      	beq.n	800b6a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5e8:	2b10      	cmp	r3, #16
 800b5ea:	d05a      	beq.n	800b6a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5ec:	e062      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6818      	ldr	r0, [r3, #0]
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	6899      	ldr	r1, [r3, #8]
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	f000 fd6f 	bl	800c0e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b610:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	609a      	str	r2, [r3, #8]
      break;
 800b61a:	e04f      	b.n	800b6bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6818      	ldr	r0, [r3, #0]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	6899      	ldr	r1, [r3, #8]
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	685a      	ldr	r2, [r3, #4]
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	f000 fd58 	bl	800c0e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	689a      	ldr	r2, [r3, #8]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b63e:	609a      	str	r2, [r3, #8]
      break;
 800b640:	e03c      	b.n	800b6bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6818      	ldr	r0, [r3, #0]
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	6859      	ldr	r1, [r3, #4]
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	461a      	mov	r2, r3
 800b650:	f000 fcc8 	bl	800bfe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2150      	movs	r1, #80	; 0x50
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 fd22 	bl	800c0a4 <TIM_ITRx_SetConfig>
      break;
 800b660:	e02c      	b.n	800b6bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6818      	ldr	r0, [r3, #0]
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	6859      	ldr	r1, [r3, #4]
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	461a      	mov	r2, r3
 800b670:	f000 fce7 	bl	800c042 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2160      	movs	r1, #96	; 0x60
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fd12 	bl	800c0a4 <TIM_ITRx_SetConfig>
      break;
 800b680:	e01c      	b.n	800b6bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6818      	ldr	r0, [r3, #0]
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	6859      	ldr	r1, [r3, #4]
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	461a      	mov	r2, r3
 800b690:	f000 fca8 	bl	800bfe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2140      	movs	r1, #64	; 0x40
 800b69a:	4618      	mov	r0, r3
 800b69c:	f000 fd02 	bl	800c0a4 <TIM_ITRx_SetConfig>
      break;
 800b6a0:	e00c      	b.n	800b6bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	f000 fcf9 	bl	800c0a4 <TIM_ITRx_SetConfig>
      break;
 800b6b2:	e003      	b.n	800b6bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6b8:	e000      	b.n	800b6bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b6ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	ffceff88 	.word	0xffceff88
 800b6dc:	00100040 	.word	0x00100040
 800b6e0:	00100030 	.word	0x00100030
 800b6e4:	00100020 	.word	0x00100020

0800b6e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	429a      	cmp	r2, r3
 800b776:	d107      	bne.n	800b788 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2201      	movs	r2, #1
 800b77c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b786:	e02a      	b.n	800b7de <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d107      	bne.n	800b7a2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2202      	movs	r2, #2
 800b796:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7a0:	e01d      	b.n	800b7de <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d107      	bne.n	800b7bc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2204      	movs	r2, #4
 800b7b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7ba:	e010      	b.n	800b7de <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d107      	bne.n	800b7d6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2208      	movs	r2, #8
 800b7ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7d4:	e003      	b.n	800b7de <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f7ff ffb4 	bl	800b74c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	771a      	strb	r2, [r3, #28]
}
 800b7ea:	bf00      	nop
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	429a      	cmp	r2, r3
 800b808:	d10b      	bne.n	800b822 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2201      	movs	r2, #1
 800b80e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	69db      	ldr	r3, [r3, #28]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d136      	bne.n	800b886 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b820:	e031      	b.n	800b886 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d10b      	bne.n	800b844 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2202      	movs	r2, #2
 800b830:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	69db      	ldr	r3, [r3, #28]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d125      	bne.n	800b886 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b842:	e020      	b.n	800b886 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d10b      	bne.n	800b866 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2204      	movs	r2, #4
 800b852:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	69db      	ldr	r3, [r3, #28]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d114      	bne.n	800b886 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b864:	e00f      	b.n	800b886 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d10a      	bne.n	800b886 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2208      	movs	r2, #8
 800b874:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	69db      	ldr	r3, [r3, #28]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d103      	bne.n	800b886 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2201      	movs	r2, #1
 800b882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f7f5 fdcc 	bl	8001424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	771a      	strb	r2, [r3, #28]
}
 800b892:	bf00      	nop
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d103      	bne.n	800b8ba <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	771a      	strb	r2, [r3, #28]
 800b8b8:	e019      	b.n	800b8ee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d103      	bne.n	800b8cc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2202      	movs	r2, #2
 800b8c8:	771a      	strb	r2, [r3, #28]
 800b8ca:	e010      	b.n	800b8ee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d103      	bne.n	800b8de <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2204      	movs	r2, #4
 800b8da:	771a      	strb	r2, [r3, #28]
 800b8dc:	e007      	b.n	800b8ee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d102      	bne.n	800b8ee <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2208      	movs	r2, #8
 800b8ec:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f7ff ff18 	bl	800b724 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	771a      	strb	r2, [r3, #28]
}
 800b8fa:	bf00      	nop
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
	...

0800b904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	4a40      	ldr	r2, [pc, #256]	; (800ba18 <TIM_Base_SetConfig+0x114>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d013      	beq.n	800b944 <TIM_Base_SetConfig+0x40>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b922:	d00f      	beq.n	800b944 <TIM_Base_SetConfig+0x40>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a3d      	ldr	r2, [pc, #244]	; (800ba1c <TIM_Base_SetConfig+0x118>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d00b      	beq.n	800b944 <TIM_Base_SetConfig+0x40>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4a3c      	ldr	r2, [pc, #240]	; (800ba20 <TIM_Base_SetConfig+0x11c>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d007      	beq.n	800b944 <TIM_Base_SetConfig+0x40>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a3b      	ldr	r2, [pc, #236]	; (800ba24 <TIM_Base_SetConfig+0x120>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d003      	beq.n	800b944 <TIM_Base_SetConfig+0x40>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a3a      	ldr	r2, [pc, #232]	; (800ba28 <TIM_Base_SetConfig+0x124>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d108      	bne.n	800b956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b94a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	4313      	orrs	r3, r2
 800b954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	4a2f      	ldr	r2, [pc, #188]	; (800ba18 <TIM_Base_SetConfig+0x114>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d01f      	beq.n	800b99e <TIM_Base_SetConfig+0x9a>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b964:	d01b      	beq.n	800b99e <TIM_Base_SetConfig+0x9a>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4a2c      	ldr	r2, [pc, #176]	; (800ba1c <TIM_Base_SetConfig+0x118>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d017      	beq.n	800b99e <TIM_Base_SetConfig+0x9a>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4a2b      	ldr	r2, [pc, #172]	; (800ba20 <TIM_Base_SetConfig+0x11c>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d013      	beq.n	800b99e <TIM_Base_SetConfig+0x9a>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a2a      	ldr	r2, [pc, #168]	; (800ba24 <TIM_Base_SetConfig+0x120>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d00f      	beq.n	800b99e <TIM_Base_SetConfig+0x9a>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4a29      	ldr	r2, [pc, #164]	; (800ba28 <TIM_Base_SetConfig+0x124>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d00b      	beq.n	800b99e <TIM_Base_SetConfig+0x9a>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4a28      	ldr	r2, [pc, #160]	; (800ba2c <TIM_Base_SetConfig+0x128>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d007      	beq.n	800b99e <TIM_Base_SetConfig+0x9a>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a27      	ldr	r2, [pc, #156]	; (800ba30 <TIM_Base_SetConfig+0x12c>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d003      	beq.n	800b99e <TIM_Base_SetConfig+0x9a>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a26      	ldr	r2, [pc, #152]	; (800ba34 <TIM_Base_SetConfig+0x130>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d108      	bne.n	800b9b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	689a      	ldr	r2, [r3, #8]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4a10      	ldr	r2, [pc, #64]	; (800ba18 <TIM_Base_SetConfig+0x114>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d00f      	beq.n	800b9fc <TIM_Base_SetConfig+0xf8>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4a12      	ldr	r2, [pc, #72]	; (800ba28 <TIM_Base_SetConfig+0x124>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d00b      	beq.n	800b9fc <TIM_Base_SetConfig+0xf8>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4a11      	ldr	r2, [pc, #68]	; (800ba2c <TIM_Base_SetConfig+0x128>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d007      	beq.n	800b9fc <TIM_Base_SetConfig+0xf8>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a10      	ldr	r2, [pc, #64]	; (800ba30 <TIM_Base_SetConfig+0x12c>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d003      	beq.n	800b9fc <TIM_Base_SetConfig+0xf8>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a0f      	ldr	r2, [pc, #60]	; (800ba34 <TIM_Base_SetConfig+0x130>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d103      	bne.n	800ba04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	691a      	ldr	r2, [r3, #16]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	615a      	str	r2, [r3, #20]
}
 800ba0a:	bf00      	nop
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	40010000 	.word	0x40010000
 800ba1c:	40000400 	.word	0x40000400
 800ba20:	40000800 	.word	0x40000800
 800ba24:	40000c00 	.word	0x40000c00
 800ba28:	40010400 	.word	0x40010400
 800ba2c:	40014000 	.word	0x40014000
 800ba30:	40014400 	.word	0x40014400
 800ba34:	40014800 	.word	0x40014800

0800ba38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	f023 0201 	bic.w	r2, r3, #1
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a1b      	ldr	r3, [r3, #32]
 800ba52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	699b      	ldr	r3, [r3, #24]
 800ba5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	4b37      	ldr	r3, [pc, #220]	; (800bb40 <TIM_OC1_SetConfig+0x108>)
 800ba64:	4013      	ands	r3, r2
 800ba66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f023 0303 	bic.w	r3, r3, #3
 800ba6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	f023 0302 	bic.w	r3, r3, #2
 800ba80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	697a      	ldr	r2, [r7, #20]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a2d      	ldr	r2, [pc, #180]	; (800bb44 <TIM_OC1_SetConfig+0x10c>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d00f      	beq.n	800bab4 <TIM_OC1_SetConfig+0x7c>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a2c      	ldr	r2, [pc, #176]	; (800bb48 <TIM_OC1_SetConfig+0x110>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d00b      	beq.n	800bab4 <TIM_OC1_SetConfig+0x7c>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a2b      	ldr	r2, [pc, #172]	; (800bb4c <TIM_OC1_SetConfig+0x114>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d007      	beq.n	800bab4 <TIM_OC1_SetConfig+0x7c>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a2a      	ldr	r2, [pc, #168]	; (800bb50 <TIM_OC1_SetConfig+0x118>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d003      	beq.n	800bab4 <TIM_OC1_SetConfig+0x7c>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a29      	ldr	r2, [pc, #164]	; (800bb54 <TIM_OC1_SetConfig+0x11c>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d10c      	bne.n	800bace <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	f023 0308 	bic.w	r3, r3, #8
 800baba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	f023 0304 	bic.w	r3, r3, #4
 800bacc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4a1c      	ldr	r2, [pc, #112]	; (800bb44 <TIM_OC1_SetConfig+0x10c>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d00f      	beq.n	800baf6 <TIM_OC1_SetConfig+0xbe>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a1b      	ldr	r2, [pc, #108]	; (800bb48 <TIM_OC1_SetConfig+0x110>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d00b      	beq.n	800baf6 <TIM_OC1_SetConfig+0xbe>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a1a      	ldr	r2, [pc, #104]	; (800bb4c <TIM_OC1_SetConfig+0x114>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d007      	beq.n	800baf6 <TIM_OC1_SetConfig+0xbe>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a19      	ldr	r2, [pc, #100]	; (800bb50 <TIM_OC1_SetConfig+0x118>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d003      	beq.n	800baf6 <TIM_OC1_SetConfig+0xbe>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a18      	ldr	r2, [pc, #96]	; (800bb54 <TIM_OC1_SetConfig+0x11c>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d111      	bne.n	800bb1a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bafc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	695b      	ldr	r3, [r3, #20]
 800bb0a:	693a      	ldr	r2, [r7, #16]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	699b      	ldr	r3, [r3, #24]
 800bb14:	693a      	ldr	r2, [r7, #16]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	693a      	ldr	r2, [r7, #16]
 800bb1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	685a      	ldr	r2, [r3, #4]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	697a      	ldr	r2, [r7, #20]
 800bb32:	621a      	str	r2, [r3, #32]
}
 800bb34:	bf00      	nop
 800bb36:	371c      	adds	r7, #28
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	fffeff8f 	.word	0xfffeff8f
 800bb44:	40010000 	.word	0x40010000
 800bb48:	40010400 	.word	0x40010400
 800bb4c:	40014000 	.word	0x40014000
 800bb50:	40014400 	.word	0x40014400
 800bb54:	40014800 	.word	0x40014800

0800bb58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b087      	sub	sp, #28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	f023 0210 	bic.w	r2, r3, #16
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a1b      	ldr	r3, [r3, #32]
 800bb72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	699b      	ldr	r3, [r3, #24]
 800bb7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	4b34      	ldr	r3, [pc, #208]	; (800bc54 <TIM_OC2_SetConfig+0xfc>)
 800bb84:	4013      	ands	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	021b      	lsls	r3, r3, #8
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	f023 0320 	bic.w	r3, r3, #32
 800bba2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	011b      	lsls	r3, r3, #4
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	4a29      	ldr	r2, [pc, #164]	; (800bc58 <TIM_OC2_SetConfig+0x100>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d003      	beq.n	800bbc0 <TIM_OC2_SetConfig+0x68>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	4a28      	ldr	r2, [pc, #160]	; (800bc5c <TIM_OC2_SetConfig+0x104>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d10d      	bne.n	800bbdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	011b      	lsls	r3, r3, #4
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a1e      	ldr	r2, [pc, #120]	; (800bc58 <TIM_OC2_SetConfig+0x100>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d00f      	beq.n	800bc04 <TIM_OC2_SetConfig+0xac>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a1d      	ldr	r2, [pc, #116]	; (800bc5c <TIM_OC2_SetConfig+0x104>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d00b      	beq.n	800bc04 <TIM_OC2_SetConfig+0xac>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a1c      	ldr	r2, [pc, #112]	; (800bc60 <TIM_OC2_SetConfig+0x108>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d007      	beq.n	800bc04 <TIM_OC2_SetConfig+0xac>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a1b      	ldr	r2, [pc, #108]	; (800bc64 <TIM_OC2_SetConfig+0x10c>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d003      	beq.n	800bc04 <TIM_OC2_SetConfig+0xac>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a1a      	ldr	r2, [pc, #104]	; (800bc68 <TIM_OC2_SetConfig+0x110>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d113      	bne.n	800bc2c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	695b      	ldr	r3, [r3, #20]
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	693a      	ldr	r2, [r7, #16]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	699b      	ldr	r3, [r3, #24]
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	693a      	ldr	r2, [r7, #16]
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	693a      	ldr	r2, [r7, #16]
 800bc30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	621a      	str	r2, [r3, #32]
}
 800bc46:	bf00      	nop
 800bc48:	371c      	adds	r7, #28
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	feff8fff 	.word	0xfeff8fff
 800bc58:	40010000 	.word	0x40010000
 800bc5c:	40010400 	.word	0x40010400
 800bc60:	40014000 	.word	0x40014000
 800bc64:	40014400 	.word	0x40014400
 800bc68:	40014800 	.word	0x40014800

0800bc6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b087      	sub	sp, #28
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a1b      	ldr	r3, [r3, #32]
 800bc7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6a1b      	ldr	r3, [r3, #32]
 800bc86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	4b33      	ldr	r3, [pc, #204]	; (800bd64 <TIM_OC3_SetConfig+0xf8>)
 800bc98:	4013      	ands	r3, r2
 800bc9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f023 0303 	bic.w	r3, r3, #3
 800bca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bcb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	021b      	lsls	r3, r3, #8
 800bcbc:	697a      	ldr	r2, [r7, #20]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a28      	ldr	r2, [pc, #160]	; (800bd68 <TIM_OC3_SetConfig+0xfc>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d003      	beq.n	800bcd2 <TIM_OC3_SetConfig+0x66>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4a27      	ldr	r2, [pc, #156]	; (800bd6c <TIM_OC3_SetConfig+0x100>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d10d      	bne.n	800bcee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bcd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	021b      	lsls	r3, r3, #8
 800bce0:	697a      	ldr	r2, [r7, #20]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bcec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a1d      	ldr	r2, [pc, #116]	; (800bd68 <TIM_OC3_SetConfig+0xfc>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d00f      	beq.n	800bd16 <TIM_OC3_SetConfig+0xaa>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a1c      	ldr	r2, [pc, #112]	; (800bd6c <TIM_OC3_SetConfig+0x100>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d00b      	beq.n	800bd16 <TIM_OC3_SetConfig+0xaa>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a1b      	ldr	r2, [pc, #108]	; (800bd70 <TIM_OC3_SetConfig+0x104>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d007      	beq.n	800bd16 <TIM_OC3_SetConfig+0xaa>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a1a      	ldr	r2, [pc, #104]	; (800bd74 <TIM_OC3_SetConfig+0x108>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d003      	beq.n	800bd16 <TIM_OC3_SetConfig+0xaa>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4a19      	ldr	r2, [pc, #100]	; (800bd78 <TIM_OC3_SetConfig+0x10c>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d113      	bne.n	800bd3e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	695b      	ldr	r3, [r3, #20]
 800bd2a:	011b      	lsls	r3, r3, #4
 800bd2c:	693a      	ldr	r2, [r7, #16]
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	699b      	ldr	r3, [r3, #24]
 800bd36:	011b      	lsls	r3, r3, #4
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	693a      	ldr	r2, [r7, #16]
 800bd42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	685a      	ldr	r2, [r3, #4]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	697a      	ldr	r2, [r7, #20]
 800bd56:	621a      	str	r2, [r3, #32]
}
 800bd58:	bf00      	nop
 800bd5a:	371c      	adds	r7, #28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr
 800bd64:	fffeff8f 	.word	0xfffeff8f
 800bd68:	40010000 	.word	0x40010000
 800bd6c:	40010400 	.word	0x40010400
 800bd70:	40014000 	.word	0x40014000
 800bd74:	40014400 	.word	0x40014400
 800bd78:	40014800 	.word	0x40014800

0800bd7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b087      	sub	sp, #28
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a1b      	ldr	r3, [r3, #32]
 800bd8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a1b      	ldr	r3, [r3, #32]
 800bd96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	69db      	ldr	r3, [r3, #28]
 800bda2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	4b24      	ldr	r3, [pc, #144]	; (800be38 <TIM_OC4_SetConfig+0xbc>)
 800bda8:	4013      	ands	r3, r2
 800bdaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	021b      	lsls	r3, r3, #8
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bdc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	031b      	lsls	r3, r3, #12
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a19      	ldr	r2, [pc, #100]	; (800be3c <TIM_OC4_SetConfig+0xc0>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d00f      	beq.n	800bdfc <TIM_OC4_SetConfig+0x80>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a18      	ldr	r2, [pc, #96]	; (800be40 <TIM_OC4_SetConfig+0xc4>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d00b      	beq.n	800bdfc <TIM_OC4_SetConfig+0x80>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a17      	ldr	r2, [pc, #92]	; (800be44 <TIM_OC4_SetConfig+0xc8>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d007      	beq.n	800bdfc <TIM_OC4_SetConfig+0x80>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a16      	ldr	r2, [pc, #88]	; (800be48 <TIM_OC4_SetConfig+0xcc>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d003      	beq.n	800bdfc <TIM_OC4_SetConfig+0x80>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a15      	ldr	r2, [pc, #84]	; (800be4c <TIM_OC4_SetConfig+0xd0>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d109      	bne.n	800be10 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	019b      	lsls	r3, r3, #6
 800be0a:	697a      	ldr	r2, [r7, #20]
 800be0c:	4313      	orrs	r3, r2
 800be0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	685a      	ldr	r2, [r3, #4]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	693a      	ldr	r2, [r7, #16]
 800be28:	621a      	str	r2, [r3, #32]
}
 800be2a:	bf00      	nop
 800be2c:	371c      	adds	r7, #28
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	feff8fff 	.word	0xfeff8fff
 800be3c:	40010000 	.word	0x40010000
 800be40:	40010400 	.word	0x40010400
 800be44:	40014000 	.word	0x40014000
 800be48:	40014400 	.word	0x40014400
 800be4c:	40014800 	.word	0x40014800

0800be50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800be50:	b480      	push	{r7}
 800be52:	b087      	sub	sp, #28
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a1b      	ldr	r3, [r3, #32]
 800be6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	4b21      	ldr	r3, [pc, #132]	; (800bf00 <TIM_OC5_SetConfig+0xb0>)
 800be7c:	4013      	ands	r3, r2
 800be7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	4313      	orrs	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	041b      	lsls	r3, r3, #16
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a18      	ldr	r2, [pc, #96]	; (800bf04 <TIM_OC5_SetConfig+0xb4>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d00f      	beq.n	800bec6 <TIM_OC5_SetConfig+0x76>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a17      	ldr	r2, [pc, #92]	; (800bf08 <TIM_OC5_SetConfig+0xb8>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d00b      	beq.n	800bec6 <TIM_OC5_SetConfig+0x76>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a16      	ldr	r2, [pc, #88]	; (800bf0c <TIM_OC5_SetConfig+0xbc>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d007      	beq.n	800bec6 <TIM_OC5_SetConfig+0x76>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a15      	ldr	r2, [pc, #84]	; (800bf10 <TIM_OC5_SetConfig+0xc0>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d003      	beq.n	800bec6 <TIM_OC5_SetConfig+0x76>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a14      	ldr	r2, [pc, #80]	; (800bf14 <TIM_OC5_SetConfig+0xc4>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d109      	bne.n	800beda <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800becc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	021b      	lsls	r3, r3, #8
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	4313      	orrs	r3, r2
 800bed8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	685a      	ldr	r2, [r3, #4]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	621a      	str	r2, [r3, #32]
}
 800bef4:	bf00      	nop
 800bef6:	371c      	adds	r7, #28
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr
 800bf00:	fffeff8f 	.word	0xfffeff8f
 800bf04:	40010000 	.word	0x40010000
 800bf08:	40010400 	.word	0x40010400
 800bf0c:	40014000 	.word	0x40014000
 800bf10:	40014400 	.word	0x40014400
 800bf14:	40014800 	.word	0x40014800

0800bf18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b087      	sub	sp, #28
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a1b      	ldr	r3, [r3, #32]
 800bf26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	4b22      	ldr	r3, [pc, #136]	; (800bfcc <TIM_OC6_SetConfig+0xb4>)
 800bf44:	4013      	ands	r3, r2
 800bf46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	021b      	lsls	r3, r3, #8
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	051b      	lsls	r3, r3, #20
 800bf62:	693a      	ldr	r2, [r7, #16]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a19      	ldr	r2, [pc, #100]	; (800bfd0 <TIM_OC6_SetConfig+0xb8>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d00f      	beq.n	800bf90 <TIM_OC6_SetConfig+0x78>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a18      	ldr	r2, [pc, #96]	; (800bfd4 <TIM_OC6_SetConfig+0xbc>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d00b      	beq.n	800bf90 <TIM_OC6_SetConfig+0x78>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4a17      	ldr	r2, [pc, #92]	; (800bfd8 <TIM_OC6_SetConfig+0xc0>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d007      	beq.n	800bf90 <TIM_OC6_SetConfig+0x78>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a16      	ldr	r2, [pc, #88]	; (800bfdc <TIM_OC6_SetConfig+0xc4>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d003      	beq.n	800bf90 <TIM_OC6_SetConfig+0x78>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a15      	ldr	r2, [pc, #84]	; (800bfe0 <TIM_OC6_SetConfig+0xc8>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d109      	bne.n	800bfa4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	029b      	lsls	r3, r3, #10
 800bf9e:	697a      	ldr	r2, [r7, #20]
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	697a      	ldr	r2, [r7, #20]
 800bfa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	693a      	ldr	r2, [r7, #16]
 800bfbc:	621a      	str	r2, [r3, #32]
}
 800bfbe:	bf00      	nop
 800bfc0:	371c      	adds	r7, #28
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	feff8fff 	.word	0xfeff8fff
 800bfd0:	40010000 	.word	0x40010000
 800bfd4:	40010400 	.word	0x40010400
 800bfd8:	40014000 	.word	0x40014000
 800bfdc:	40014400 	.word	0x40014400
 800bfe0:	40014800 	.word	0x40014800

0800bfe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b087      	sub	sp, #28
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6a1b      	ldr	r3, [r3, #32]
 800bff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6a1b      	ldr	r3, [r3, #32]
 800bffa:	f023 0201 	bic.w	r2, r3, #1
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	699b      	ldr	r3, [r3, #24]
 800c006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c00e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	011b      	lsls	r3, r3, #4
 800c014:	693a      	ldr	r2, [r7, #16]
 800c016:	4313      	orrs	r3, r2
 800c018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	f023 030a 	bic.w	r3, r3, #10
 800c020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	4313      	orrs	r3, r2
 800c028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	697a      	ldr	r2, [r7, #20]
 800c034:	621a      	str	r2, [r3, #32]
}
 800c036:	bf00      	nop
 800c038:	371c      	adds	r7, #28
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr

0800c042 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c042:	b480      	push	{r7}
 800c044:	b087      	sub	sp, #28
 800c046:	af00      	add	r7, sp, #0
 800c048:	60f8      	str	r0, [r7, #12]
 800c04a:	60b9      	str	r1, [r7, #8]
 800c04c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6a1b      	ldr	r3, [r3, #32]
 800c052:	f023 0210 	bic.w	r2, r3, #16
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	699b      	ldr	r3, [r3, #24]
 800c05e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6a1b      	ldr	r3, [r3, #32]
 800c064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c06c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	031b      	lsls	r3, r3, #12
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	4313      	orrs	r3, r2
 800c076:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c07e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	011b      	lsls	r3, r3, #4
 800c084:	693a      	ldr	r2, [r7, #16]
 800c086:	4313      	orrs	r3, r2
 800c088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	697a      	ldr	r2, [r7, #20]
 800c08e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	693a      	ldr	r2, [r7, #16]
 800c094:	621a      	str	r2, [r3, #32]
}
 800c096:	bf00      	nop
 800c098:	371c      	adds	r7, #28
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
	...

0800c0a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	4b09      	ldr	r3, [pc, #36]	; (800c0dc <TIM_ITRx_SetConfig+0x38>)
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	f043 0307 	orr.w	r3, r3, #7
 800c0c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	68fa      	ldr	r2, [r7, #12]
 800c0cc:	609a      	str	r2, [r3, #8]
}
 800c0ce:	bf00      	nop
 800c0d0:	3714      	adds	r7, #20
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	ffcfff8f 	.word	0xffcfff8f

0800c0e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b087      	sub	sp, #28
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
 800c0ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	021a      	lsls	r2, r3, #8
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	431a      	orrs	r2, r3
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	4313      	orrs	r3, r2
 800c108:	697a      	ldr	r2, [r7, #20]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	609a      	str	r2, [r3, #8]
}
 800c114:	bf00      	nop
 800c116:	371c      	adds	r7, #28
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c120:	b480      	push	{r7}
 800c122:	b087      	sub	sp, #28
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	f003 031f 	and.w	r3, r3, #31
 800c132:	2201      	movs	r2, #1
 800c134:	fa02 f303 	lsl.w	r3, r2, r3
 800c138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6a1a      	ldr	r2, [r3, #32]
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	43db      	mvns	r3, r3
 800c142:	401a      	ands	r2, r3
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6a1a      	ldr	r2, [r3, #32]
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	f003 031f 	and.w	r3, r3, #31
 800c152:	6879      	ldr	r1, [r7, #4]
 800c154:	fa01 f303 	lsl.w	r3, r1, r3
 800c158:	431a      	orrs	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	621a      	str	r2, [r3, #32]
}
 800c15e:	bf00      	nop
 800c160:	371c      	adds	r7, #28
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
	...

0800c16c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d101      	bne.n	800c184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c180:	2302      	movs	r3, #2
 800c182:	e06d      	b.n	800c260 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2202      	movs	r2, #2
 800c190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a30      	ldr	r2, [pc, #192]	; (800c26c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d004      	beq.n	800c1b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a2f      	ldr	r2, [pc, #188]	; (800c270 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d108      	bne.n	800c1ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c1be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a20      	ldr	r2, [pc, #128]	; (800c26c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d022      	beq.n	800c234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1f6:	d01d      	beq.n	800c234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a1d      	ldr	r2, [pc, #116]	; (800c274 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d018      	beq.n	800c234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a1c      	ldr	r2, [pc, #112]	; (800c278 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d013      	beq.n	800c234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a1a      	ldr	r2, [pc, #104]	; (800c27c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d00e      	beq.n	800c234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a15      	ldr	r2, [pc, #84]	; (800c270 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d009      	beq.n	800c234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a16      	ldr	r2, [pc, #88]	; (800c280 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d004      	beq.n	800c234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a15      	ldr	r2, [pc, #84]	; (800c284 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d10c      	bne.n	800c24e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c23a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	4313      	orrs	r3, r2
 800c244:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3714      	adds	r7, #20
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr
 800c26c:	40010000 	.word	0x40010000
 800c270:	40010400 	.word	0x40010400
 800c274:	40000400 	.word	0x40000400
 800c278:	40000800 	.word	0x40000800
 800c27c:	40000c00 	.word	0x40000c00
 800c280:	40001800 	.word	0x40001800
 800c284:	40014000 	.word	0x40014000

0800c288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d121      	bne.n	800c31a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	4b27      	ldr	r3, [pc, #156]	; (800c378 <FMC_SDRAM_Init+0xb4>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	683a      	ldr	r2, [r7, #0]
 800c2e0:	6851      	ldr	r1, [r2, #4]
 800c2e2:	683a      	ldr	r2, [r7, #0]
 800c2e4:	6892      	ldr	r2, [r2, #8]
 800c2e6:	4311      	orrs	r1, r2
 800c2e8:	683a      	ldr	r2, [r7, #0]
 800c2ea:	68d2      	ldr	r2, [r2, #12]
 800c2ec:	4311      	orrs	r1, r2
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	6912      	ldr	r2, [r2, #16]
 800c2f2:	4311      	orrs	r1, r2
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	6952      	ldr	r2, [r2, #20]
 800c2f8:	4311      	orrs	r1, r2
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	6992      	ldr	r2, [r2, #24]
 800c2fe:	4311      	orrs	r1, r2
 800c300:	683a      	ldr	r2, [r7, #0]
 800c302:	69d2      	ldr	r2, [r2, #28]
 800c304:	4311      	orrs	r1, r2
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	6a12      	ldr	r2, [r2, #32]
 800c30a:	4311      	orrs	r1, r2
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c310:	430a      	orrs	r2, r1
 800c312:	431a      	orrs	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	601a      	str	r2, [r3, #0]
 800c318:	e026      	b.n	800c368 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	69d9      	ldr	r1, [r3, #28]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	6a1b      	ldr	r3, [r3, #32]
 800c32a:	4319      	orrs	r1, r3
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c330:	430b      	orrs	r3, r1
 800c332:	431a      	orrs	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685a      	ldr	r2, [r3, #4]
 800c33c:	4b0e      	ldr	r3, [pc, #56]	; (800c378 <FMC_SDRAM_Init+0xb4>)
 800c33e:	4013      	ands	r3, r2
 800c340:	683a      	ldr	r2, [r7, #0]
 800c342:	6851      	ldr	r1, [r2, #4]
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	6892      	ldr	r2, [r2, #8]
 800c348:	4311      	orrs	r1, r2
 800c34a:	683a      	ldr	r2, [r7, #0]
 800c34c:	68d2      	ldr	r2, [r2, #12]
 800c34e:	4311      	orrs	r1, r2
 800c350:	683a      	ldr	r2, [r7, #0]
 800c352:	6912      	ldr	r2, [r2, #16]
 800c354:	4311      	orrs	r1, r2
 800c356:	683a      	ldr	r2, [r7, #0]
 800c358:	6952      	ldr	r2, [r2, #20]
 800c35a:	4311      	orrs	r1, r2
 800c35c:	683a      	ldr	r2, [r7, #0]
 800c35e:	6992      	ldr	r2, [r2, #24]
 800c360:	430a      	orrs	r2, r1
 800c362:	431a      	orrs	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	ffff8000 	.word	0xffff8000

0800c37c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d128      	bne.n	800c3e0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	1e59      	subs	r1, r3, #1
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	011b      	lsls	r3, r3, #4
 800c3a4:	4319      	orrs	r1, r3
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	021b      	lsls	r3, r3, #8
 800c3ae:	4319      	orrs	r1, r3
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	031b      	lsls	r3, r3, #12
 800c3b8:	4319      	orrs	r1, r3
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	041b      	lsls	r3, r3, #16
 800c3c2:	4319      	orrs	r1, r3
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	695b      	ldr	r3, [r3, #20]
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	051b      	lsls	r3, r3, #20
 800c3cc:	4319      	orrs	r1, r3
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	699b      	ldr	r3, [r3, #24]
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	061b      	lsls	r3, r3, #24
 800c3d6:	430b      	orrs	r3, r1
 800c3d8:	431a      	orrs	r2, r3
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	609a      	str	r2, [r3, #8]
 800c3de:	e02d      	b.n	800c43c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	689a      	ldr	r2, [r3, #8]
 800c3e4:	4b19      	ldr	r3, [pc, #100]	; (800c44c <FMC_SDRAM_Timing_Init+0xd0>)
 800c3e6:	4013      	ands	r3, r2
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	68d2      	ldr	r2, [r2, #12]
 800c3ec:	3a01      	subs	r2, #1
 800c3ee:	0311      	lsls	r1, r2, #12
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	6952      	ldr	r2, [r2, #20]
 800c3f4:	3a01      	subs	r2, #1
 800c3f6:	0512      	lsls	r2, r2, #20
 800c3f8:	430a      	orrs	r2, r1
 800c3fa:	431a      	orrs	r2, r3
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	1e59      	subs	r1, r3, #1
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	3b01      	subs	r3, #1
 800c414:	011b      	lsls	r3, r3, #4
 800c416:	4319      	orrs	r1, r3
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	3b01      	subs	r3, #1
 800c41e:	021b      	lsls	r3, r3, #8
 800c420:	4319      	orrs	r1, r3
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	3b01      	subs	r3, #1
 800c428:	041b      	lsls	r3, r3, #16
 800c42a:	4319      	orrs	r1, r3
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	3b01      	subs	r3, #1
 800c432:	061b      	lsls	r3, r3, #24
 800c434:	430b      	orrs	r3, r1
 800c436:	431a      	orrs	r2, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	ff0f0fff 	.word	0xff0f0fff

0800c450 <tan>:
 800c450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c452:	eeb0 7b40 	vmov.f64	d7, d0
 800c456:	ee17 3a90 	vmov	r3, s15
 800c45a:	4a15      	ldr	r2, [pc, #84]	; (800c4b0 <tan+0x60>)
 800c45c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c460:	4293      	cmp	r3, r2
 800c462:	dc07      	bgt.n	800c474 <tan+0x24>
 800c464:	ed9f 1b10 	vldr	d1, [pc, #64]	; 800c4a8 <tan+0x58>
 800c468:	2001      	movs	r0, #1
 800c46a:	b005      	add	sp, #20
 800c46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c470:	f000 bbfe 	b.w	800cc70 <__kernel_tan>
 800c474:	4a0f      	ldr	r2, [pc, #60]	; (800c4b4 <tan+0x64>)
 800c476:	4293      	cmp	r3, r2
 800c478:	dd04      	ble.n	800c484 <tan+0x34>
 800c47a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c47e:	b005      	add	sp, #20
 800c480:	f85d fb04 	ldr.w	pc, [sp], #4
 800c484:	4668      	mov	r0, sp
 800c486:	f000 f817 	bl	800c4b8 <__ieee754_rem_pio2>
 800c48a:	0040      	lsls	r0, r0, #1
 800c48c:	f000 0002 	and.w	r0, r0, #2
 800c490:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c494:	ed9d 0b00 	vldr	d0, [sp]
 800c498:	f1c0 0001 	rsb	r0, r0, #1
 800c49c:	f000 fbe8 	bl	800cc70 <__kernel_tan>
 800c4a0:	e7ed      	b.n	800c47e <tan+0x2e>
 800c4a2:	bf00      	nop
 800c4a4:	f3af 8000 	nop.w
	...
 800c4b0:	3fe921fb 	.word	0x3fe921fb
 800c4b4:	7fefffff 	.word	0x7fefffff

0800c4b8 <__ieee754_rem_pio2>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	eeb0 7b40 	vmov.f64	d7, d0
 800c4be:	ee17 5a90 	vmov	r5, s15
 800c4c2:	4b99      	ldr	r3, [pc, #612]	; (800c728 <__ieee754_rem_pio2+0x270>)
 800c4c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c4c8:	429e      	cmp	r6, r3
 800c4ca:	b088      	sub	sp, #32
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	dc07      	bgt.n	800c4e0 <__ieee754_rem_pio2+0x28>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	ed84 0b00 	vstr	d0, [r4]
 800c4d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c4dc:	2000      	movs	r0, #0
 800c4de:	e01b      	b.n	800c518 <__ieee754_rem_pio2+0x60>
 800c4e0:	4b92      	ldr	r3, [pc, #584]	; (800c72c <__ieee754_rem_pio2+0x274>)
 800c4e2:	429e      	cmp	r6, r3
 800c4e4:	dc3b      	bgt.n	800c55e <__ieee754_rem_pio2+0xa6>
 800c4e6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800c4ea:	2d00      	cmp	r5, #0
 800c4ec:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800c6e8 <__ieee754_rem_pio2+0x230>
 800c4f0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800c4f4:	dd19      	ble.n	800c52a <__ieee754_rem_pio2+0x72>
 800c4f6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c4fa:	429e      	cmp	r6, r3
 800c4fc:	d00e      	beq.n	800c51c <__ieee754_rem_pio2+0x64>
 800c4fe:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800c6f0 <__ieee754_rem_pio2+0x238>
 800c502:	ee37 5b46 	vsub.f64	d5, d7, d6
 800c506:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c50a:	ed84 5b00 	vstr	d5, [r4]
 800c50e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c512:	ed84 7b02 	vstr	d7, [r4, #8]
 800c516:	2001      	movs	r0, #1
 800c518:	b008      	add	sp, #32
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800c6f8 <__ieee754_rem_pio2+0x240>
 800c520:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c524:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800c700 <__ieee754_rem_pio2+0x248>
 800c528:	e7eb      	b.n	800c502 <__ieee754_rem_pio2+0x4a>
 800c52a:	429e      	cmp	r6, r3
 800c52c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c530:	d00e      	beq.n	800c550 <__ieee754_rem_pio2+0x98>
 800c532:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800c6f0 <__ieee754_rem_pio2+0x238>
 800c536:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c53a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c53e:	ed84 5b00 	vstr	d5, [r4]
 800c542:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c546:	f04f 30ff 	mov.w	r0, #4294967295
 800c54a:	ed84 7b02 	vstr	d7, [r4, #8]
 800c54e:	e7e3      	b.n	800c518 <__ieee754_rem_pio2+0x60>
 800c550:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c6f8 <__ieee754_rem_pio2+0x240>
 800c554:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c558:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c700 <__ieee754_rem_pio2+0x248>
 800c55c:	e7eb      	b.n	800c536 <__ieee754_rem_pio2+0x7e>
 800c55e:	4b74      	ldr	r3, [pc, #464]	; (800c730 <__ieee754_rem_pio2+0x278>)
 800c560:	429e      	cmp	r6, r3
 800c562:	dc70      	bgt.n	800c646 <__ieee754_rem_pio2+0x18e>
 800c564:	f000 fc9c 	bl	800cea0 <fabs>
 800c568:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c56c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800c708 <__ieee754_rem_pio2+0x250>
 800c570:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c574:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c578:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c57c:	ee17 0a90 	vmov	r0, s15
 800c580:	eeb1 4b45 	vneg.f64	d4, d5
 800c584:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800c6e8 <__ieee754_rem_pio2+0x230>
 800c588:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c58c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800c6f0 <__ieee754_rem_pio2+0x238>
 800c590:	281f      	cmp	r0, #31
 800c592:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c596:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c59a:	dc08      	bgt.n	800c5ae <__ieee754_rem_pio2+0xf6>
 800c59c:	4b65      	ldr	r3, [pc, #404]	; (800c734 <__ieee754_rem_pio2+0x27c>)
 800c59e:	1e42      	subs	r2, r0, #1
 800c5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a4:	42b3      	cmp	r3, r6
 800c5a6:	d002      	beq.n	800c5ae <__ieee754_rem_pio2+0xf6>
 800c5a8:	ed84 6b00 	vstr	d6, [r4]
 800c5ac:	e026      	b.n	800c5fc <__ieee754_rem_pio2+0x144>
 800c5ae:	ee16 3a90 	vmov	r3, s13
 800c5b2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c5b6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c5ba:	2b10      	cmp	r3, #16
 800c5bc:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c5c0:	ddf2      	ble.n	800c5a8 <__ieee754_rem_pio2+0xf0>
 800c5c2:	eeb0 6b40 	vmov.f64	d6, d0
 800c5c6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800c6f8 <__ieee754_rem_pio2+0x240>
 800c5ca:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800c700 <__ieee754_rem_pio2+0x248>
 800c5ce:	eea4 6b07 	vfma.f64	d6, d4, d7
 800c5d2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c5d6:	eea4 0b07 	vfma.f64	d0, d4, d7
 800c5da:	eeb0 7b40 	vmov.f64	d7, d0
 800c5de:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c5e2:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c5e6:	ee13 3a90 	vmov	r3, s7
 800c5ea:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c5ee:	1ad3      	subs	r3, r2, r3
 800c5f0:	2b31      	cmp	r3, #49	; 0x31
 800c5f2:	dc17      	bgt.n	800c624 <__ieee754_rem_pio2+0x16c>
 800c5f4:	eeb0 0b46 	vmov.f64	d0, d6
 800c5f8:	ed84 3b00 	vstr	d3, [r4]
 800c5fc:	ed94 6b00 	vldr	d6, [r4]
 800c600:	2d00      	cmp	r5, #0
 800c602:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c606:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c60a:	ed84 0b02 	vstr	d0, [r4, #8]
 800c60e:	da83      	bge.n	800c518 <__ieee754_rem_pio2+0x60>
 800c610:	eeb1 6b46 	vneg.f64	d6, d6
 800c614:	eeb1 0b40 	vneg.f64	d0, d0
 800c618:	ed84 6b00 	vstr	d6, [r4]
 800c61c:	ed84 0b02 	vstr	d0, [r4, #8]
 800c620:	4240      	negs	r0, r0
 800c622:	e779      	b.n	800c518 <__ieee754_rem_pio2+0x60>
 800c624:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800c710 <__ieee754_rem_pio2+0x258>
 800c628:	eeb0 0b46 	vmov.f64	d0, d6
 800c62c:	eea4 0b03 	vfma.f64	d0, d4, d3
 800c630:	ee36 7b40 	vsub.f64	d7, d6, d0
 800c634:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800c718 <__ieee754_rem_pio2+0x260>
 800c638:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c63c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c640:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c644:	e7b0      	b.n	800c5a8 <__ieee754_rem_pio2+0xf0>
 800c646:	4b3c      	ldr	r3, [pc, #240]	; (800c738 <__ieee754_rem_pio2+0x280>)
 800c648:	429e      	cmp	r6, r3
 800c64a:	dd06      	ble.n	800c65a <__ieee754_rem_pio2+0x1a2>
 800c64c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c650:	ed80 7b02 	vstr	d7, [r0, #8]
 800c654:	ed80 7b00 	vstr	d7, [r0]
 800c658:	e740      	b.n	800c4dc <__ieee754_rem_pio2+0x24>
 800c65a:	1532      	asrs	r2, r6, #20
 800c65c:	ee10 0a10 	vmov	r0, s0
 800c660:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800c664:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c668:	ec41 0b17 	vmov	d7, r0, r1
 800c66c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c670:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800c720 <__ieee754_rem_pio2+0x268>
 800c674:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c678:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c67c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c680:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c684:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c688:	a902      	add	r1, sp, #8
 800c68a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c68e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c692:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c696:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c69a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c69e:	2603      	movs	r6, #3
 800c6a0:	4608      	mov	r0, r1
 800c6a2:	ed91 7b04 	vldr	d7, [r1, #16]
 800c6a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ae:	4633      	mov	r3, r6
 800c6b0:	f1a1 0108 	sub.w	r1, r1, #8
 800c6b4:	f106 36ff 	add.w	r6, r6, #4294967295
 800c6b8:	d0f3      	beq.n	800c6a2 <__ieee754_rem_pio2+0x1ea>
 800c6ba:	4920      	ldr	r1, [pc, #128]	; (800c73c <__ieee754_rem_pio2+0x284>)
 800c6bc:	9101      	str	r1, [sp, #4]
 800c6be:	2102      	movs	r1, #2
 800c6c0:	9100      	str	r1, [sp, #0]
 800c6c2:	4621      	mov	r1, r4
 800c6c4:	f000 f83c 	bl	800c740 <__kernel_rem_pio2>
 800c6c8:	2d00      	cmp	r5, #0
 800c6ca:	f6bf af25 	bge.w	800c518 <__ieee754_rem_pio2+0x60>
 800c6ce:	ed94 7b00 	vldr	d7, [r4]
 800c6d2:	eeb1 7b47 	vneg.f64	d7, d7
 800c6d6:	ed84 7b00 	vstr	d7, [r4]
 800c6da:	ed94 7b02 	vldr	d7, [r4, #8]
 800c6de:	eeb1 7b47 	vneg.f64	d7, d7
 800c6e2:	ed84 7b02 	vstr	d7, [r4, #8]
 800c6e6:	e79b      	b.n	800c620 <__ieee754_rem_pio2+0x168>
 800c6e8:	54400000 	.word	0x54400000
 800c6ec:	3ff921fb 	.word	0x3ff921fb
 800c6f0:	1a626331 	.word	0x1a626331
 800c6f4:	3dd0b461 	.word	0x3dd0b461
 800c6f8:	1a600000 	.word	0x1a600000
 800c6fc:	3dd0b461 	.word	0x3dd0b461
 800c700:	2e037073 	.word	0x2e037073
 800c704:	3ba3198a 	.word	0x3ba3198a
 800c708:	6dc9c883 	.word	0x6dc9c883
 800c70c:	3fe45f30 	.word	0x3fe45f30
 800c710:	2e000000 	.word	0x2e000000
 800c714:	3ba3198a 	.word	0x3ba3198a
 800c718:	252049c1 	.word	0x252049c1
 800c71c:	397b839a 	.word	0x397b839a
 800c720:	00000000 	.word	0x00000000
 800c724:	41700000 	.word	0x41700000
 800c728:	3fe921fb 	.word	0x3fe921fb
 800c72c:	4002d97b 	.word	0x4002d97b
 800c730:	413921fb 	.word	0x413921fb
 800c734:	0800d1a4 	.word	0x0800d1a4
 800c738:	7fefffff 	.word	0x7fefffff
 800c73c:	0800d224 	.word	0x0800d224

0800c740 <__kernel_rem_pio2>:
 800c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	ed2d 8b06 	vpush	{d8-d10}
 800c748:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800c74c:	460f      	mov	r7, r1
 800c74e:	9002      	str	r0, [sp, #8]
 800c750:	49c5      	ldr	r1, [pc, #788]	; (800ca68 <__kernel_rem_pio2+0x328>)
 800c752:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800c754:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800c758:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800c75c:	9301      	str	r3, [sp, #4]
 800c75e:	f112 0f14 	cmn.w	r2, #20
 800c762:	bfa8      	it	ge
 800c764:	2018      	movge	r0, #24
 800c766:	f103 31ff 	add.w	r1, r3, #4294967295
 800c76a:	bfb8      	it	lt
 800c76c:	2000      	movlt	r0, #0
 800c76e:	f06f 0417 	mvn.w	r4, #23
 800c772:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800ca50 <__kernel_rem_pio2+0x310>
 800c776:	bfa4      	itt	ge
 800c778:	f1a2 0a03 	subge.w	sl, r2, #3
 800c77c:	fb9a f0f0 	sdivge	r0, sl, r0
 800c780:	fb00 4404 	mla	r4, r0, r4, r4
 800c784:	1a46      	subs	r6, r0, r1
 800c786:	4414      	add	r4, r2
 800c788:	eb09 0c01 	add.w	ip, r9, r1
 800c78c:	ad1a      	add	r5, sp, #104	; 0x68
 800c78e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800c792:	2200      	movs	r2, #0
 800c794:	4562      	cmp	r2, ip
 800c796:	dd10      	ble.n	800c7ba <__kernel_rem_pio2+0x7a>
 800c798:	9a01      	ldr	r2, [sp, #4]
 800c79a:	ab1a      	add	r3, sp, #104	; 0x68
 800c79c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c7a0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800c7a4:	f04f 0c00 	mov.w	ip, #0
 800c7a8:	45cc      	cmp	ip, r9
 800c7aa:	dc26      	bgt.n	800c7fa <__kernel_rem_pio2+0xba>
 800c7ac:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800ca50 <__kernel_rem_pio2+0x310>
 800c7b0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c7b4:	4616      	mov	r6, r2
 800c7b6:	2500      	movs	r5, #0
 800c7b8:	e015      	b.n	800c7e6 <__kernel_rem_pio2+0xa6>
 800c7ba:	42d6      	cmn	r6, r2
 800c7bc:	d409      	bmi.n	800c7d2 <__kernel_rem_pio2+0x92>
 800c7be:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800c7c2:	ee07 3a90 	vmov	s15, r3
 800c7c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c7ca:	eca5 7b02 	vstmia	r5!, {d7}
 800c7ce:	3201      	adds	r2, #1
 800c7d0:	e7e0      	b.n	800c794 <__kernel_rem_pio2+0x54>
 800c7d2:	eeb0 7b46 	vmov.f64	d7, d6
 800c7d6:	e7f8      	b.n	800c7ca <__kernel_rem_pio2+0x8a>
 800c7d8:	ecb8 5b02 	vldmia	r8!, {d5}
 800c7dc:	ed96 6b00 	vldr	d6, [r6]
 800c7e0:	3501      	adds	r5, #1
 800c7e2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c7e6:	428d      	cmp	r5, r1
 800c7e8:	f1a6 0608 	sub.w	r6, r6, #8
 800c7ec:	ddf4      	ble.n	800c7d8 <__kernel_rem_pio2+0x98>
 800c7ee:	ecaa 7b02 	vstmia	sl!, {d7}
 800c7f2:	f10c 0c01 	add.w	ip, ip, #1
 800c7f6:	3208      	adds	r2, #8
 800c7f8:	e7d6      	b.n	800c7a8 <__kernel_rem_pio2+0x68>
 800c7fa:	ab06      	add	r3, sp, #24
 800c7fc:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800ca58 <__kernel_rem_pio2+0x318>
 800c800:	ed9f ab97 	vldr	d10, [pc, #604]	; 800ca60 <__kernel_rem_pio2+0x320>
 800c804:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800c808:	9303      	str	r3, [sp, #12]
 800c80a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800c80e:	464d      	mov	r5, r9
 800c810:	00eb      	lsls	r3, r5, #3
 800c812:	9304      	str	r3, [sp, #16]
 800c814:	ab92      	add	r3, sp, #584	; 0x248
 800c816:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800c81a:	f10d 0b18 	add.w	fp, sp, #24
 800c81e:	ab6a      	add	r3, sp, #424	; 0x1a8
 800c820:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800c824:	465e      	mov	r6, fp
 800c826:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800c82a:	4628      	mov	r0, r5
 800c82c:	2800      	cmp	r0, #0
 800c82e:	f1a2 0208 	sub.w	r2, r2, #8
 800c832:	dc4c      	bgt.n	800c8ce <__kernel_rem_pio2+0x18e>
 800c834:	4620      	mov	r0, r4
 800c836:	9105      	str	r1, [sp, #20]
 800c838:	f000 fbb2 	bl	800cfa0 <scalbn>
 800c83c:	eeb0 8b40 	vmov.f64	d8, d0
 800c840:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800c844:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c848:	f000 fb36 	bl	800ceb8 <floor>
 800c84c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800c850:	eea0 8b47 	vfms.f64	d8, d0, d7
 800c854:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800c858:	2c00      	cmp	r4, #0
 800c85a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800c85e:	ee17 8a90 	vmov	r8, s15
 800c862:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c866:	9905      	ldr	r1, [sp, #20]
 800c868:	dd43      	ble.n	800c8f2 <__kernel_rem_pio2+0x1b2>
 800c86a:	1e68      	subs	r0, r5, #1
 800c86c:	ab06      	add	r3, sp, #24
 800c86e:	f1c4 0c18 	rsb	ip, r4, #24
 800c872:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800c876:	fa46 f20c 	asr.w	r2, r6, ip
 800c87a:	4490      	add	r8, r2
 800c87c:	fa02 f20c 	lsl.w	r2, r2, ip
 800c880:	1ab6      	subs	r6, r6, r2
 800c882:	f1c4 0217 	rsb	r2, r4, #23
 800c886:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800c88a:	4116      	asrs	r6, r2
 800c88c:	2e00      	cmp	r6, #0
 800c88e:	dd3f      	ble.n	800c910 <__kernel_rem_pio2+0x1d0>
 800c890:	f04f 0c00 	mov.w	ip, #0
 800c894:	f108 0801 	add.w	r8, r8, #1
 800c898:	4660      	mov	r0, ip
 800c89a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800c89e:	4565      	cmp	r5, ip
 800c8a0:	dc6e      	bgt.n	800c980 <__kernel_rem_pio2+0x240>
 800c8a2:	2c00      	cmp	r4, #0
 800c8a4:	dd04      	ble.n	800c8b0 <__kernel_rem_pio2+0x170>
 800c8a6:	2c01      	cmp	r4, #1
 800c8a8:	d07f      	beq.n	800c9aa <__kernel_rem_pio2+0x26a>
 800c8aa:	2c02      	cmp	r4, #2
 800c8ac:	f000 8087 	beq.w	800c9be <__kernel_rem_pio2+0x27e>
 800c8b0:	2e02      	cmp	r6, #2
 800c8b2:	d12d      	bne.n	800c910 <__kernel_rem_pio2+0x1d0>
 800c8b4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c8b8:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c8bc:	b340      	cbz	r0, 800c910 <__kernel_rem_pio2+0x1d0>
 800c8be:	4620      	mov	r0, r4
 800c8c0:	9105      	str	r1, [sp, #20]
 800c8c2:	f000 fb6d 	bl	800cfa0 <scalbn>
 800c8c6:	9905      	ldr	r1, [sp, #20]
 800c8c8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c8cc:	e020      	b.n	800c910 <__kernel_rem_pio2+0x1d0>
 800c8ce:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c8d2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c8d6:	3801      	subs	r0, #1
 800c8d8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c8dc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c8e0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c8e4:	eca6 0a01 	vstmia	r6!, {s0}
 800c8e8:	ed92 0b00 	vldr	d0, [r2]
 800c8ec:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c8f0:	e79c      	b.n	800c82c <__kernel_rem_pio2+0xec>
 800c8f2:	d105      	bne.n	800c900 <__kernel_rem_pio2+0x1c0>
 800c8f4:	1e6a      	subs	r2, r5, #1
 800c8f6:	ab06      	add	r3, sp, #24
 800c8f8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800c8fc:	15f6      	asrs	r6, r6, #23
 800c8fe:	e7c5      	b.n	800c88c <__kernel_rem_pio2+0x14c>
 800c900:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c904:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c90c:	da36      	bge.n	800c97c <__kernel_rem_pio2+0x23c>
 800c90e:	2600      	movs	r6, #0
 800c910:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c918:	f040 80aa 	bne.w	800ca70 <__kernel_rem_pio2+0x330>
 800c91c:	f105 3bff 	add.w	fp, r5, #4294967295
 800c920:	4658      	mov	r0, fp
 800c922:	2200      	movs	r2, #0
 800c924:	4548      	cmp	r0, r9
 800c926:	da52      	bge.n	800c9ce <__kernel_rem_pio2+0x28e>
 800c928:	2a00      	cmp	r2, #0
 800c92a:	f000 8081 	beq.w	800ca30 <__kernel_rem_pio2+0x2f0>
 800c92e:	ab06      	add	r3, sp, #24
 800c930:	3c18      	subs	r4, #24
 800c932:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c936:	2b00      	cmp	r3, #0
 800c938:	f000 8087 	beq.w	800ca4a <__kernel_rem_pio2+0x30a>
 800c93c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c940:	4620      	mov	r0, r4
 800c942:	f000 fb2d 	bl	800cfa0 <scalbn>
 800c946:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c94a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800ca58 <__kernel_rem_pio2+0x318>
 800c94e:	a96a      	add	r1, sp, #424	; 0x1a8
 800c950:	f103 0208 	add.w	r2, r3, #8
 800c954:	1888      	adds	r0, r1, r2
 800c956:	4659      	mov	r1, fp
 800c958:	2900      	cmp	r1, #0
 800c95a:	f280 80b7 	bge.w	800cacc <__kernel_rem_pio2+0x38c>
 800c95e:	4659      	mov	r1, fp
 800c960:	2900      	cmp	r1, #0
 800c962:	f2c0 80d5 	blt.w	800cb10 <__kernel_rem_pio2+0x3d0>
 800c966:	a86a      	add	r0, sp, #424	; 0x1a8
 800c968:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800c96c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800ca50 <__kernel_rem_pio2+0x310>
 800c970:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800ca6c <__kernel_rem_pio2+0x32c>
 800c974:	2400      	movs	r4, #0
 800c976:	ebab 0001 	sub.w	r0, fp, r1
 800c97a:	e0be      	b.n	800cafa <__kernel_rem_pio2+0x3ba>
 800c97c:	2602      	movs	r6, #2
 800c97e:	e787      	b.n	800c890 <__kernel_rem_pio2+0x150>
 800c980:	f8db 2000 	ldr.w	r2, [fp]
 800c984:	b958      	cbnz	r0, 800c99e <__kernel_rem_pio2+0x25e>
 800c986:	b122      	cbz	r2, 800c992 <__kernel_rem_pio2+0x252>
 800c988:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800c98c:	f8cb 2000 	str.w	r2, [fp]
 800c990:	2201      	movs	r2, #1
 800c992:	f10c 0c01 	add.w	ip, ip, #1
 800c996:	f10b 0b04 	add.w	fp, fp, #4
 800c99a:	4610      	mov	r0, r2
 800c99c:	e77f      	b.n	800c89e <__kernel_rem_pio2+0x15e>
 800c99e:	ebae 0202 	sub.w	r2, lr, r2
 800c9a2:	f8cb 2000 	str.w	r2, [fp]
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	e7f3      	b.n	800c992 <__kernel_rem_pio2+0x252>
 800c9aa:	f105 3cff 	add.w	ip, r5, #4294967295
 800c9ae:	ab06      	add	r3, sp, #24
 800c9b0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800c9b4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800c9b8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800c9bc:	e778      	b.n	800c8b0 <__kernel_rem_pio2+0x170>
 800c9be:	f105 3cff 	add.w	ip, r5, #4294967295
 800c9c2:	ab06      	add	r3, sp, #24
 800c9c4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800c9c8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800c9cc:	e7f4      	b.n	800c9b8 <__kernel_rem_pio2+0x278>
 800c9ce:	ab06      	add	r3, sp, #24
 800c9d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c9d4:	3801      	subs	r0, #1
 800c9d6:	431a      	orrs	r2, r3
 800c9d8:	e7a4      	b.n	800c924 <__kernel_rem_pio2+0x1e4>
 800c9da:	f10c 0c01 	add.w	ip, ip, #1
 800c9de:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d0f9      	beq.n	800c9da <__kernel_rem_pio2+0x29a>
 800c9e6:	9b04      	ldr	r3, [sp, #16]
 800c9e8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c9ec:	eb0d 0203 	add.w	r2, sp, r3
 800c9f0:	9b01      	ldr	r3, [sp, #4]
 800c9f2:	18e8      	adds	r0, r5, r3
 800c9f4:	ab1a      	add	r3, sp, #104	; 0x68
 800c9f6:	1c6e      	adds	r6, r5, #1
 800c9f8:	3a98      	subs	r2, #152	; 0x98
 800c9fa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c9fe:	4465      	add	r5, ip
 800ca00:	42b5      	cmp	r5, r6
 800ca02:	f6ff af05 	blt.w	800c810 <__kernel_rem_pio2+0xd0>
 800ca06:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800ca0a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ca0e:	ee07 3a90 	vmov	s15, r3
 800ca12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ca16:	f04f 0c00 	mov.w	ip, #0
 800ca1a:	eca0 7b02 	vstmia	r0!, {d7}
 800ca1e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ca50 <__kernel_rem_pio2+0x310>
 800ca22:	4680      	mov	r8, r0
 800ca24:	458c      	cmp	ip, r1
 800ca26:	dd07      	ble.n	800ca38 <__kernel_rem_pio2+0x2f8>
 800ca28:	eca2 7b02 	vstmia	r2!, {d7}
 800ca2c:	3601      	adds	r6, #1
 800ca2e:	e7e7      	b.n	800ca00 <__kernel_rem_pio2+0x2c0>
 800ca30:	9a03      	ldr	r2, [sp, #12]
 800ca32:	f04f 0c01 	mov.w	ip, #1
 800ca36:	e7d2      	b.n	800c9de <__kernel_rem_pio2+0x29e>
 800ca38:	ecbe 5b02 	vldmia	lr!, {d5}
 800ca3c:	ed38 6b02 	vldmdb	r8!, {d6}
 800ca40:	f10c 0c01 	add.w	ip, ip, #1
 800ca44:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ca48:	e7ec      	b.n	800ca24 <__kernel_rem_pio2+0x2e4>
 800ca4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca4e:	e76e      	b.n	800c92e <__kernel_rem_pio2+0x1ee>
	...
 800ca5c:	3e700000 	.word	0x3e700000
 800ca60:	00000000 	.word	0x00000000
 800ca64:	41700000 	.word	0x41700000
 800ca68:	0800d370 	.word	0x0800d370
 800ca6c:	0800d330 	.word	0x0800d330
 800ca70:	4260      	negs	r0, r4
 800ca72:	eeb0 0b48 	vmov.f64	d0, d8
 800ca76:	f000 fa93 	bl	800cfa0 <scalbn>
 800ca7a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800cc58 <__kernel_rem_pio2+0x518>
 800ca7e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ca82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca86:	db18      	blt.n	800caba <__kernel_rem_pio2+0x37a>
 800ca88:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800cc60 <__kernel_rem_pio2+0x520>
 800ca8c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ca90:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ca94:	aa06      	add	r2, sp, #24
 800ca96:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800ca9a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800ca9e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800caa2:	f105 0b01 	add.w	fp, r5, #1
 800caa6:	ee10 3a10 	vmov	r3, s0
 800caaa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800caae:	ee17 3a10 	vmov	r3, s14
 800cab2:	3418      	adds	r4, #24
 800cab4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800cab8:	e740      	b.n	800c93c <__kernel_rem_pio2+0x1fc>
 800caba:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cabe:	aa06      	add	r2, sp, #24
 800cac0:	ee10 3a10 	vmov	r3, s0
 800cac4:	46ab      	mov	fp, r5
 800cac6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800caca:	e737      	b.n	800c93c <__kernel_rem_pio2+0x1fc>
 800cacc:	ac06      	add	r4, sp, #24
 800cace:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800cad2:	9401      	str	r4, [sp, #4]
 800cad4:	ee07 4a90 	vmov	s15, r4
 800cad8:	3901      	subs	r1, #1
 800cada:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cade:	ee27 7b00 	vmul.f64	d7, d7, d0
 800cae2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800cae6:	ed20 7b02 	vstmdb	r0!, {d7}
 800caea:	e735      	b.n	800c958 <__kernel_rem_pio2+0x218>
 800caec:	ecbc 5b02 	vldmia	ip!, {d5}
 800caf0:	ecb5 6b02 	vldmia	r5!, {d6}
 800caf4:	3401      	adds	r4, #1
 800caf6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cafa:	454c      	cmp	r4, r9
 800cafc:	dc01      	bgt.n	800cb02 <__kernel_rem_pio2+0x3c2>
 800cafe:	4284      	cmp	r4, r0
 800cb00:	ddf4      	ble.n	800caec <__kernel_rem_pio2+0x3ac>
 800cb02:	ac42      	add	r4, sp, #264	; 0x108
 800cb04:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800cb08:	ed80 7b00 	vstr	d7, [r0]
 800cb0c:	3901      	subs	r1, #1
 800cb0e:	e727      	b.n	800c960 <__kernel_rem_pio2+0x220>
 800cb10:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800cb12:	2902      	cmp	r1, #2
 800cb14:	dc0a      	bgt.n	800cb2c <__kernel_rem_pio2+0x3ec>
 800cb16:	2900      	cmp	r1, #0
 800cb18:	dc2c      	bgt.n	800cb74 <__kernel_rem_pio2+0x434>
 800cb1a:	d045      	beq.n	800cba8 <__kernel_rem_pio2+0x468>
 800cb1c:	f008 0007 	and.w	r0, r8, #7
 800cb20:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800cb24:	ecbd 8b06 	vpop	{d8-d10}
 800cb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800cb2e:	2a03      	cmp	r2, #3
 800cb30:	d1f4      	bne.n	800cb1c <__kernel_rem_pio2+0x3dc>
 800cb32:	aa42      	add	r2, sp, #264	; 0x108
 800cb34:	4413      	add	r3, r2
 800cb36:	461a      	mov	r2, r3
 800cb38:	4619      	mov	r1, r3
 800cb3a:	4658      	mov	r0, fp
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	f1a1 0108 	sub.w	r1, r1, #8
 800cb42:	dc54      	bgt.n	800cbee <__kernel_rem_pio2+0x4ae>
 800cb44:	4659      	mov	r1, fp
 800cb46:	2901      	cmp	r1, #1
 800cb48:	f1a2 0208 	sub.w	r2, r2, #8
 800cb4c:	dc5f      	bgt.n	800cc0e <__kernel_rem_pio2+0x4ce>
 800cb4e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800cc68 <__kernel_rem_pio2+0x528>
 800cb52:	3308      	adds	r3, #8
 800cb54:	f1bb 0f01 	cmp.w	fp, #1
 800cb58:	dc69      	bgt.n	800cc2e <__kernel_rem_pio2+0x4ee>
 800cb5a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800cb5e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800cb62:	2e00      	cmp	r6, #0
 800cb64:	d16a      	bne.n	800cc3c <__kernel_rem_pio2+0x4fc>
 800cb66:	ed87 5b00 	vstr	d5, [r7]
 800cb6a:	ed87 6b02 	vstr	d6, [r7, #8]
 800cb6e:	ed87 7b04 	vstr	d7, [r7, #16]
 800cb72:	e7d3      	b.n	800cb1c <__kernel_rem_pio2+0x3dc>
 800cb74:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800cc68 <__kernel_rem_pio2+0x528>
 800cb78:	ab42      	add	r3, sp, #264	; 0x108
 800cb7a:	441a      	add	r2, r3
 800cb7c:	465b      	mov	r3, fp
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	da26      	bge.n	800cbd0 <__kernel_rem_pio2+0x490>
 800cb82:	b35e      	cbz	r6, 800cbdc <__kernel_rem_pio2+0x49c>
 800cb84:	eeb1 7b46 	vneg.f64	d7, d6
 800cb88:	ed87 7b00 	vstr	d7, [r7]
 800cb8c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800cb90:	aa44      	add	r2, sp, #272	; 0x110
 800cb92:	2301      	movs	r3, #1
 800cb94:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cb98:	459b      	cmp	fp, r3
 800cb9a:	da22      	bge.n	800cbe2 <__kernel_rem_pio2+0x4a2>
 800cb9c:	b10e      	cbz	r6, 800cba2 <__kernel_rem_pio2+0x462>
 800cb9e:	eeb1 7b47 	vneg.f64	d7, d7
 800cba2:	ed87 7b02 	vstr	d7, [r7, #8]
 800cba6:	e7b9      	b.n	800cb1c <__kernel_rem_pio2+0x3dc>
 800cba8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800cc68 <__kernel_rem_pio2+0x528>
 800cbac:	ab42      	add	r3, sp, #264	; 0x108
 800cbae:	441a      	add	r2, r3
 800cbb0:	f1bb 0f00 	cmp.w	fp, #0
 800cbb4:	da05      	bge.n	800cbc2 <__kernel_rem_pio2+0x482>
 800cbb6:	b10e      	cbz	r6, 800cbbc <__kernel_rem_pio2+0x47c>
 800cbb8:	eeb1 7b47 	vneg.f64	d7, d7
 800cbbc:	ed87 7b00 	vstr	d7, [r7]
 800cbc0:	e7ac      	b.n	800cb1c <__kernel_rem_pio2+0x3dc>
 800cbc2:	ed32 6b02 	vldmdb	r2!, {d6}
 800cbc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbca:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cbce:	e7ef      	b.n	800cbb0 <__kernel_rem_pio2+0x470>
 800cbd0:	ed32 7b02 	vldmdb	r2!, {d7}
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cbda:	e7d0      	b.n	800cb7e <__kernel_rem_pio2+0x43e>
 800cbdc:	eeb0 7b46 	vmov.f64	d7, d6
 800cbe0:	e7d2      	b.n	800cb88 <__kernel_rem_pio2+0x448>
 800cbe2:	ecb2 6b02 	vldmia	r2!, {d6}
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cbec:	e7d4      	b.n	800cb98 <__kernel_rem_pio2+0x458>
 800cbee:	ed91 7b00 	vldr	d7, [r1]
 800cbf2:	ed91 5b02 	vldr	d5, [r1, #8]
 800cbf6:	3801      	subs	r0, #1
 800cbf8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800cbfc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cc00:	ed81 6b00 	vstr	d6, [r1]
 800cc04:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cc08:	ed81 7b02 	vstr	d7, [r1, #8]
 800cc0c:	e796      	b.n	800cb3c <__kernel_rem_pio2+0x3fc>
 800cc0e:	ed92 7b00 	vldr	d7, [r2]
 800cc12:	ed92 5b02 	vldr	d5, [r2, #8]
 800cc16:	3901      	subs	r1, #1
 800cc18:	ee37 6b05 	vadd.f64	d6, d7, d5
 800cc1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cc20:	ed82 6b00 	vstr	d6, [r2]
 800cc24:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cc28:	ed82 7b02 	vstr	d7, [r2, #8]
 800cc2c:	e78b      	b.n	800cb46 <__kernel_rem_pio2+0x406>
 800cc2e:	ed33 6b02 	vldmdb	r3!, {d6}
 800cc32:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc36:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cc3a:	e78b      	b.n	800cb54 <__kernel_rem_pio2+0x414>
 800cc3c:	eeb1 5b45 	vneg.f64	d5, d5
 800cc40:	eeb1 6b46 	vneg.f64	d6, d6
 800cc44:	ed87 5b00 	vstr	d5, [r7]
 800cc48:	eeb1 7b47 	vneg.f64	d7, d7
 800cc4c:	ed87 6b02 	vstr	d6, [r7, #8]
 800cc50:	e78d      	b.n	800cb6e <__kernel_rem_pio2+0x42e>
 800cc52:	bf00      	nop
 800cc54:	f3af 8000 	nop.w
 800cc58:	00000000 	.word	0x00000000
 800cc5c:	41700000 	.word	0x41700000
 800cc60:	00000000 	.word	0x00000000
 800cc64:	3e700000 	.word	0x3e700000
	...

0800cc70 <__kernel_tan>:
 800cc70:	eeb0 7b40 	vmov.f64	d7, d0
 800cc74:	ee17 3a90 	vmov	r3, s15
 800cc78:	4987      	ldr	r1, [pc, #540]	; (800ce98 <__kernel_tan+0x228>)
 800cc7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cc7e:	428a      	cmp	r2, r1
 800cc80:	b510      	push	{r4, lr}
 800cc82:	dc33      	bgt.n	800ccec <__kernel_tan+0x7c>
 800cc84:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800cc88:	ee16 1a90 	vmov	r1, s13
 800cc8c:	2900      	cmp	r1, #0
 800cc8e:	d143      	bne.n	800cd18 <__kernel_tan+0xa8>
 800cc90:	ee10 4a10 	vmov	r4, s0
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	4323      	orrs	r3, r4
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	d108      	bne.n	800ccae <__kernel_tan+0x3e>
 800cc9c:	f000 f900 	bl	800cea0 <fabs>
 800cca0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cca4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800cca8:	eeb0 0b47 	vmov.f64	d0, d7
 800ccac:	bd10      	pop	{r4, pc}
 800ccae:	2801      	cmp	r0, #1
 800ccb0:	d0fa      	beq.n	800cca8 <__kernel_tan+0x38>
 800ccb2:	ee30 6b01 	vadd.f64	d6, d0, d1
 800ccb6:	ec53 2b16 	vmov	r2, r3, d6
 800ccba:	460a      	mov	r2, r1
 800ccbc:	ec43 2b15 	vmov	d5, r2, r3
 800ccc0:	ee35 7b40 	vsub.f64	d7, d5, d0
 800ccc4:	ee31 1b47 	vsub.f64	d1, d1, d7
 800ccc8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800cccc:	ee87 4b06 	vdiv.f64	d4, d7, d6
 800ccd0:	ec53 2b14 	vmov	r2, r3, d4
 800ccd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ccd8:	460a      	mov	r2, r1
 800ccda:	ec43 2b17 	vmov	d7, r2, r3
 800ccde:	eea5 6b07 	vfma.f64	d6, d5, d7
 800cce2:	eea1 6b07 	vfma.f64	d6, d1, d7
 800cce6:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ccea:	e7dd      	b.n	800cca8 <__kernel_tan+0x38>
 800ccec:	496b      	ldr	r1, [pc, #428]	; (800ce9c <__kernel_tan+0x22c>)
 800ccee:	428a      	cmp	r2, r1
 800ccf0:	dd12      	ble.n	800cd18 <__kernel_tan+0xa8>
 800ccf2:	ed9f 6b49 	vldr	d6, [pc, #292]	; 800ce18 <__kernel_tan+0x1a8>
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	bfb8      	it	lt
 800ccfa:	eeb1 7b40 	vneglt.f64	d7, d0
 800ccfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cd02:	ed9f 6b47 	vldr	d6, [pc, #284]	; 800ce20 <__kernel_tan+0x1b0>
 800cd06:	bfb8      	it	lt
 800cd08:	eeb1 1b41 	vneglt.f64	d1, d1
 800cd0c:	ee36 1b41 	vsub.f64	d1, d6, d1
 800cd10:	ee31 7b07 	vadd.f64	d7, d1, d7
 800cd14:	ed9f 1b44 	vldr	d1, [pc, #272]	; 800ce28 <__kernel_tan+0x1b8>
 800cd18:	ee27 5b07 	vmul.f64	d5, d7, d7
 800cd1c:	ee25 6b05 	vmul.f64	d6, d5, d5
 800cd20:	ed9f 3b43 	vldr	d3, [pc, #268]	; 800ce30 <__kernel_tan+0x1c0>
 800cd24:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800ce38 <__kernel_tan+0x1c8>
 800cd28:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cd2c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 800ce40 <__kernel_tan+0x1d0>
 800cd30:	eea4 3b06 	vfma.f64	d3, d4, d6
 800cd34:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800ce48 <__kernel_tan+0x1d8>
 800cd38:	eea3 4b06 	vfma.f64	d4, d3, d6
 800cd3c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 800ce50 <__kernel_tan+0x1e0>
 800cd40:	eea4 3b06 	vfma.f64	d3, d4, d6
 800cd44:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800ce58 <__kernel_tan+0x1e8>
 800cd48:	ed9f 2b45 	vldr	d2, [pc, #276]	; 800ce60 <__kernel_tan+0x1f0>
 800cd4c:	eea3 4b06 	vfma.f64	d4, d3, d6
 800cd50:	ed9f 3b45 	vldr	d3, [pc, #276]	; 800ce68 <__kernel_tan+0x1f8>
 800cd54:	eea6 3b02 	vfma.f64	d3, d6, d2
 800cd58:	ed9f 2b45 	vldr	d2, [pc, #276]	; 800ce70 <__kernel_tan+0x200>
 800cd5c:	eea3 2b06 	vfma.f64	d2, d3, d6
 800cd60:	ed9f 3b45 	vldr	d3, [pc, #276]	; 800ce78 <__kernel_tan+0x208>
 800cd64:	eea2 3b06 	vfma.f64	d3, d2, d6
 800cd68:	ed9f 2b45 	vldr	d2, [pc, #276]	; 800ce80 <__kernel_tan+0x210>
 800cd6c:	eea3 2b06 	vfma.f64	d2, d3, d6
 800cd70:	ed9f 3b45 	vldr	d3, [pc, #276]	; 800ce88 <__kernel_tan+0x218>
 800cd74:	4949      	ldr	r1, [pc, #292]	; (800ce9c <__kernel_tan+0x22c>)
 800cd76:	eea2 3b06 	vfma.f64	d3, d2, d6
 800cd7a:	ee27 2b05 	vmul.f64	d2, d7, d5
 800cd7e:	eeb0 6b44 	vmov.f64	d6, d4
 800cd82:	eeb0 4b41 	vmov.f64	d4, d1
 800cd86:	eea3 6b05 	vfma.f64	d6, d3, d5
 800cd8a:	eea6 4b02 	vfma.f64	d4, d6, d2
 800cd8e:	ed9f 6b40 	vldr	d6, [pc, #256]	; 800ce90 <__kernel_tan+0x220>
 800cd92:	eea4 1b05 	vfma.f64	d1, d4, d5
 800cd96:	428a      	cmp	r2, r1
 800cd98:	eea2 1b06 	vfma.f64	d1, d2, d6
 800cd9c:	ee37 5b01 	vadd.f64	d5, d7, d1
 800cda0:	dd1d      	ble.n	800cdde <__kernel_tan+0x16e>
 800cda2:	ee25 3b05 	vmul.f64	d3, d5, d5
 800cda6:	179b      	asrs	r3, r3, #30
 800cda8:	ee06 0a90 	vmov	s13, r0
 800cdac:	f003 0302 	and.w	r3, r3, #2
 800cdb0:	f1c3 0301 	rsb	r3, r3, #1
 800cdb4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cdb8:	ee35 5b06 	vadd.f64	d5, d5, d6
 800cdbc:	ee83 4b05 	vdiv.f64	d4, d3, d5
 800cdc0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cdc4:	ee34 1b41 	vsub.f64	d1, d4, d1
 800cdc8:	ee37 7b41 	vsub.f64	d7, d7, d1
 800cdcc:	eea7 6b45 	vfms.f64	d6, d7, d5
 800cdd0:	ee07 3a10 	vmov	s14, r3
 800cdd4:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800cdd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cddc:	e764      	b.n	800cca8 <__kernel_tan+0x38>
 800cdde:	2801      	cmp	r0, #1
 800cde0:	d016      	beq.n	800ce10 <__kernel_tan+0x1a0>
 800cde2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cde6:	ec51 0b15 	vmov	r0, r1, d5
 800cdea:	2000      	movs	r0, #0
 800cdec:	ec41 0b13 	vmov	d3, r0, r1
 800cdf0:	ee33 7b47 	vsub.f64	d7, d3, d7
 800cdf4:	ee31 1b47 	vsub.f64	d1, d1, d7
 800cdf8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800cdfc:	ee87 4b05 	vdiv.f64	d4, d7, d5
 800ce00:	ec53 2b14 	vmov	r2, r3, d4
 800ce04:	4602      	mov	r2, r0
 800ce06:	ec43 2b17 	vmov	d7, r2, r3
 800ce0a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800ce0e:	e768      	b.n	800cce2 <__kernel_tan+0x72>
 800ce10:	eeb0 7b45 	vmov.f64	d7, d5
 800ce14:	e748      	b.n	800cca8 <__kernel_tan+0x38>
 800ce16:	bf00      	nop
 800ce18:	54442d18 	.word	0x54442d18
 800ce1c:	3fe921fb 	.word	0x3fe921fb
 800ce20:	33145c07 	.word	0x33145c07
 800ce24:	3c81a626 	.word	0x3c81a626
	...
 800ce30:	db605373 	.word	0xdb605373
 800ce34:	bef375cb 	.word	0xbef375cb
 800ce38:	a03792a6 	.word	0xa03792a6
 800ce3c:	3f147e88 	.word	0x3f147e88
 800ce40:	f2f26501 	.word	0xf2f26501
 800ce44:	3f4344d8 	.word	0x3f4344d8
 800ce48:	c9560328 	.word	0xc9560328
 800ce4c:	3f6d6d22 	.word	0x3f6d6d22
 800ce50:	8406d637 	.word	0x8406d637
 800ce54:	3f9664f4 	.word	0x3f9664f4
 800ce58:	1110fe7a 	.word	0x1110fe7a
 800ce5c:	3fc11111 	.word	0x3fc11111
 800ce60:	74bf7ad4 	.word	0x74bf7ad4
 800ce64:	3efb2a70 	.word	0x3efb2a70
 800ce68:	32f0a7e9 	.word	0x32f0a7e9
 800ce6c:	3f12b80f 	.word	0x3f12b80f
 800ce70:	1a8d1068 	.word	0x1a8d1068
 800ce74:	3f3026f7 	.word	0x3f3026f7
 800ce78:	fee08315 	.word	0xfee08315
 800ce7c:	3f57dbc8 	.word	0x3f57dbc8
 800ce80:	e96e8493 	.word	0xe96e8493
 800ce84:	3f8226e3 	.word	0x3f8226e3
 800ce88:	1bb341fe 	.word	0x1bb341fe
 800ce8c:	3faba1ba 	.word	0x3faba1ba
 800ce90:	55555563 	.word	0x55555563
 800ce94:	3fd55555 	.word	0x3fd55555
 800ce98:	3e2fffff 	.word	0x3e2fffff
 800ce9c:	3fe59427 	.word	0x3fe59427

0800cea0 <fabs>:
 800cea0:	ec51 0b10 	vmov	r0, r1, d0
 800cea4:	ee10 2a10 	vmov	r2, s0
 800cea8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ceac:	ec43 2b10 	vmov	d0, r2, r3
 800ceb0:	4770      	bx	lr
 800ceb2:	0000      	movs	r0, r0
 800ceb4:	0000      	movs	r0, r0
	...

0800ceb8 <floor>:
 800ceb8:	ee10 1a90 	vmov	r1, s1
 800cebc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cec0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800cec4:	2b13      	cmp	r3, #19
 800cec6:	b530      	push	{r4, r5, lr}
 800cec8:	ee10 0a10 	vmov	r0, s0
 800cecc:	ee10 5a10 	vmov	r5, s0
 800ced0:	dc31      	bgt.n	800cf36 <floor+0x7e>
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	da15      	bge.n	800cf02 <floor+0x4a>
 800ced6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800cf90 <floor+0xd8>
 800ceda:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cede:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee6:	dd07      	ble.n	800cef8 <floor+0x40>
 800cee8:	2900      	cmp	r1, #0
 800ceea:	da4e      	bge.n	800cf8a <floor+0xd2>
 800ceec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cef0:	4318      	orrs	r0, r3
 800cef2:	d001      	beq.n	800cef8 <floor+0x40>
 800cef4:	4928      	ldr	r1, [pc, #160]	; (800cf98 <floor+0xe0>)
 800cef6:	2000      	movs	r0, #0
 800cef8:	460b      	mov	r3, r1
 800cefa:	4602      	mov	r2, r0
 800cefc:	ec43 2b10 	vmov	d0, r2, r3
 800cf00:	e020      	b.n	800cf44 <floor+0x8c>
 800cf02:	4a26      	ldr	r2, [pc, #152]	; (800cf9c <floor+0xe4>)
 800cf04:	411a      	asrs	r2, r3
 800cf06:	ea01 0402 	and.w	r4, r1, r2
 800cf0a:	4304      	orrs	r4, r0
 800cf0c:	d01a      	beq.n	800cf44 <floor+0x8c>
 800cf0e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800cf90 <floor+0xd8>
 800cf12:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cf16:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cf1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1e:	ddeb      	ble.n	800cef8 <floor+0x40>
 800cf20:	2900      	cmp	r1, #0
 800cf22:	bfbe      	ittt	lt
 800cf24:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800cf28:	fa40 f303 	asrlt.w	r3, r0, r3
 800cf2c:	18c9      	addlt	r1, r1, r3
 800cf2e:	ea21 0102 	bic.w	r1, r1, r2
 800cf32:	2000      	movs	r0, #0
 800cf34:	e7e0      	b.n	800cef8 <floor+0x40>
 800cf36:	2b33      	cmp	r3, #51	; 0x33
 800cf38:	dd05      	ble.n	800cf46 <floor+0x8e>
 800cf3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf3e:	d101      	bne.n	800cf44 <floor+0x8c>
 800cf40:	ee30 0b00 	vadd.f64	d0, d0, d0
 800cf44:	bd30      	pop	{r4, r5, pc}
 800cf46:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800cf4a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf4e:	40e2      	lsrs	r2, r4
 800cf50:	4202      	tst	r2, r0
 800cf52:	d0f7      	beq.n	800cf44 <floor+0x8c>
 800cf54:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800cf90 <floor+0xd8>
 800cf58:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cf5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cf60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf64:	ddc8      	ble.n	800cef8 <floor+0x40>
 800cf66:	2900      	cmp	r1, #0
 800cf68:	da02      	bge.n	800cf70 <floor+0xb8>
 800cf6a:	2b14      	cmp	r3, #20
 800cf6c:	d103      	bne.n	800cf76 <floor+0xbe>
 800cf6e:	3101      	adds	r1, #1
 800cf70:	ea20 0002 	bic.w	r0, r0, r2
 800cf74:	e7c0      	b.n	800cef8 <floor+0x40>
 800cf76:	2401      	movs	r4, #1
 800cf78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cf7c:	fa04 f303 	lsl.w	r3, r4, r3
 800cf80:	4418      	add	r0, r3
 800cf82:	42a8      	cmp	r0, r5
 800cf84:	bf38      	it	cc
 800cf86:	1909      	addcc	r1, r1, r4
 800cf88:	e7f2      	b.n	800cf70 <floor+0xb8>
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	4601      	mov	r1, r0
 800cf8e:	e7b3      	b.n	800cef8 <floor+0x40>
 800cf90:	8800759c 	.word	0x8800759c
 800cf94:	7e37e43c 	.word	0x7e37e43c
 800cf98:	bff00000 	.word	0xbff00000
 800cf9c:	000fffff 	.word	0x000fffff

0800cfa0 <scalbn>:
 800cfa0:	ee10 1a90 	vmov	r1, s1
 800cfa4:	b510      	push	{r4, lr}
 800cfa6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800cfaa:	b98c      	cbnz	r4, 800cfd0 <scalbn+0x30>
 800cfac:	ee10 3a10 	vmov	r3, s0
 800cfb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cfb4:	430b      	orrs	r3, r1
 800cfb6:	d011      	beq.n	800cfdc <scalbn+0x3c>
 800cfb8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800d080 <scalbn+0xe0>
 800cfbc:	4b3c      	ldr	r3, [pc, #240]	; (800d0b0 <scalbn+0x110>)
 800cfbe:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cfc2:	4298      	cmp	r0, r3
 800cfc4:	da0b      	bge.n	800cfde <scalbn+0x3e>
 800cfc6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800d088 <scalbn+0xe8>
 800cfca:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cfce:	e005      	b.n	800cfdc <scalbn+0x3c>
 800cfd0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800cfd4:	429c      	cmp	r4, r3
 800cfd6:	d107      	bne.n	800cfe8 <scalbn+0x48>
 800cfd8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800cfdc:	bd10      	pop	{r4, pc}
 800cfde:	ee10 1a90 	vmov	r1, s1
 800cfe2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800cfe6:	3c36      	subs	r4, #54	; 0x36
 800cfe8:	4404      	add	r4, r0
 800cfea:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800cfee:	429c      	cmp	r4, r3
 800cff0:	dd0d      	ble.n	800d00e <scalbn+0x6e>
 800cff2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800d090 <scalbn+0xf0>
 800cff6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800d098 <scalbn+0xf8>
 800cffa:	eeb0 6b47 	vmov.f64	d6, d7
 800cffe:	ee10 3a90 	vmov	r3, s1
 800d002:	2b00      	cmp	r3, #0
 800d004:	fe27 7b05 	vselge.f64	d7, d7, d5
 800d008:	ee27 0b06 	vmul.f64	d0, d7, d6
 800d00c:	e7e6      	b.n	800cfdc <scalbn+0x3c>
 800d00e:	2c00      	cmp	r4, #0
 800d010:	dd0a      	ble.n	800d028 <scalbn+0x88>
 800d012:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800d016:	ec53 2b10 	vmov	r2, r3, d0
 800d01a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800d01e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800d022:	ec43 2b10 	vmov	d0, r2, r3
 800d026:	e7d9      	b.n	800cfdc <scalbn+0x3c>
 800d028:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800d02c:	da19      	bge.n	800d062 <scalbn+0xc2>
 800d02e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d032:	4298      	cmp	r0, r3
 800d034:	ee10 3a90 	vmov	r3, s1
 800d038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d03c:	dd09      	ble.n	800d052 <scalbn+0xb2>
 800d03e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800d090 <scalbn+0xf0>
 800d042:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800d098 <scalbn+0xf8>
 800d046:	eeb0 7b40 	vmov.f64	d7, d0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800d050:	e7bb      	b.n	800cfca <scalbn+0x2a>
 800d052:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800d088 <scalbn+0xe8>
 800d056:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800d0a0 <scalbn+0x100>
 800d05a:	eeb0 7b40 	vmov.f64	d7, d0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	e7f4      	b.n	800d04c <scalbn+0xac>
 800d062:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800d066:	ec53 2b10 	vmov	r2, r3, d0
 800d06a:	3436      	adds	r4, #54	; 0x36
 800d06c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800d070:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800d074:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800d0a8 <scalbn+0x108>
 800d078:	ec43 2b10 	vmov	d0, r2, r3
 800d07c:	e7a5      	b.n	800cfca <scalbn+0x2a>
 800d07e:	bf00      	nop
 800d080:	00000000 	.word	0x00000000
 800d084:	43500000 	.word	0x43500000
 800d088:	c2f8f359 	.word	0xc2f8f359
 800d08c:	01a56e1f 	.word	0x01a56e1f
 800d090:	8800759c 	.word	0x8800759c
 800d094:	7e37e43c 	.word	0x7e37e43c
 800d098:	8800759c 	.word	0x8800759c
 800d09c:	fe37e43c 	.word	0xfe37e43c
 800d0a0:	c2f8f359 	.word	0xc2f8f359
 800d0a4:	81a56e1f 	.word	0x81a56e1f
 800d0a8:	00000000 	.word	0x00000000
 800d0ac:	3c900000 	.word	0x3c900000
 800d0b0:	ffff3cb0 	.word	0xffff3cb0

0800d0b4 <__libc_init_array>:
 800d0b4:	b570      	push	{r4, r5, r6, lr}
 800d0b6:	4d0d      	ldr	r5, [pc, #52]	; (800d0ec <__libc_init_array+0x38>)
 800d0b8:	4c0d      	ldr	r4, [pc, #52]	; (800d0f0 <__libc_init_array+0x3c>)
 800d0ba:	1b64      	subs	r4, r4, r5
 800d0bc:	10a4      	asrs	r4, r4, #2
 800d0be:	2600      	movs	r6, #0
 800d0c0:	42a6      	cmp	r6, r4
 800d0c2:	d109      	bne.n	800d0d8 <__libc_init_array+0x24>
 800d0c4:	4d0b      	ldr	r5, [pc, #44]	; (800d0f4 <__libc_init_array+0x40>)
 800d0c6:	4c0c      	ldr	r4, [pc, #48]	; (800d0f8 <__libc_init_array+0x44>)
 800d0c8:	f000 f82e 	bl	800d128 <_init>
 800d0cc:	1b64      	subs	r4, r4, r5
 800d0ce:	10a4      	asrs	r4, r4, #2
 800d0d0:	2600      	movs	r6, #0
 800d0d2:	42a6      	cmp	r6, r4
 800d0d4:	d105      	bne.n	800d0e2 <__libc_init_array+0x2e>
 800d0d6:	bd70      	pop	{r4, r5, r6, pc}
 800d0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0dc:	4798      	blx	r3
 800d0de:	3601      	adds	r6, #1
 800d0e0:	e7ee      	b.n	800d0c0 <__libc_init_array+0xc>
 800d0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0e6:	4798      	blx	r3
 800d0e8:	3601      	adds	r6, #1
 800d0ea:	e7f2      	b.n	800d0d2 <__libc_init_array+0x1e>
 800d0ec:	0800d380 	.word	0x0800d380
 800d0f0:	0800d380 	.word	0x0800d380
 800d0f4:	0800d380 	.word	0x0800d380
 800d0f8:	0800d384 	.word	0x0800d384

0800d0fc <memcpy>:
 800d0fc:	440a      	add	r2, r1
 800d0fe:	4291      	cmp	r1, r2
 800d100:	f100 33ff 	add.w	r3, r0, #4294967295
 800d104:	d100      	bne.n	800d108 <memcpy+0xc>
 800d106:	4770      	bx	lr
 800d108:	b510      	push	{r4, lr}
 800d10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d10e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d112:	4291      	cmp	r1, r2
 800d114:	d1f9      	bne.n	800d10a <memcpy+0xe>
 800d116:	bd10      	pop	{r4, pc}

0800d118 <memset>:
 800d118:	4402      	add	r2, r0
 800d11a:	4603      	mov	r3, r0
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d100      	bne.n	800d122 <memset+0xa>
 800d120:	4770      	bx	lr
 800d122:	f803 1b01 	strb.w	r1, [r3], #1
 800d126:	e7f9      	b.n	800d11c <memset+0x4>

0800d128 <_init>:
 800d128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12a:	bf00      	nop
 800d12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d12e:	bc08      	pop	{r3}
 800d130:	469e      	mov	lr, r3
 800d132:	4770      	bx	lr

0800d134 <_fini>:
 800d134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d136:	bf00      	nop
 800d138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d13a:	bc08      	pop	{r3}
 800d13c:	469e      	mov	lr, r3
 800d13e:	4770      	bx	lr
